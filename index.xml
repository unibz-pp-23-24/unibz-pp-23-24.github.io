<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/</link>
    <description>Recent content in Introduction on Programming project 2023-24</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basics: repository, commits and branches</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/basics/</guid>
      <description>Basics: repository, commits and branches # Repository # A git repository is a folder that stores a project. It is identical to a regular folder, except for a hidden folder named .git. This folder stores (among others) the whole history of the project. Commit # A commit is a snapshot of a repository. Each commit has medatada associated to it. In particular:&#xA;an ID, the name of the commit&amp;rsquo;s author, a timestamp, a message that describes the commit.</description>
    </item>
    <item>
      <title>Call stack</title>
      <link>https://unibz-pp-23-24.github.io/docs/errors/sections/callstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/errors/sections/callstack/</guid>
      <description>Call stack # A call stack is a stack that keeps track of the methods that are active during the execution of a program. By &amp;ldquo;active&amp;rdquo;, we mean that an execution of the method has started and has not terminated yet.&#xA;When the execution of a method starts, it is &amp;ldquo;added&amp;rdquo; to the stack. When it terminates, the method is &amp;ldquo;removed&amp;rdquo; from the stack, and control is passed back to the method that called it.</description>
    </item>
    <item>
      <title>Computational problem</title>
      <link>https://unibz-pp-23-24.github.io/docs/background/sections/problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/background/sections/problem/</guid>
      <description>Computational problem # A computational problem is (usually) specified as:&#xA;a set of possible inputs, and the expected outputs (for these inputs). Problem vs algorithm # For instance, here is a problem that you may have encountered already:&#xA;Input: a sorted array A of integers, an integer a Output: true if a appears in A, false otherwise There are (infinitely) many algorithms that can solve this problem. But some of them are more efficient than others.</description>
    </item>
    <item>
      <title>Linear recursion</title>
      <link>https://unibz-pp-23-24.github.io/docs/recursion/sections/linear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/recursion/sections/linear/</guid>
      <description>Linear recursion # Definition. A recursive method is linear recursive if it performs at most one recursive call each time it is executed. Terminology. The term unary recursion is sometimes used to refer to linear recursive algorithms (as opposed to n-ary recursion). Hint. A linear recursive algorithm is often easy to transform into an iterative one (i.e. an algorithm that uses only loops). Example # Exercise Write in pseudocode a (linear) recursive algorithm for a method int occ(char[] A, char c) that:</description>
    </item>
    <item>
      <title>List</title>
      <link>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/list/</guid>
      <description>List # The abstract data type list simulates a tuple. Accordingly, a list may contain duplicates.&#xA;A list may expose the following methods:&#xA;isEmpty is self-explanatory, append adds an element at the end of the list, prepend adds an element at the beginning of the list, tail returns the sub-list identical to the current one, but without its first element, etc. Note. The size of a list is often unbounded (as opposed to the size of an array for instance).</description>
    </item>
    <item>
      <title>Objects</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/objects/</guid>
      <description>Objects # An object is a way to group data in a meaningful way.&#xA;A simple example: JSON objects # Here is a JSON object (in Javascript syntax) that describes the city of Florence:&#xA;{ name: &amp;#34;Florence&amp;#34;, zipcode: 50100 } A JSON object may contain other objects, as well as arrays (of values, objects or arrays). For instance:&#xA;{ name: &amp;#34;Alice&amp;#34;, age: 26, birthPlace: { name: &amp;#34;Florence&amp;#34;, zipcode: 50100 }, jobs: [ { employer: &amp;#34;Kolping&amp;#34;, start: 2021, end: 2022 }, { employer : &amp;#34;Eurac&amp;#34;, start: 2023 } ] } In JSON:</description>
    </item>
    <item>
      <title>Option 1: free project</title>
      <link>https://unibz-pp-23-24.github.io/docs/project/sections/free_project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/project/sections/free_project/</guid>
      <description>Option 1: free project # The first option available to you for your project consists in developing a Java application of your choice.&#xA;This application is only a prototype, so it does not need a comprehensive list of features or functionalities.&#xA;The evaluation of your project will be mostly based on its backend (rather than the frontend). This means that your application:&#xA;does not necessarily need a graphical user interface (but you may choose to develop one), should perform non-trivial backend task(s) (e.</description>
    </item>
    <item>
      <title>Packaging a Java application</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/packaging/</guid>
      <description>Packaging a Java application # Java (like C# or Python) is a precompiled language, meaning that source code is compiled into a machine-independent representation called bytecode. Bytecode can be distributed and executed on any machine.&#xA;In Java, by convention, a source file MyClass.java is compiled into a bytecode file MyClass.class.&#xA;A Java Virtual Machine (JVM) is a program in charge of executing Java bytecode. A packaged Java program is usually a zip file that contains:</description>
    </item>
    <item>
      <title>Paths and files in Java</title>
      <link>https://unibz-pp-23-24.github.io/docs/input/sections/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/input/sections/files/</guid>
      <description>Paths and files in Java # Java&amp;rsquo;s initial package for input/output (I/O) is called java.io. A central class in this package is File.&#xA;Over the years, programmers realized that this package had limitations: limited error handling, limited support for file metadata (owner, access rights, etc.), and some performance issues.&#xA;With Java 7 (2011), A new I/O package called NIO2 was released, with additional features (and in some cases a more concise syntax).</description>
    </item>
    <item>
      <title>Pattern matching</title>
      <link>https://unibz-pp-23-24.github.io/docs/regex/sections/pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/regex/sections/pattern/</guid>
      <description>Pattern matching # Two of the main uses of regexes are:&#xA;string validation, i.e. check whether a string satisfies certain constraints. For instance: has at least one digit and one special character, is a valid address, etc. string search, i.e. identify occurrences of a pattern in a line or in a file. This can be useful for: replacing strings in a file or a folder (e.g. within a codebase), splitting a sentence into (natural language) words, splitting a program into meaningful substrings, e.</description>
    </item>
    <item>
      <title>Pure function</title>
      <link>https://unibz-pp-23-24.github.io/docs/streams/sections/pure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/streams/sections/pure/</guid>
      <description>Pure function # Side effects # Definition. A method has side effects if it modifies resources (variable, object, array, etc.) that are accessible outside of the method&amp;rsquo;s scope. Definition # Intuitively, a pure function is a method that behaves like a mathematical function. More precisely:&#xA;Definition. A pure function is a method that:&#xA;returns a value (i.e. with a return type different from void in Java), returns the same value if called twice with the same arguments, has no side-effect.</description>
    </item>
    <item>
      <title>Schedule</title>
      <link>https://unibz-pp-23-24.github.io/docs/intro/sections/schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/intro/sections/schedule/</guid>
      <description>Schedule # The course consists of 60 hours of lectures and 30 hours of labs.&#xA;Lectures # By default, lectures are scheduled:&#xA;Tuesday 10:00 - 12:00 Wednesday 08:00 - 10:00 Thursday 10:00 - 12:00 All students attend the same lectures.&#xA;One lecture (to be determined) will be dedicated to a visit to Raiffeisen Information Service in Bolzano.&#xA;Labs # By default, labs are scheduled:&#xA;Tuesday 16:00 - 18:00 Friday 14:00 - 16:00 Students are split in two groups (to be determined) for the labs, with identical content.</description>
    </item>
    <item>
      <title>Specification and programming interface</title>
      <link>https://unibz-pp-23-24.github.io/docs/interfaces/sections/specification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/interfaces/sections/specification/</guid>
      <description>Specification and programming interface # Specification # The specification of a method usually consists of:&#xA;the computational problem that the method solves (if any), and (if needed,) a description of the format of the input and expected output, and (if applicable,) a description of the behavior of the program for invalid inputs (e.g. errors thrown by the method), and (if useful,) information about the implementation (e.g. if this may have an impact on performance for certain inputs).</description>
    </item>
    <item>
      <title>Basics: network and collaboration</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/collaboration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/collaboration/</guid>
      <description>Basics: network and collaboration # Network # In the previous section, Alice created and manipulated a git repository (with two branches).&#xA;She may also want to backup her work. To this end, she can upload some of her branches to a remote machine (often called &amp;ldquo;a remote&amp;rdquo;). For instance use a cloud hosting service for git repositories (such as GitHub, Gitlab, Bitbucket, etc.).&#xA;Whenever Alice wants to upload the content of a branch, she can push this branch to the remote.</description>
    </item>
    <item>
      <title>Class and instance</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/classes/</guid>
      <description>Class and instance # A class can be viewed as a blueprint for a set of similar objects.&#xA;For instance, consider the two objects:&#xA;{ name: &amp;#34;Florence&amp;#34;, zipCode: 50100, region: &amp;#34;Tuscany&amp;#34; } { name: &amp;#34;Rome&amp;#34;, zipCode: 00100, region: &amp;#34;Lazio&amp;#34; } Each of these objects describes a city, and they share the same keys (name, zipCode and region). A possible class for these two objects may enforce this structure, and it could be named City.</description>
    </item>
    <item>
      <title>Code units</title>
      <link>https://unibz-pp-23-24.github.io/docs/unittests/sections/structured/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/unittests/sections/structured/</guid>
      <description>Code units # A unit test is meant to test to a small unit of code. This is only possible if the program contains small units of code.&#xA;Therefore unit testing is closely related to decomposing complex problems into smaller ones (and creating methods that solve these smaller problems).&#xA;Benefits # Possible benefits of decomposing complex methods into smaller ones are:&#xA;readability, easier debugging, opportunities to factorize code (the same small methods can be called in several places), easier collaboration (two person modifying the same method in parallel is less likely if the method is small), Some good indicators that auxiliary methods may be helpful are:</description>
    </item>
    <item>
      <title>Development driven by unit tests</title>
      <link>https://unibz-pp-23-24.github.io/docs/unittests/sections/tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/unittests/sections/tdd/</guid>
      <description>Development driven by unit tests # Test-driven development (TDD) consists in converting a program&amp;rsquo;s requirements into test cases, before the program is fully developed. Note that this approach is not restricted to unit tests.&#xA;In practice # For a non-trivial method:&#xA;Create a method stub (e.g. return null is the method&amp;rsquo;s return type is a reference type). Specify the expected behavior (input and expected output) of the method. Write one or several test(s) for this method, illustrating the specification.</description>
    </item>
    <item>
      <title>Exceptions</title>
      <link>https://unibz-pp-23-24.github.io/docs/errors/sections/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/errors/sections/exceptions/</guid>
      <description>Exceptions # Programming languages may significantly differ in the way they support errors messages.&#xA;Java relies on a mechanism called exceptions. Several other languages use exceptions, for instance C++, C#, PHP, Python or Ruby. However, the purpose of exceptions may vary from one language to another.&#xA;An exception is an object or data structure that stores information about an exceptional condition encountered during the execution of a program. in Java # In Java, an exception is an object, instance of the native class Exception.</description>
    </item>
    <item>
      <title>Hierarchical file system</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/files/</guid>
      <description>Hierarchical file system # Tree # Most operating system expose files as a tree (or possibly several trees for Windows).&#xA;Definition. A (nonempty) tree is either:&#xA;a single node (called a leaf), or a node with one or several children that are trees. In this tree, non-leaf nodes are directories, and the leaves can be files, executables, links, empty directories, etc. For instance:&#xA;├── bin │ ├── echo │ └── .</description>
    </item>
    <item>
      <title>in practice</title>
      <link>https://unibz-pp-23-24.github.io/docs/regex/sections/practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/regex/sections/practice/</guid>
      <description>Regexes in practice # Concrete regexes deviate from theoretical ones in several ways. In particular:&#xA;Concrete syntaxes include a wide range of syntactic sugar, i.e. operators that could in theory be expressed in terms of |, * and concatenation.&#xA;Many regex engines support expressions with features (such as backreferences) that go beyond the expressivity of theoretical regexes. Technically, such expressions do not qualify as as regexes (they may describe a language that is not regular).</description>
    </item>
    <item>
      <title>Java interfaces</title>
      <link>https://unibz-pp-23-24.github.io/docs/interfaces/sections/java_interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/interfaces/sections/java_interfaces/</guid>
      <description>Java interfaces # A Java interface is a programming interface with additional (object-oriented) features.&#xA;Syntactically, a Java interface is similar to a class. But (in its simplest form), it contains no code. Instead, it specifies the behavior of some methods (which are implemented in some classes).&#xA;Examples # The implementation of our game contains an interface called Snapshot, which describes what a game snapshot is. This interface specifies (among others) a method called getSizeOfReinforcement, as follows:</description>
    </item>
    <item>
      <title>Lambda expression</title>
      <link>https://unibz-pp-23-24.github.io/docs/streams/sections/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/streams/sections/lambda/</guid>
      <description>Lambda expressions # In programming languages like Java, C#, C++ or Javascript, the term lambda expression (sometimes called closure expression) is used to denote an anonymous method.&#xA;The term is a (loose) reference to lambda calculus, a model of computation exclusively based on function composition and application.&#xA;Example # An anonymous method is a method without a name.&#xA;For instance, the two following Java methods only differ by their name:</description>
    </item>
    <item>
      <title>Layout</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/layout/</guid>
      <description>Layout # The standard directory layout # By default, a Maven project is expected to comply with the so-called &amp;ldquo;standard directly layout&amp;rdquo;.&#xA;Warning. We restrict here the layout to files and folders that you are likely to use in your project. A comprehensive description can be found here. ├── pom.xml ├── README.md ├── src │ ├── main │ │ ├── java │ │ │ └── ... │ │ └── resources │ │ └── .</description>
    </item>
    <item>
      <title>N-ary recursion</title>
      <link>https://unibz-pp-23-24.github.io/docs/recursion/sections/nary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/recursion/sections/nary/</guid>
      <description>N-ary recursion # Definition. A recursive method that is not linear recursive uses n-ary recursion. Specific cases include:&#xA;binary recursion if a method performs up to two recursive calls each time it is executed, ternary recursion if it performs up to three recursive calls each time it is executed, etc. Examples.&#xA;The algorithm seen earlier to print all files in a folder uses n-ary recursion.&#xA;All the binary tree algorithms seen earlier use binary recursion.</description>
    </item>
    <item>
      <title>Option 2: board game</title>
      <link>https://unibz-pp-23-24.github.io/docs/project/sections/board_game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/project/sections/board_game/</guid>
      <description>Option 2: board game # The second project option available to you consists in developing a video game with mechanics analogous to the ones of Might &amp;amp; Magic: Clash of Heroes or Legend of Solgard.&#xA;If you choose this option, you will be provided:&#xA;a basic graphical user interface (GUI) that you can reuse and/or customize, examples during lectures that you may adapt to your project. Requirements # The minimal requirement to submit your project is a player vs player game playable on a single machine.</description>
    </item>
    <item>
      <title>Reading from and writing to a file in Java</title>
      <link>https://unibz-pp-23-24.github.io/docs/input/sections/read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/input/sections/read/</guid>
      <description>Reading from and writing to a file in Java # There are numerous ways to read from or write to a file in Java, using either native of external libraries.&#xA;We highlight here some of the simplest ones (syntactically), even though they may not be the most efficient.&#xA;We also restrict our scope to:&#xA;reading and writing text (but Java also offers multiple ways to read or write sequences of bytes), reading sequentially and writing by appending (but some classes like RandomAccessFile allow accessing any position in a file).</description>
    </item>
    <item>
      <title>Set</title>
      <link>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/set/</guid>
      <description>Set # The abstract data type set simulates a (usually finite) mathematical set. A set may expose the following methods:&#xA;add: adds an element to the set if it was not present already (and returns true iff this was the case), contains: checks whether an element belongs to the set, size: returns the cardinality of the set, etc. Warning. A set provides no guarantee on the order of its elements!</description>
    </item>
    <item>
      <title>Set, tuple, function</title>
      <link>https://unibz-pp-23-24.github.io/docs/background/sections/set_tuple_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/background/sections/set_tuple_map/</guid>
      <description>Set, tuple, function # Set # A set can be informally viewed as a collection of elements with no duplicate and in no specific order. Definition. The power set $\mathcal{P}(S)$ of a set $S$ is the set of all subsets of $S$. For instance, if \(S = \{a,b\}\) , then&#xA;\( \qquad \qquad \qquad \mathcal{P}(S) = \Big\{ \{\}, \{a\}, \{b\}, S \Big\} \) Note. An alternative notation for the power set of $S$ is $2^S$.</description>
    </item>
    <item>
      <title>Teaching staff</title>
      <link>https://unibz-pp-23-24.github.io/docs/intro/sections/lecturers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/intro/sections/lecturers/</guid>
      <description>Teaching staff # Julien Corman will teach the lectures and one lab.&#xA;Albulen Pano will teach the other lab.&#xA;Office hours # If you need additional help with the content of the course, the assignments and/or your project, you can ask for office hours with any (or both) of us.&#xA;These appointments must be scheduled via email (follow the links above for our email addresses).</description>
    </item>
    <item>
      <title>Associative array</title>
      <link>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/map/</guid>
      <description>Associative array # An associative array (or dictionary or map) simulates a function with finite domain. A associative array exposes at least the following methods:&#xA;lookup (or get) takes a key as input, and returns the value for this key (if any). insert (or put ) inserts a pair (key, value). If an entry for this key was already present, then overwrites its value. remove (or delete) deletes the entry for a given key (if any).</description>
    </item>
    <item>
      <title>Backup</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/backup/</guid>
      <description>Backup # Make sure that your work does not depend on your laptop. You should be able to resume your work easily on another computer if your laptop gets lost, damaged, etc.&#xA;You should also be able to recover your data if you accidentally delete it from your hard drive.&#xA;Which information to back up # As a priority, make sure that there exist copies (outside of your hard drive) of:</description>
    </item>
    <item>
      <title>Configuration</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/config/</guid>
      <description>Configuration # Text editor # In some situations (commit without message, merge commit, etc.), git automatically opens a text editor to let you type a message.&#xA;By default, on most operating systems, git open vi for this purpose. I you have never used vi, we recommend selecting another text editor.&#xA;You can do this by running:&#xA;git config --global core.editor &amp;lt;myEditor&amp;gt; where &amp;lt;myEditor&amp;gt; is the command that launches your text editor (for instance notepad for Notepad, open -e -W -n for TextEdit , gedit for gedit, sublime for Sublime Text, etc.</description>
    </item>
    <item>
      <title>Configuration file</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/pom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/pom/</guid>
      <description>Configuration file # The Project Object Model (POM) # The root folder of a Maven project normally contains a configuration file called pom.xml. This file provides the information needed to identify and build the project.&#xA;Hint. Your IDE can generate the backbone of a pom.xml file (for instance, when creating a Maven project). For a basic Java project, the pom.xml file usually has the following structure:&#xA;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.</description>
    </item>
    <item>
      <title>Correctness</title>
      <link>https://unibz-pp-23-24.github.io/docs/recursion/sections/correctness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/recursion/sections/correctness/</guid>
      <description>Correctness # To check whether a recursive method is correct, it is (usually) sufficient to check that the two following two properties hold:&#xA;(Base case(s)). The method is correct for the smallest possible inputs.&#xA;(Inductive case). For an arbitrary $n$:&#xA;$\qquad\qquad$ if the method is correct for all inputs of size $\leq n$, then it is correct for all inputs of size $n+1$.&#xA;Example. Consider the algorithm seen earlier to compute the sum of all nodes in a binary tree, if nodes are instance of the following class:</description>
    </item>
    <item>
      <title>Evaluation</title>
      <link>https://unibz-pp-23-24.github.io/docs/intro/sections/evaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/intro/sections/evaluation/</guid>
      <description>Evaluation # Evaluation for this course is based on:&#xA;assignments: up to 30 points, a group project: up to 60 points, and an oral exam: up to 10 points. Your final grade is the sum of the above, multiplied by 0.3.&#xA;Assignments # There will be 8 or 9 assignments for this course. These are standard programming exercises, related to notions seen during the lectures. The labs are (mostly) dedicated to these assignments.</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/inheritance/</guid>
      <description>Inheritance # Subclass # In most (class-based) object-oriented languages, a class A can extend another class B. In this case, A is called a subclass of B. The intuitive meaning is inclusion between their respective sets of instances, i.e. every instance of A is also an instance of B (but the converse may not hold).&#xA;This can be paraphrased in English by &amp;ldquo;every A is a B &amp;ldquo;. For instance:</description>
    </item>
    <item>
      <title>Using Java regexes</title>
      <link>https://unibz-pp-23-24.github.io/docs/regex/sections/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/regex/sections/java/</guid>
      <description>Using Java regexes # Escaping \ # A regex in Java is a string.&#xA;Recall that within a Java string, a \ character must be escaped (i.e. written \\) to be read as a normal character. So in a Java string that represents a regex, every \ should be written \\.&#xA;Example. The string &amp;quot;[A-Z]\\d+&amp;quot; represents the regex [A-Z]\d+ Hint. This is another good reason for using a regex validation tool (e.</description>
    </item>
    <item>
      <title>Artifact</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/artifact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/artifact/</guid>
      <description>Artifact # A Maven artifact is the output of a build process. It can for instance be a jar. Coordinates # A Maven artifact is identified by so-called coordinates:&#xA;groupId: identifier of the organization that created the project (this is usually the organization&amp;rsquo;s reversed domain name), artifactId: identifier of the project within the group, version: version of the artifact. Examples.&#xA;&amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;33.1.0-jre&amp;lt;/version&amp;gt; &amp;lt;groupId&amp;gt;com.github.haifengl&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;smile-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; These coordinates are notably used to declare dependencies.</description>
    </item>
    <item>
      <title>Checked vs unchecked</title>
      <link>https://unibz-pp-23-24.github.io/docs/errors/sections/checked/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/errors/sections/checked/</guid>
      <description>Checked vs unchecked # Unchecked exceptions # The simplest type of exception in Java is called an unchecked exception. An unchecked exception is an instances of the native class RuntimeException.&#xA;The class RuntimeException has several native subclasses. You may be familiar wit some of them: NullPointerException, ArrayIndexOutOfBoundsException, IllegalArgumentException, etc.&#xA;An unchecked exception that is not caught is automatically rethrown. Checked exceptions # In Java, an Exception that is not a RuntimeException is a checked exception.</description>
    </item>
    <item>
      <title>Configuration files</title>
      <link>https://unibz-pp-23-24.github.io/docs/input/sections/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/input/sections/property/</guid>
      <description>Configuration files # It is common practice for an application to store parameters (e.g. user-specific settings) in configuration files.&#xA;A configuration file may be edited manually and/or via a graphical interface.&#xA;Configuration files may use different serialization formats. Some popular formats are INI, JSON, TOML, YAML or XML.&#xA;in Java # Java provides native support for at least two configuration file serialization formats: XML and the so-called &amp;ldquo;property file&amp;rdquo; format.</description>
    </item>
    <item>
      <title>Content</title>
      <link>https://unibz-pp-23-24.github.io/docs/intro/sections/content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/intro/sections/content/</guid>
      <description>Content of the course # This is a beginner&amp;rsquo;s course on imperative and (class-based) object oriented programming, with an emphasis on practice and collaboration.&#xA;The course relies on Java as main programming language. However, many concepts seen in this course are relevant to other (imperative and/or object-oriented) programming languages: C/C++, C#, Javascript, Go, Kotlin, Lua, Perl, PHP, Python, Rust, Ruby, Typescript, Visual Basic, etc.&#xA;Prerequisites # Students are expected to have completed the Computer Programming course (INF/01 76258).</description>
    </item>
    <item>
      <title>Create or clone a repository</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/create/</guid>
      <description>Create or clone a repository # From a remote server # The most common way to create a repository is to create the remote copy first, using the web interface of your host (Github, Gitlab, Bitbucket, etc.).&#xA;You will be asked to give the repository a name. Then you will be provided an address that allows use to clone the repository on your own machine (via ssh or https).</description>
    </item>
    <item>
      <title>Instance methods</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/methods/</guid>
      <description>Instance methods # In most object-oriented languages (like Java), methods are implemented within class declarations.&#xA;An instance method can only be called using an instance of the class where it is declared.&#xA;For instance, in Java, an instance method declared in MyClass can be called by appending . to a variable of type MyClass. The object referenced by the variable is accessible in the method, as well as its attributes.</description>
    </item>
    <item>
      <title>Relation, preorder</title>
      <link>https://unibz-pp-23-24.github.io/docs/background/sections/order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/background/sections/order/</guid>
      <description>Relation, preorder # Relation # Definition. A relation over a set $S$ is a set of tuples over $S$ with the same arity. In particular:&#xA;a binary relation over $S$ is a set of pairs, or equivalently a subset of $S \times S$, a ternary relation over $S$ is a set of triples, or equivalently a subset of $S \times S \times S$, etc. For instance, if \(S = \{a,b,c,d\}\) , then</description>
    </item>
    <item>
      <title>Software management</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/install/</guid>
      <description>Software management # Dependencies # As a developer, you frequently need to download, install and/or update:&#xA;libraries used in your projects (called dependencies), core programming utilities, such as a compiler or interpreter for a given programming language, a package manager, etc. tools for software development: editor, debugger, visualization tool, etc. These programs have their own dependencies, that have their own dependencies, etc. And two programs may depend on different versions of a same third program.</description>
    </item>
    <item>
      <title>Stack, queue, priority queue</title>
      <link>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/queue/</guid>
      <description>Stack, queue, priority queue # Some abstract data types impose strong limitations on the set of operations allowed on a collection. These limitations provide opportunities for specialized implementations (i.e. specialized data structures), which can be very efficient in some contexts.&#xA;Stack # A stack (or Last In First Out queue or LIFO queue) simulates a collection organized as a physical stack (for instance a stack of plates). A stack exposes three main methods:</description>
    </item>
    <item>
      <title>Add, commit, stash</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/commit/</guid>
      <description>Add, commit, stash # Staging files # Git lets you to choose which modifications will be part of your next commit.&#xA;First, run&#xA;git status This will show which files have been added or modified since the last commit on the current branch (if any). In order to add (some of) these files to the next commit, you need to stage them.&#xA;If you want to stage all these files, from the root of the repository, run</description>
    </item>
    <item>
      <title>Board game</title>
      <link>https://unibz-pp-23-24.github.io/docs/intro/sections/board_game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/intro/sections/board_game/</guid>
      <description>Board game # In order to follow this course, you will need to play one of the two following video games:&#xA;Might &amp;amp; Magic: Clash of Heroes, or Legend of Solgard. These two games have very similar mechanics. So by default, we will refer to them as a unique game (e.g. when we write &amp;ldquo;this game&amp;rdquo; or &amp;ldquo;our board game&amp;rdquo;).&#xA;Why this game # Turn-based board games (like chess, go, checkers, etc.</description>
    </item>
    <item>
      <title>Custom exceptions</title>
      <link>https://unibz-pp-23-24.github.io/docs/errors/sections/custom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/errors/sections/custom/</guid>
      <description>Custom exception # Custom exceptions can be created by extending one of Java&amp;rsquo;s native exception types. For instance:&#xA;public class WrongNumberOfRowsException extends IllegalArgumentException { public WrongNumberOfRowsException(int numberOfRows) { super(&amp;#34;This sudoku grid has &amp;#34;+numberOfRows+&amp;#34; rows, whereas it should have 9&amp;#34;). } } A custom exception can be thrown like a regular one:&#xA;if(sudokuGrid.length != 9){ throw new WrongNumberOfRowsException(sudokuGrid.length); } Observation. In this example, WrongNumberOfRowsException extends IllegalArgumentException, which extends RuntimeException. Recall that an instance of a subclass of RuntimeException is unchecked.</description>
    </item>
    <item>
      <title>Dependencies</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/dependencies/</guid>
      <description>Dependencies # Maven (like Gradle) acts both as a build automation tool and as a package manager.&#xA;As a package manager, Maven (like Gradle) relies by default a software repository called Maven Central. This repository contains more than 260.000 artifacts (more than 6 million when counting versions), with over a trillion downloads in 2023.&#xA;An artifact on Maven Central is identified by its coordinates.&#xA;Finding a library&amp;rsquo;s coordinates # The coordinates of a library are often provided as part of its documentation.</description>
    </item>
    <item>
      <title>Displaying objects</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/tostring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/tostring/</guid>
      <description>Displaying objects # The class Object # Java has a native class called Object with 11 instance methods. Every Java class implicitly extends Object, including user-defined classes. Therefore any Java class inherits these methods. The method toString # toString is one of the methods of the class Object. Here is (part of) its specification:&#xA;/** Returns a string representation of the object. * In general, the toString method returns a string that * &amp;#34;textually represents&amp;#34; this object.</description>
    </item>
    <item>
      <title>in Java</title>
      <link>https://unibz-pp-23-24.github.io/docs/unittests/sections/junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/unittests/sections/junit/</guid>
      <description>Unit tests in Java # Several frameworks are available in Java for unit tests. Popular frameworks include:&#xA;JUnit 4 JUnit 5 TestNG Spock In this section, we focus on Junit 5.&#xA;Install Junit 5 with Maven # Junit 5 can be used in a Maven project by declaring the following dependency and plugin&#xA;&amp;lt;dependencies&amp;gt; ... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.10.2&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; ... &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; ... &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.</description>
    </item>
    <item>
      <title>Operating system</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/os/</guid>
      <description>Operating system (OS) # Your computer does not bind you to one OS. You can run multiple OSs on the same computer by:&#xA;partitioning your disk, or booting from an external drive, or using virtualisation. Depending on what you are developing, one operating system may be more convenient than another.&#xA;We review below some of the benefits and drawbacks of developing under Windows, macOS and Linux.&#xA;Windows # Benefits and drawbacks # Here are some benefits of using Windows as your OS for software development:</description>
    </item>
    <item>
      <title>Bibliography</title>
      <link>https://unibz-pp-23-24.github.io/docs/intro/sections/bibliography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/intro/sections/bibliography/</guid>
      <description>Bibliography # Java&amp;rsquo;s syntax # In each chapter of this course, you will find Java code snippets that illustrate how to perform certain operations. However, this documentation is far from exhaustive (on purpose).&#xA;So when it comes to syntax, the first two sources of complementary material for this course are:&#xA;the Javadoc of the libraries (standard and auxiliary) used in your project/assignments. Your IDE is often the fastest way to navigate through it, the web.</description>
    </item>
    <item>
      <title>Building</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/building/</guid>
      <description>Building # Cleaning # The command&#xA;mvn clean attempts to delete all content generated during a previous build (in particular, .class files).&#xA;Example. Let us assume that MyClass.java is compiled into MyClass.class, and then renamed MyNewClass.java. In this scenario, mvn clean allows eliminating the file MyClass.class from the target directory. The default lifecycle # Maven&amp;rsquo;s default lifecycle is a sequence of 23 operations (called phases) that can be executed during a build.</description>
    </item>
    <item>
      <title>Cast and equality</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/comparing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/comparing/</guid>
      <description>Cast and Equality # Cast # Java (as well as C# and C++) provides mechanisms to change the type associated with an object o, using either a supertype of o (this is an upcast), or a subtype of o (this is a downcast). Upcast # Explicit upcasts are uncommon, but may still be useful in some scenarios, e.g. to disambiguate two method calls.&#xA;Implicit upcasts on the other hand are very frequent, when the type of an object cannot be determined at compile time.</description>
    </item>
    <item>
      <title>Regular languages</title>
      <link>https://unibz-pp-23-24.github.io/docs/background/sections/regular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/background/sections/regular/</guid>
      <description>Regular languages # Definitions # Alphabet # Definition.&#xA;An alphabet is a finite set of characters.&#xA;Examples.&#xA;{a} is a alphabet,&#xA;{a,b} is another alphabet,&#xA;{a, b, 3, 5,\n} is yet another alphabet.&#xA;Warning. A blank space is is a character. The letter $\Sigma$ is often used to refer to an alphabet.&#xA;Word # Definition. A word over an alphabet $\Sigma$ is a (possibly empty) finite sequence of character in $\Sigma$.</description>
    </item>
    <item>
      <title>Requirements for this course</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/requirements/</guid>
      <description>Requirements for this course # For this course, you will need:&#xA;Git Version 2.2 or higher A Java Development Kit (JDK) for Java 17 (e.g. openJDK) Maven Version 3.6 or higher In addition, if you choose the board game as project, you will need:&#xA;Gradle Version 7.2 or higher Again, we recommend using a package manager to install these programs if possible.&#xA;For Windows users. Maven is not available on the winget repository.</description>
    </item>
    <item>
      <title>Serialization</title>
      <link>https://unibz-pp-23-24.github.io/docs/input/sections/serialize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/input/sections/serialize/</guid>
      <description>Serialization # Serializing an object (resp. data structure) means converting it into a form that can be stored or transmitted, and such that the object (resp. data structure) can be later reconstructed (a.k.a. deserialized). in Java # Java provides a native mechanism to serialize an object (including information about the type of the object). The serialization format is not (meant to be) human-readable.&#xA;The process is JVM independent, meaning that an object can be serialized on one platform and deserialized on another.</description>
    </item>
    <item>
      <title>Branches</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/branches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/branches/</guid>
      <description>Branches # Listing branches # The command&#xA;git branch allows you to list all local branches (for the current repository).&#xA;Creating a branch # To create a new branch, run&#xA;git branch &amp;lt;branchName&amp;gt; Then you can switch to this branch with&#xA;git checkout &amp;lt;branchName&amp;gt; Alternatively, you can perform both operations with a single command:&#xA;git checkout -b &amp;lt;branchName&amp;gt; Deleting a branch # You can delete a (local) branch other than the current branch with</description>
    </item>
    <item>
      <title>Classes as objects</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/classesasobjects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/classesasobjects/</guid>
      <description>Classes as objects # Some object-oriented languages (like Java, C# or C++) provide ways to access or manipulate classes (almost) as if they were objects.&#xA;Static attributes and methods # Static attributes # Java (as well as C# and C++) supports attributes that do not depend on a specific object, but on a class instead. These are often called static attributes (or sometimes class attributes or class variables), as opposed to the attributes that we have seen so far, called instance attributes (or member variables).</description>
    </item>
    <item>
      <title>IDE</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/ide/</guid>
      <description>Integrated development environment (IDE) # An IDE is an application that consists of a source code editor with additional functionalities such as a debugger or build automation.&#xA;For this course, you can use any IDE (or enhanced code editor) for Java with at least the following features:&#xA;a debugger navigation to variable/class/interface declaration and usage, variable/class/interface renaming, Maven integration, Gradle integration if you choose the board game as your project.</description>
    </item>
    <item>
      <title>Java errors</title>
      <link>https://unibz-pp-23-24.github.io/docs/errors/sections/errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/errors/sections/errors/</guid>
      <description>Java errors # Aside from exceptions, a Java program can throw a so-called Error.&#xA;According to the Javadoc for the class Error:&#xA;An Error [&amp;hellip;] indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions.&#xA;For instance, some subclasses or Error are OutOfMemoryError and StackOverflowError.</description>
    </item>
    <item>
      <title>Synchronization: remote, push, pull</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/sharing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/sharing/</guid>
      <description>Synchronization: remote, push, pull # List remotes # To list the remote(s) associated to your repository (name and address of each remote), you can run&#xA;git remote -v Upload # If the current branch is already shared with a remote, you can upload it with&#xA;git push Otherwise, you can share this branch (and its commits) with&#xA;git push -u &amp;lt;remoteName&amp;gt; &amp;lt;branchName&amp;gt; To delete a remote branch, run&#xA;git push &amp;lt;remoteName&amp;gt; -d &amp;lt;branchName&amp;gt; Alternatively, you can delete a remote branch using the web interface of your hosting service.</description>
    </item>
    <item>
      <title>Backtracking</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/backtracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/backtracking/</guid>
      <description>Backtracking # We already saw how a file can be unstaged (with git reset) before it is committed.&#xA;If the file was committed by mistake, then there are at least three scenarios.&#xA;Reset # If the commits that contain the file have not been shared yet with a remote, then these commits can be cancelled locally. The command&#xA;git reset &amp;lt;ID&amp;gt; moves the pointer for the current branch &amp;ldquo;back in time&amp;rdquo; to the commit &amp;lt;ID&amp;gt;.</description>
    </item>
    <item>
      <title>Duplicating objects</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/clone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/clone/</guid>
      <description>Duplicating objects # In some scenarios, it may be useful to duplicate an object.&#xA;In Java, as we saw earlier, copying the value of a variable with reference type does not copy the object that it references. For instance, the following program outputs &amp;ldquo;yellow&amp;rdquo;:&#xA;Unicorn unicorn = new Unicorn(&amp;#34;green&amp;#34;); Unicorn shallowCopy = unicorn; unicorn.color = &amp;#34;yellow&amp;#34;; System.out.println(shallowCopy.color); The need to duplicate objects may notably appear in a program that rely on concurrency.</description>
    </item>
    <item>
      <title>JSON Serialization</title>
      <link>https://unibz-pp-23-24.github.io/docs/input/sections/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/input/sections/json/</guid>
      <description>JSON serialization # A number of (external) libraries allow transforming Java objects into JSON objects and conversely. For instance Jackson, Gson, JSON-java, JSON-B and JSON-P.&#xA;In this section, we focus on Jackson.&#xA;Note. Jackson was initially designed for JSON, but extensions of Jackson allow manipulating other formats: XML, TOML, YAML, CSV and Java property files. Install # Jackson can be used within a Maven project, by declaring the following dependency</description>
    </item>
    <item>
      <title>Text editor</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/text_editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/text_editor/</guid>
      <description>Text editor # A text editor allows you to edit plain (i.e. non-formatted) text. A text editor can open any file produced with a text editor (and more), regardless of the file&amp;rsquo;s extension.&#xA;In this sense, Microsoft Word is not a text editor (neither are Apple Pages or LibreOffice Writer).&#xA;Most operating systems comes with one or several text editor(s) pre-installed, such as Notepad++ (Windows), TextEdit (macOS), gedit (default Ubuntu), etc.</description>
    </item>
    <item>
      <title>Evaluation environment</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/eval/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/eval/</guid>
      <description>Evaluation environment # The evaluation environment for your project is a virtual machine (with Ubuntu 20) deployed on Microsoft Azure. You are not supposed to develop on this machine, but your project must run in this environment to be evaluated.&#xA;Each student gets his or her own clone of the original machine. Maven, Gradle, git and a Java 17 JDK are already installed. You will also be granted administrator rights, so that you can install additional software (if any) needed to run your project.</description>
    </item>
    <item>
      <title>Quasi-objects</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/quasi-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/quasi-objects/</guid>
      <description>Quasi-objects # Enumerated types # Most imperative languages allow the creation of so-called enumerated types.&#xA;An enumerated type is a datatype for a finite set or enumerated values. For instance, if our game only allows &amp;ldquo;blue&amp;rdquo;, &amp;ldquo;green&amp;rdquo; and &amp;ldquo;red&amp;rdquo; as unit colors, then we may create a dedicated type that only allows these three values.&#xA;In Java # An enumerated type in Java is a set of constants. These constants are effectively static, meaning that they depends on the class or interface where the enumerated type is declared (similarly to a static attribute).</description>
    </item>
    <item>
      <title>Sorting</title>
      <link>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/sorting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/abstractdatatypes/sections/sorting/</guid>
      <description>Sorting # Sorting a collection (of values or objects) is needed in a variety of scenarios.&#xA;Sorting criterion # In order to sort a collection of values (resp. objects), we need a sorting criterion, i.e. a way to compare two values (resp. objects).&#xA;Some data types come with a natural way to compare two values. For instance, two real numbers can be compared w.r.t. $\le$.&#xA;Observation. Some data type have several natural sorting criteria.</description>
    </item>
    <item>
      <title>Ignoring files</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/ignore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/ignore/</guid>
      <description>Ignoring files # You can add a file named .gitignore to the root folder of your repository.&#xA;It specifies files that cannot be staged.&#xA;This is commonly used to exclude from a repository:&#xA;compiled code (e.g. files with the extension .class in Java), dependencies (e.g. the content of the /node_modules folder in a Node.js project), IDE-generated files (e.g. the .idea/ folder for IntelliJ), OS-generated files (e.g. .DS_Store/ folders for macOS), etc.</description>
    </item>
    <item>
      <title>Terminal</title>
      <link>https://unibz-pp-23-24.github.io/docs/env/sections/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/env/sections/terminal/</guid>
      <description>Terminal # Using a terminal can be necessary during development, in order to execute a program that does not have a graphical user interface (GUI).&#xA;But even when a GUI is available, a Command Line Interface (CLI) can still be the preferred way to interact with some programs. Possible benefits are:&#xA;efficiency (thanks to autocompletion, there is very little to type), automation (via scripting), more transparency (a GUI may add a layer of obfuscation), stability over time (GUIs tend to change from one version of a program to another), reproducibility (the same command performs the same action, with a limited reliance on memory), customizability.</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/encapsulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/encapsulation/</guid>
      <description>Encapsulation # Encapsulation is a (vague) principle in object-oriented programming that refers to &amp;ldquo;bundling&amp;rdquo; data with the code that operates on it, and restrict visibility of this code and data to other components of a system. From Wikipedia: &amp;ldquo;Essentially, encapsulation prevents external code from being concerned [&amp;hellip;]&amp;rdquo;&#xA;Each component hides its internal logic by exposing only data and methods that other components may need.&#xA;Example. As we saw earlier, in our game, the &amp;ldquo;view&amp;rdquo; component (which is in charge of rendering the game on screen) may buffer the game snapshots that it receives from the backend, if these snapshots are received faster than they can be displayed.</description>
    </item>
    <item>
      <title>To go further</title>
      <link>https://unibz-pp-23-24.github.io/docs/git/sections/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/git/sections/resources/</guid>
      <description>To go further # Here is a brief selection of resources about git (among many):&#xA;a (short) video that goes beyond the content of this chapter, the Atlassian git tutorials, the GitHub training material, guidelines about how to write an informative (yet readable) commit message. Misc # Here is a link to git&amp;rsquo;s very first commit.</description>
    </item>
    <item>
      <title>Mutability</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/mutability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/mutability/</guid>
      <description>Mutability # Illustration # Exercise The Java method createUsers below is incorrect.&#xA;Can you see why, and how to fix this?&#xA;public class User { int id; String name; } /* Input: - ids: a nonempty array of user identifiers - names: an array of the same length as &amp;#39;ids&amp;#39; that contains user names Ouput: an array of users of the same lenght as &amp;#39;ids&amp;#39;, such as the i-th user has identifier ids[i] and name names[i] */ User[] createUsers(int[] ids, String[] names){ User[] users = new User[names.</description>
    </item>
    <item>
      <title>Quiz</title>
      <link>https://unibz-pp-23-24.github.io/docs/objects/sections/quiz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/objects/sections/quiz/</guid>
      <description>Quiz # To answer the quiz (and check your answers), click here or scan this code:&#xA;Boxed type # public class City { int population; public City (int population){ this.population = population; } } int myInteger = 1; Integer myBoxedInteger = 1; Integer myBoxedCopy = myInteger; City myCity = new City(5000); myMethod(myInteger, myBoxedInteger, myBoxedCopy, myCity); System.out.println( myInteger + &amp;#34;, &amp;#34;+ myBoxedInteger + &amp;#34;, &amp;#34;+ myBoxedCopy + &amp;#34;,&amp;#34; + myCity.population); void myMethod(int integer, Integer boxedInteger, Integer boxedCopy, City city) { integer += 1; boxedInteger += 1; boxedCopy += 1; city.</description>
    </item>
  </channel>
</rss>
