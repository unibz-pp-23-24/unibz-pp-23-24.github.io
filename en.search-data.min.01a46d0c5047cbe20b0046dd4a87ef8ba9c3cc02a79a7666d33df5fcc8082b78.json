[{"id":0,"href":"/docs/git/sections/basics/","title":"Basics: repository, commits and branches","section":"git","content":" Basics: repository, commits and branches # Repository # A git repository is a folder that stores a project. It is identical to a regular folder, except for a hidden folder named .git. This folder stores (among others) the whole history of the project. Commit # A commit is a snapshot of a repository. Each commit has medatada associated to it. In particular:\nan ID, the name of the commit\u0026rsquo;s author, a timestamp, a message that describes the commit. For instance, Alice may create a fresh git repository, add some files to it, and commit these files. After this step, Alice\u0026rsquo;s repository may be pictured as follows.\nNext, Alice may modify some of these files (and/or add new ones), and commit these changes:\nNotation. In the figures below, for readability, we will omit the commits\u0026rsquo; metadata. So the above repository will be represented as:\nMain branch # By default, Alice\u0026rsquo;s commits belong the main branch of her repository (often called main or master). You can think of a branch as a timeline.\nGit keeps tack of the latest commit on this branch with a so-called \u0026ldquo;pointer\u0026rdquo; (you can think of it as a variable) to that commit: Time travel # Alice can load any previous snapshot of her repository. The history of the repository will not be affected.\nTo achieve this, Git uses another \u0026ldquo;pointer\u0026rdquo; called HEAD, which intuitively keeps track of the current position of Alice in the commit\u0026rsquo;s history. By default, HEAD points to the main pointer: If Alice decides to load her previous snapshot (thanks to the git checkout command), then HEAD will instead point to the corresponding commit: In this case (i.e. when it does not point to a branch pointer, but directly to a commit), the HEAD pointer is said to be in a detached state.\nBranching time # Alice may want to work on an experimental feature of her project. She can develop this feature in an \u0026ldquo;alternative timeline\u0026rdquo;, a.k.a. another branch.\nBefore creating this new branch, Alice most likely wants to travel back to her latest commit. This will move the HEAD pointer back to where it was:\nNow Alice may create a new branch, and name it myFeature. This will create a new branch pointer:\nAlice can also specify that she want to work on this new branch (using the git checkout command still). This will affect the HEAD pointer:\nNext, Alice may implement (part of) her new feature, and commit these changes. This will move the myfeature pointer forward:\nNow Alice may need to fix an urgent bug on her main branch. If she switches to the main branch (again, with git checkout), then HEAD will point to it:\nAlice may fix the bug and commit her changes. This will create a commit and move the main pointer as expected. The two branches now diverge:\nThen Alice may switch back to the myFeature branch to resume her work:\nAnd add a commit to this branch:\nHistory # The history of a branch consists of all commits on a path from the branch\u0026rsquo;s pointer to the original commit. For instance, this is the history of the myFeature branch: And this is the history of main branch: Merging branches # We left Alice\u0026rsquo;s repository in this situation: Alice is now satisfied with her new feature, and she wants to incorporate it into her main branch.\nTo do so, she first switches to the receiving branch (in this case, the main branch): Then she can merge the branch myFeature into the branch main. Because the two branches have diverged, this will generate a new commit, called a merge commit:\nBefore she can create a merge commit, Alice may need to fix potential conflicts between the diverging branches.\nIn this happens, then git will provide Alice a list of files that contain so-called \u0026ldquo;merge conflicts\u0026rdquo;. In each of theses files, each conflict will be identified as follows:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD \u0026lt;Conflicting content from the receiving branch\u0026gt; ======= \u0026lt;Conflicting content from the merged branch\u0026gt; \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; \u0026lt;mergedBranchName\u0026gt; After a merge # Observe that a merge commit (usually) has two parent commits. More generally:\na repository with merge commits is not a tree. in such a repository, the history of a \u0026ldquo;branch\u0026rdquo; may consists of commits from different paths. For instance, here is the history of the main branch: Note that after this merge, all commits of the myFeature branch are part of the history of the branch main.\nAlice may keep the myFeature branch for some future usage, or she may decide to delete it. In the latter case, the myFeature pointer will simply be deleted:\nFast-forward merge # If two branches have not diverged, then there is a simpler way to merge them.\nFor instance, consider Carol\u0026rsquo;s repository:\nThe branches main and experimental have not diverged. So experimental can be merged into main by simply moving the main pointer:\nIn this case, no merge commit is needed. This is called a fast-forward merge.\n"},{"id":1,"href":"/docs/errors/sections/callstack/","title":"Call stack","section":"Errors","content":" Call stack # A call stack is a stack that keeps track of the methods that are active during the execution of a program. By \u0026ldquo;active\u0026rdquo;, we mean that an execution of the method has started and has not terminated yet.\nWhen the execution of a method starts, it is \u0026ldquo;added\u0026rdquo; to the stack. When it terminates, the method is \u0026ldquo;removed\u0026rdquo; from the stack, and control is passed back to the method that called it.\nA debugger provides a representation of the successive states of a call stack, with references to the source code. This gives the illusion of source code being interpreted verbatim.\nExample. In our game, consider the following implementation of the method callReinforcement:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class Backend implements EventHandler { Snapshot currentSnapshot; ... @Override public void callReinforcement() { Player activePlayer = currentSnapshot.getActivePlayer(); int unitsToInsert = currentSnapshot.getSizeOfReinforcement(activePlayer); while (unitsToInsert \u0026gt; 0){ Unit unit = generateRandomUnit(); TileCoordinates coordinates = findInsertionSpot(unit); if(coordinates != null) { addUnit(coordinates, unit); unitsToInsert--; } } } private Unit generateRandomUnit() { ... } private TileCoordinates findInsertionSpot(Unit unit) { ... } private void addUnit(TileCoordinates coordinates, Unit unit) { currentSnapshot.getBoard().addUnit(coordinates.rowIndex(), coordinates.columnIndex(), unit); performUnitMerges(); } private void performUnitMerges() { ... } } When the method callReinforcement is called, it is added (a.k.a. pushed) on top of the call stack. This is rendered by a debugger as:\ncallReinforcement \u0026lt;bottom of the stack\u0026gt; If execution \u0026ldquo;reaches\u0026rdquo; Line 11, then the method generateRandomUnit is called and added to the stack:\ngenerateRandomUnit callReinforcement: 11 \u0026lt;bottom of the stack\u0026gt; When the method generateRandomUnit terminates, it passes control (as well as a Unit) back to the method that called it, namely callReinforcement, which can resume its execution:\ncallReinforcement \u0026lt;bottom of the stack\u0026gt; Similarly, when execution \u0026ldquo;reaches\u0026rdquo; Line 12, findInsertionSpot is added to the stack, executed, and then removed from the stack, passing control back to callReinforcement.\nThen if execution \u0026ldquo;reaches\u0026rdquo; Line 14, addUnit is executed, which in turn calls performUnitMerges:\nperformUnitMerges addUnit: 28 callReinforcement: 14 \u0026lt;bottom of the stack\u0026gt; etc.\nNote. If a method is recursive (i.e. if it calls itself, directly or indirectly), then it may appear multiple times in the call stack. E.g.:\nmethod1 method2: 16 method1: 8 \u0026lt;bottom of the stack\u0026gt; Definition. A stack overflow occurs when the size of the call stack exceeds the capacity allowed by the execution environment. This is generally due to a non-terminating recursive method. "},{"id":2,"href":"/docs/background/sections/problem/","title":"Computational problem","section":"Background","content":" Computational problem # A computational problem is (usually) specified as:\na set of possible inputs, and the expected outputs (for these inputs). Problem vs algorithm # For instance, here is a problem that you may have encountered already:\nInput: a sorted array A of integers, an integer a Output: true if a appears in A, false otherwise There are (infinitely) many algorithms that can solve this problem. But some of them are more efficient than others. Efficiency (a.k.a. computational cost) refers to the time and/or memory needed to execute an algorithm, expressed as a function of the size of the input (more on this later).\nExercise Can you think of (or do you already know) an algorithm that can solve this problem efficiently? Why is it efficient? Solution Algorithm. Let n be the size of A, and let us assume for simplicity that arrays are 1-indexed and that A is nonempty.\nIf n = 1, then check whether A[1] = a. Otherwise: check whether A[n/2] = a (where \u0026ldquo;/\u0026rdquo; is integer division, rounded up or down if n is odd), depending on the result, repeat on either the left or the right half of A. Cost. If A has length n, then the number of iterations of the procedure is (in the order of) log2 _n in the worst case (e.g. if a does not appear in A).\nHere is another problem that you may know:\nInput: an array of integers Output: an array with the same values, but sorted in ascending order And yet another:\nInput: a solvable grid of sudoku Output: the same grid, solved Note. A problem specifies what a program should do, not how to do it. In other words, a computational problem is not an algorithm. For instance, the following is not a computational problem:\nInput: an array of integers. Algorithm: initialize a counter to 1. Then iterate through the array, and: increment the counter each time 2 consecutive numbers are encountered, and reset the counter to 1 otherwise. Exercise Which problem does this algorithm solve? Solution Input: an array A of integers Output: the length of the longest suffix of A that consists of consecutive numbers Formulating a problem # When developing a project, it can be helpful to express some sub(tasks) as computational problems. This is also a common way to document your code.\nFor instance the Javadoc of a class may consist of computational problems (e.g. the Javadoc for the method indexOf of the class String in Java).\nWhen formulating a problem, make sure that:\nthe output is specified for all inputs, and the formulation is non-ambiguous, meaning that it should clearly specify whether any given pair (input, output) is correct. Exercise Consider the class Unit (and its subclasses), as defined in the section about inheritance. The following problem is not properly defined. Can you see why?\nInput: a nonempty array A of instances of the class Unit Output: the unicorn with highest health in A Solution There may be no unicorn in A, or several healthiest unicorns. Exercise The following problem is not properly defined. Can you see why?\nInput: a (finite) family of (finite) sets Output: the smallest set that has a nonempty intersection with each of the input sets (where \u0026ldquo;smallest\u0026rdquo; here refers to the size of a set) For instance, for the input\n{ {a,c,k}, {a,b}, {a,m}, {c,d,f}, {c,e} } the expected output is\n{a,c} Solution Some inputs admit more than one solution (the simplest example is the input {a,b}). Note. A problem may admit several outputs for the same input without being ambiguous. For instance:\nInput. a graph G, two nodes s and t in G, Output: one of the shortest paths from s to t in G if any, and null otherwise. A problem may be undecidable, meaning that for any algorithm attempting to solve this problem, there (provably) exist (infinitely many) inputs for which the algorithm either produces an incorrect output or does not terminate. A problem may be decidable but intractable, meaning that (provably) no efficient algorithm can solve it (where cost is once again measured as a function of the size of the input). "},{"id":3,"href":"/docs/recursion/sections/linear/","title":"Linear recursion","section":"Recursion","content":" Linear recursion # Definition. A recursive method is linear recursive if it performs at most one recursive call each time it is executed. Terminology. The term unary recursion is sometimes used to refer to linear recursive algorithms (as opposed to n-ary recursion). Hint. A linear recursive algorithm is often easy to transform into an iterative one (i.e. an algorithm that uses only loops). Example # Exercise Write in pseudocode a (linear) recursive algorithm for a method int occ(char[] A, char c) that:\ntakes as input a (non-null) array A of characters and a character c, and returns the number of occurrences of c in A. Possible solution int occ(char[] A, char c) { return occRec(A, c, 0) } int occRec(char[] A, char c, int i) { // Base case: the segment under consideration is empty if(i == A.length){ return 0 } // Inductive case. // Count the number of occurrences of c in the \u0026#34;suffix\u0026#34; segment A[i+1 .. A.length-1] int occInSuffix = occRec(A, c, i + 1) return A[i] == c ? // If the current character is c, then return this value + 1, occInSuffix + 1 : // otherwise return this value as it is. occInSuffix } Tail recursion # Motivation # Consider a (not necessarily recursive) method method1 that calls a method method2, for instance:\nmethod1() { ... method2() ... } The execution of method1 is interrupted when it calls method2.\nDuring this interruption, the call stack contains:\nmethod2 method1 \u0026lt;bottom of the stack\u0026gt; Variables that are local to the execution of a method are allocated on the so-called stack memory. In this example, variables that are local to method1 remain in memory during the execution of method2 (because they may be needed when the execution of method1 resumes). However, if no instruction in method1 needs to be executed after the call to method2, then there is no need to maintain this information in memory.\nmethod1() { ... method2() } In other words, the call stack in this case could be safely be reduced to:\nmethod2 \u0026lt;bottom of the stack\u0026gt; This optimization technique is known as tail-call elimination. Some compilers apply it (but most Java compilers do not).\nDuring the execution of a recursive algorithm, the size of the call stack may become important, therefore also the amount of stack memory required. Therefore identifying calls that may be safely be removed from the stack can significantly reduce memory consumption.\nDefinition # A linear recursive method is tail recursive if no instruction in this method can be executed after a recursive call. A tail recursive algorithm can easily be transformed into an iterative one. This transformation can be viewed as a \u0026ldquo;manual\u0026rdquo; form of tail-call elimination.\nExercise The algorithm above for the method int occ(char[] A, char c) is linear recursive, but not tail-recursive.\nRewrite it into a tail-recursive algorithm. Then convert it into an iterative algorithm.\nPossible solution Tail recursive algorithm:\nint occ(char[] A, char c) { return occRec(A, c, 0, 0) } int occRec(char[] A, char c, int i, int occurences) { // Base case: the segment under consideration is empty if(i == A.length){ return 0; } // Inductive case. // If the current character is c, then increment the number of occurrences. if (A[i] == c) { occurrences++; } // Recursive call return occRec(A, c, i + 1, occurrences) } Iterative algorithm:\nint occ(char[] A, char c) { int occurrences = 0 for (int i = 0; i \u0026lt; A.length; i++) { if (A[i] == c) { occurrences++ } } return occurrences } A common strategy to convert a linear recursive method into a tail-recursive one consists in using additional arguments (like the argument occurrences in the above example). These extra arguments are sometimes called accumulators.\nUsage # Linear recursive implementations are not very frequent, because most of them can be easily converted into iterative ones, as illustrated above. Besides, as we explained above, the iterative solution is often more efficient (at least memory-wise) for large inputs.\nHowever, some problems can be easier to solve in a linear recursive form (e.g. as a first attempt). This may also produce code that is easier to read and/or debug.\nIn particular, it may be the case when manipulating linked lists.\nLinked list # Definition. A linked list is a set of objects organized in a sequence, such that each object (except for the last one) points to its successor. Equivalently, a linked list is a unary tree (and conversely), i.e. a tree where each node has exactly one (possibly null) child.\nFor instance:\nTerminology.\nthe first object in a linked list is often called the head of the list, and the rest of the list (i.e. the sublist with the second object as head) is often called the tail of the list. Example # Exercise Consider linked lists that consist of instances of the following class:\nWrite (in pseudocode) a linear recursive algorithm Node removeDuplicates(Node head) that:\ntakes as input the head of a list with nodes sorted according to their label (in alphabetical order), returns the head of a list with the same labels, in alphabetical order, but where each label appears exactly once. For instance, for the following input list:\nthe algorithm should output a list with labels:\nPossible solution Node removeDuplicates(Node head) { // Base case: empty list. if(head == null) { return null } // Inductive case. // Remove all duplicate in the tail. Node tailHead = removeDuplicates(head.next) // Compare the head with the (possibly new) head of the tail. if (tailHead != null \u0026amp;\u0026amp; head.label == tailHead.label) { // If they have the same label, then return the tail. return tailHead } // Otherwise add the head to the returned list. head.next = tailHead return head } "},{"id":4,"href":"/docs/abstractdatatypes/sections/list/","title":"List","section":"Abstract data types","content":" List # The abstract data type list simulates a tuple. Accordingly, a list may contain duplicates.\nA list may expose the following methods:\nisEmpty is self-explanatory, append adds an element at the end of the list, prepend adds an element at the beginning of the list, tail returns the sub-list identical to the current one, but without its first element, etc. Note. The size of a list is often unbounded (as opposed to the size of an array for instance). This can be implemented in different ways, for instance with a dynamic array or a linked list. in Java # Java has an interface List with 8 native implementations (i.e. 8 different classes that implement this interface). The most commonly used are ArrayList and LinkedList.\nThe interface List extends the interface Collection.\nSyntax # Here are code snippets for a few operations specified in the interface List.\nCreate a List and populate it: City milan = new City(\u0026#34;milan\u0026#34;, 20100); City florence = new City(\u0026#34;Florence\u0026#34;, 50100); // Creates an empty list of cities List\u0026lt;City\u0026gt; myList = new ArrayList(); // Appends Milan to the list myList.add(milan); // Appends Florence to the list myList.add(florence); // Appends Milan again to the list myList.add(milan); // Creates a list identical to the previous one, but which cannot be modified List\u0026lt;City\u0026gt; myOtherList = List.of(milan, florence, milan); City[] myArray = new City[]{milan, florence,}; // Creates a fixed-lenght \u0026#34;wrapper\u0026#34; list around the array. // No data is duplicated. List\u0026lt;City\u0026gt; yetAnotherList = Arrays.asList(myArray); Retrieve the size of a list: // Outputs 3 System.out.println(myList.size()); Retrieve the element at index i (the first index being 0, like in an array): // Contains (a reference to) Florence City secondCity = myList.get(1); Insert an element at index i (shift the position of all subsequent elements by 1). City trento = new City(\u0026#34;Trento\u0026#34;, 38100); myList.add(1, trento); // Now contains (a reference to) Trento secondCity = myList.get(1); // contains (a reference to) Florence City thirdCity = myList.get(2); Remove the element a index i (shift the position of all subsequent elements by -1), and return it myList.remove(1); // Outputs 3 Sysetm.out.println(myList.size()); // Now contains (a reference to) Florence secondCity = myList.get(1); Remove the first occurrence of an object in the list (shift the position of all subsequent elements by -1): myList.remove(milan); // contains (a reference to) Florence City firstCity = myList.get(0); For more operations, consult the Javadoc of the interface List.\n"},{"id":5,"href":"/docs/objects/sections/objects/","title":"Objects","section":"Objects and classes","content":" Objects # An object is a way to group data in a meaningful way.\nA simple example: JSON objects # Here is a JSON object (in Javascript syntax) that describes the city of Florence:\n{ name: \u0026#34;Florence\u0026#34;, zipcode: 50100 } A JSON object may contain other objects, as well as arrays (of values, objects or arrays). For instance:\n{ name: \u0026#34;Alice\u0026#34;, age: 26, birthPlace: { name: \u0026#34;Florence\u0026#34;, zipcode: 50100 }, jobs: [ { employer: \u0026#34;Kolping\u0026#34;, start: 2021, end: 2022 }, { employer : \u0026#34;Eurac\u0026#34;, start: 2023 } ] } In JSON:\nan element can be either: a scalar (e.g. an integer), or an array of elements, or an object, an object is a finite set of key-value pairs, where keys are distinct, and each value is an element. Equivalently, a JSON object can be viewed as a function (with finite domain) that maps keys to JSON elements.\nObjects and programming languages # JSON objects do not exactly correspond to the objects that can be created in Java (and many other programming languages). We highlight here two important differences.\nTypes # Exercise Find a JSON object that satisfies the above description but cannot be represented as an object in a (strongly) typed language such as Java, C/C++, C#, etc. Possible solution { key: [1, \u0026#34;a\u0026#34;]; } In a typed language (like Java), the elements of an array must be of the same type. This is not required in Javascript, Python, etc.\nReferences # A Java (or Python, C#, etc.) object does not contain objects or arrays, but references to objects or arrays. For instance, the equivalent in Java of the above object may be pictured as follows (abusing notation):\n_1: { name: _2, age: 26, birthPlace: _3, jobs: _4, } _2: [\u0026#39;A\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;e\u0026#39;] _3: { name: _5, zipcode: 50100 } _4: [ _6, _7 ] _5: [\u0026#39;F\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;r\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;n\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;e\u0026#39;] _6: { employer: _8, start: 2021, end: 2022 } _7: { employer: _9, start: 2023 } _8: [\u0026#39;K\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;p\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;n\u0026#39;,\u0026#39;g\u0026#39;] _9: [\u0026#39;E\u0026#39;,\u0026#39;u\u0026#39;,\u0026#39;r\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;c\u0026#39;] Each object or array has an ID (e.g. _1 in this example), which can be used to refer to it (you can think of this ID as an address in memory).\nAs a consequence, some objects can be created in Java that have no finite representation in JSON. Exercise Find one of these objects. Possible solution _1: { name: _2, friends: _3 } _2: [\u0026#39;A\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;e\u0026#39;] _3: [ _4, _7 ] _4: { name: _5, friends: _6 } _5: [\u0026#39;B\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;b\u0026#39;] _6: [ _1, _8 ] If we try to represent this object in JSON, we get (assuming that we start with Alice):\n{ name: \u0026#34;Alice\u0026#34;, friends: [ { name: \u0026#34;Bob\u0026#34;, friends: [ { name: \u0026#34;Alice\u0026#34;, friends: [ ... ]}]}]} Cyclic references (like in this exercise) naturally occur in object-oriented code. Identifying them may be essential to debug a program that does not terminate or runs out of memory (stack overflow, \u0026hellip;).\n"},{"id":6,"href":"/docs/project/sections/free_project/","title":"Option 1: free project","section":"Project","content":" Option 1: free project # The first option available to you for your project consists in developing a Java application of your choice.\nThis application is only a prototype, so it does not need a comprehensive list of features or functionalities.\nThe evaluation of your project will be mostly based on its backend (rather than the frontend). This means that your application:\ndoes not necessarily need a graphical user interface (but you may choose to develop one), should perform non-trivial backend task(s) (e.g. writing and/or reading to/from files is not sufficient). Guidelines # Motivation # A good projects is driven by an idea.\nFeel free to design your application so that it matches your own interests. For instance:\nrelate it to a hobby (music, cinema, fashion, sport, games, social media, astronomy, etc.), use the project as an opportunity to explore a topic that you are curious about (natural language processing, computer vision, recommender systems, robotics, etc.), develop a functionality that one of your favorite applications is missing. Do not hesitate to be ambitious at first. You can restrict the scope of your project (to certain features or components) later on.\nSpecification # A frequent source of failure for this course is students focusing on tools (e.g. following tutorials) without having a precise objective. The short deadline (June 2024) does not give you this flexibility. Besides, without a precise objective, the amount of libraries that are available to you (especially in Java) can be overwhelming.\nSo we recommend you to clarify what your application should do, before thinking about how you could implement it. In other words, specify which problem(s) (i.e. input and expected output) your program and/or components should solve. Then only think about algorithms, libraries, tools and/or tutorials that can help you solve these problems.\nIn order to determine whether your specification is precise enough, you may check whether it leaves some doubt as to whether an output is correct or not.\nUser interface # Developing a Graphical User Interface (GUI) requires familiarity with a graphical framework. Learning the details of such a framework (terminology, syntax, setup, etc.) can be an important time investment, and this knowledge may not transfer to other graphical frameworks. In other words, developing a GUI may not require lot of thinking, but a lot of reading (and web browsing).\nBeware also that GUIs technologies are still rapidly evolving, and that recent innovation has largely been driven by web development. So learning a graphical framework for Java may not be a strategic investment of your time (compared to learning a Javascript framework like React or Angular). Note that even desktop and mobile applications are increasingly relying on web technologies for their GUIs (thanks to frameworks like Electron or React Native).\nThis is why we recommend you to think carefully before committing to a Java GUI, and to keep it minimal if you do. Note also that we will not evaluate your project based on aesthetic criteria.\nSo in order to design your interface, you may follow the following guidelines:\nAsk yourself whether your application really needs a GUI. A command-line interface (CLI) may be sufficient, because: your program takes files as input and produces files as output, or your program is (primarily) meant to be used by other programs (rather than human beings), or your program is meant to be used by other developers, or external programs with GUIs (such as IDEs) can easily call your application, or you leave the GUI for future work (again, your application is just a prototype), etc. If you really need a GUI, then: decouple frontend and backend (whenever possible), so that the backend could be used with another frontend, and conversely.\nExample. Many applications accessible via GUI have a natural decoupling of frontend and backend. For instance, consider an application that allows booking hotel rooms. The backend takes as input some data (e.g. number or guests, duration, etc.), and outputs data as well (available rooms, prices, etc.). These input and output are independent of the aspect or structure of the GUI (windows, menus, buttons, fields, etc.). Example. Even for some games, frontend and backend can easily be decoupled. Consider for instance a program that plays chess against a human opponent. The backend:\nkeeps track of the current state of the board, takes as input either a move from the white player, or a request to play as the black player, outputs the next state of the board. These input and output do not depend on a specific GUI (they can for instance be encoded using algebraic notation). So the backend can be implemented without any reference to graphical elements or controller inputs (mouse clicks, etc.).\ndevelop the backend first (and write unit tests for it),\ndevelop the frontend afterwards (if you have time for it).\nIf you really need a GUI, then try to keep it minimal. In particular, restrict the input to what is essential for your application. The more freedom the user is given, the more likely he/she is to input a sequence of actions that your program cannot handle. Examples # Here are some examples of (past and imaginary) possible projects:\na program that detects texts generated by a large language model, a program that takes as input a dataset of Tweets and identifies communities and/or influencers based on the network formed by re-tweets, a program that retrieves news articles about an input topic (using web APIs), and analyses their polarity (via sentiment analysis) together with their provenance (news outlet, country, etc.), a (toy) recommender system, a program that generates (solvable) sudoku grids with different sizes and/or level of difficulty, a game to help people improve their typing speed, a web crawler that retrieves sport-related statistics from various websites and exposes them via a web API, a classroom reservation system for the Unibz that can computes a default schedule for a whole semester, satisfying a set of constraints (room capacity, etc.) and/or preferences (minimize days of presence per week of a same group, etc.), a flashcard app that incorporates answers produced by a chatbot, an (Obsidian-like) note management application, a program to organize and manage coding contests (similar to this one), a password manager (with encryption), for instance similar to pass, where password update and synchronization are performed via git, a program that analyzes the commit and/or branching history of a git repository (e.g. contributions of the different users, frequency of commits, percentage of preserved code, etc.). "},{"id":7,"href":"/docs/build/sections/packaging/","title":"Packaging a Java application","section":"Build automation","content":" Packaging a Java application # Java (like C# or Python) is a precompiled language, meaning that source code is compiled into a machine-independent representation called bytecode. Bytecode can be distributed and executed on any machine.\nIn Java, by convention, a source file MyClass.java is compiled into a bytecode file MyClass.class.\nA Java Virtual Machine (JVM) is a program in charge of executing Java bytecode. A packaged Java program is usually a zip file that contains:\nbytecode, metadata, and possibly:\ndependencies, other resources (data, images, etc.). Jar file # A jar (for Java ARchive) file is a zip file with extension .jar. This is the most common packaging format for Java applications. A jar can be:\na thin jar (i.e. excluding dependencies) or a fat (a.k.a. über) jar (i.e. including dependencies), runnable or non-runnable. A jar contains a text file META-INF/MANIFEST.MF that provides metadata about the package, as a set of key: value pairs (one per line). Among others, it may contain:\nthe name, version and author(s) of the program, the entry point of the program (i.e. the class that contains the main method), paths to additional .class files that are part of the program, etc. Details can be found here.\nNote. A jar for an application (including the META-INF/MANIFEST.MF file) is usually created via a build automation tool (like Maven or Gradle).\nBut if you are curious, you can also build a (toy) jar via command line. A good illustration can be found on the website of last year\u0026rsquo;s course.\nNote. Unit tests (and test-related resources) are usually not included in the release of a program. Therefore in Java, these are generally absent from a jar. "},{"id":8,"href":"/docs/input/sections/files/","title":"Paths and files in Java","section":"I/O and serialization","content":" Paths and files in Java # Java\u0026rsquo;s initial package for input/output (I/O) is called java.io. A central class in this package is File.\nOver the years, programmers realized that this package had limitations: limited error handling, limited support for file metadata (owner, access rights, etc.), and some performance issues.\nWith Java 7 (2011), A new I/O package called NIO2 was released, with additional features (and in some cases a more concise syntax). A central interface (resp. class) in this package is Path (resp. Files).\nHowever, the package java.io is still part of the latest Java release (it has not been deprecated), in part for backward compatibility reasons.\nIn this chapter, we will focus whenever possible on NIO2\u0026rsquo;s classes and methods, rather than java.io. In particular, we will use the Path when possible rather than File.\nNote also that some external libraries (notably Apache commons.io and Guava) provide additional methods for I/O, sometimes with a more concise syntax.\nWarning. Many native Java methods that involve path or file manipulation may throw a checked exception (generally an IOException). For instance, among the methods below, this is the case of:\nPath.toRealPath, Files.size, Files.walk, etc. As a reminder, when such a method is used, checked exceptions must be either caught or explicitly rethrown, otherwise the program will not compile.\nPaths # An instance of Path represents a path in the hierarchical file system.\nAn instance of Path can be created in multiple ways. For instance:\nPath myPath = Path.of(\u0026#34;path/to/file.txt\u0026#34;); Path samePath = Path.of(\u0026#34;path\u0026#34;, \u0026#34;to\u0026#34;, \u0026#34;file.txt\u0026#34;); // Extend a path Path folder = Path.of(\u0026#34;path/to\u0026#34;); // identical to myPath Path myPathAgain = folder.resolve(\u0026#34;file.txt\u0026#34;); Path names # Note. If the string path/to/file.txt is used to create a Java Path (or a Java File), then the / symbol is interpreted (at runtime) as the path separator of the operating system (OS) that executes the program. So you can safely use this syntax, regardless of your OS. Precisely:\nif the program is executed on macOS, Linux, Android, etc., then this string will be interpreted as is, if the program is executed on Windows, then this string will be interpreted as path\\to\\file.txt. Warning. If the string path\\to\\file.txt is used to create a Java Path, then this string will be interpreted as is. So the program may run on Windows, but fail on other systems. Warning. Paths are case sensitive on Linux, Android, etc., but case insensitive on Windows and macOS. For maximal compatibility, make sure that path names in your code respect the case of your file and directory names. Warning. Do not use absolute paths in your code (e.g. /home/Alice/workspace/javaProject/myFile.txt, or C:\\Users\\Alice\\workspace\\javaProject\\myFile.txt). Your program may run on your own computer, but will fail on others. Working directory # Warning. When a Java program is executed, relative paths are understood as paths from the current working directory (WD). If you need to know the WD, you can use the following (among other possibilities):\nPaths.get(\u0026#34;\u0026#34;).toAbsolutePath(); This instruction returns an absolute Path to the WD.\nFor instance,\nSystem.out.println(Paths.get(\u0026#34;\u0026#34;).toAbsolutePath()); may output on Windows:\nC:\\Users\\Alice\\workspace\\javaProject or on macOS:\n/Users/Alice/workspace/javaProject or on Linux:\n/home/Alice/workspace/javaProject The Path interface # Here are examples of outputs for some methods of the Path interface (assuming that the WD is /home/Alice/workspace/javaProject):\nPath path = Path.of(\u0026#34;src/main/../main/resources/myFile.txt\u0026#34;); // Outputs \u0026#39;/home/Alice/workspace/javaProject/src/main/../main/resources/myFile.txt\u0026#39; System.out.println(path.toAbsolutePath()); // Outputs \u0026#39;/home/Alice/workspace/javaProject/src/main/resources/myFile.txt\u0026#39; System.out.println(path.toRealPath()); // Outputs \u0026#39;myFile.txt\u0026#39; System.out.println(path.getFileName()); // Outputs \u0026#39;false\u0026#39; System.out.println(path.isAbsolute()); Hint. The method String.endsWith can be used to check whether a file has a certain extension. E.g.\n// Outputs \u0026#39;true\u0026#39; path.toString().endsWith(\u0026#34;.txt\u0026#34;); Existence and metadata # Static methods of the class Files can be used to check whether a file or directory exists, and retrieve metadata about it:\nPath path = Path.of(\u0026#34;src/main/resources/myFile.txt\u0026#34;); System.out.println(\u0026#34;Exists = \u0026#34; + Files.exists(path)); System.out.println(\u0026#34;Is directory = \u0026#34; + Files.isDirectory(path)); System.out.println(\u0026#34;Is file = \u0026#34; + Files.isRegularFile(path)); System.out.println(\u0026#34;Is hidden = \u0026#34; + Files.isHidden(path)); System.out.println(\u0026#34;Size = \u0026#34; + Files.size(path) + \u0026#34; bytes\u0026#34;); System.out.println(\u0026#34;Last modified = \u0026#34; + Files.getLastModifiedTime(path)); Navigation # Path path = Path.of(\u0026#34;src/main/resources/myFile.txt\u0026#34;); // Get the parent directory \u0026#39;src/main/resources\u0026#39; Path dir = path.getParent(); // Contains all files and folders in \u0026#39;src/main/resources\u0026#39; List\u0026lt;Path\u0026gt; children = Files.list(dir).toList(); // Contains all files and folders that have \u0026#39;src/main/resources\u0026#39; // as ancestor, including \u0026#39;src/main/resources\u0026#39; itself. List\u0026lt;Path\u0026gt; descendents = Files.walk(dir).toList(); Manipulation # // Create a directory Path folder = Path.of(\u0026#34;myFolder\u0026#34;); Files.createDirectory(folder); // Create nested directories Path subfolder = Path.of(\u0026#34;myFolder/sub1/sub2\u0026#34;); Files.createDirectories(subfolder); // Create a file Path file = Path.of(\u0026#34;myFolder/hello.txt\u0026#34;); Files.createFile(file); // Move/rename a file Path destination = Path.of(\u0026#34;myFolder/sub1/bye.txt\u0026#34;); Files.move(file, destination); // Copy a file Path copy = Path.of(\u0026#34;myFolder/sub1/sub2/bybye.txt\u0026#34;); Files.copy(renamedFile, copy); // Delete a file. Files.delete(copy); // Delete a directory. // The directory must be empty. Files.delete(subfolder); "},{"id":9,"href":"/docs/regex/sections/pattern/","title":"Pattern matching","section":"Regular expressions","content":" Pattern matching # Two of the main uses of regexes are:\nstring validation, i.e. check whether a string satisfies certain constraints. For instance: has at least one digit and one special character, is a valid address, etc. string search, i.e. identify occurrences of a pattern in a line or in a file. This can be useful for: replacing strings in a file or a folder (e.g. within a codebase), splitting a sentence into (natural language) words, splitting a program into meaningful substrings, e.g. split the instruction int a=5; into int, a, =, 5 and ;, filtering (e.g. with the grep command) of modifying (e.g. with the sed command) lines in a file, etc. In both scenarios, a regex is viewed as a pattern that should be matched against a string.\nSegment # To make the notion of pattern matching more precise, we will represent a word $w$ as an array of characters, and a segment of $w$ as a (possibly empty) subarray of this array.\nNotation. If $w$ is a word, we use $w[i .. j)$ for the subsegment of $w$ that starts at index $i$ included, and ends at index $j$ excluded. Example. Let $w$ = abca. Then:\n$w[0 .. 1)$ is a segment of $w$ with length 1 and word a, $w[3 .. 4)$ is another segment of $w$ with length 1 and word a $w[0 .. 3)$ is a segment of $w$ with length 3 and word abc $w[0 .. 0)$ is a segment of $w$ with length 0 and word $\\varepsilon$ $w[1 .. 1)$ is another segment of $w$ with length 0 and word $\\varepsilon$ Match # We can now define what a match is:\nDefinition. Let $w$ be a word (viewed as an array), and let $e$ be a regex that describes the language $L$.\nA match for $e$ in $w$ is a (possibly empty) segment of $w$ whose word belongs to $L$.\nExample. Let $e$ be the regex ab*, and let $w$ be the word aba.\nThere are 3 matches for $e$ in $w$:\n$w[0 .. 1)$ with word a, $w[0 .. 2)$ with word ab, $w[2 .. 3)$ with word a Warning. Several matches may carry the same word (e.g. the first and third matches in the example above). Warning. Some matches may overlap (e.g. the first and second matches in the example above). Exercise Consider the regex $e$ = a* and the word $w$ = aa.\nHow many matches are there for $e$ in $w$?\nSolution There are 6 matches for the regex a* in the word aa:\n$w[0 .. 0)$: $\\varepsilon$ $w[0 .. 1)$: a $w[0 .. 2)$: aa $w[1 .. 1)$: $\\varepsilon$ $w[1 .. 2)$: a $w[2 .. 2)$: $\\varepsilon$ Best first match # In practice, (most) regex engines do not identify all matches for a regex in a word. Instead, they rely on the notion of best first match (explained below). Reasons include:\nperformance, avoiding overlapping matches (e.g. when performing a global \u0026ldquo;search and replace\u0026rdquo;). Let $e$ be a regex, let $w$ be a word, and let $m_1$ and $m_2$ be two matches for $e$ in $w$.\n$m_1$ is preferred to $m_2$ if:\n$m_1$ starts before $m_2$: for instance $w[1 .. 4)$ is preferred to $w[3 .. 8)$, or they start at the same index and the regex engine favors $m_1$ over $m_2$. Preference is a total order over the matches for for $e$ in $w$, meaning that if there is a match, then there can be at most one best first match.\nNote. When $m_1$ and $m_2$ start at the same index (second case above), whether $m_1$ is favored over $m_2$ can vary in subtle ways from one regex engine to the other. These preferences are usually explained in algorithmic terms (and half-informally).\nFor a reasonably detailed tutorial about the behavior(s) of regex search engine, we refer to this website. For Java, the Oracle tutorial on regexes can also be a good entry point (although less precise that the previous reference).\nIn this section, we only introduce basic behaviors of regex engines.\nLeft-to-right # Commutative operations are evaluated from left-to-right.\nExample. Consider the word $w$ = ab.\nthe best first match for the regex ab|a in $w$ is $w[0 .. 2) (with word ab) the best first match for the regex a|ab in $w$ is $w[0 .. 1) (with word a) Exception. In this example, A POSIX-compliant regex engine would produce $w[0 .. 2) (with word ab) as best first match for both expressions. Warning. As illustrated with the above example, two regexes that describe the same language may have different best first matches (in the same word). Greedyness # The * operator is evaluated (by default) in a greedy way. This means that the engine tries to matches as many characters as possible for this operator. More precisely, when encountering a subexpression of the form $e$*:\nthe engine first considers the longest possible match for $e$*, if this match does not result in a match for the whole expression, then the engine backtracks by one character (i.e. reduces the length of the match for $e$* by one), and tries again to find a match for the whole expression, if this fails again, then the engine backtracks again by one character, etc. Examples.\nThe best first match for the regex a* in aa is the whole word. The best first match for the regex a* in aab is $[0 ..2)$ (with word aa). The best first match for the regex a* in aabaa is $[0 ..2)$ (with word aa). The best first match for the regex (a|b)*b in abab is the whole word. In this case, the engine first tries to match (a|b)* against the whole word, this does not result in a match for the whole regex, because the trailing b in the regex is not matched, so the engine backtracks, and matches (a|b)* against $[0 .. 3)$ (with word aba), this results in a match for the whole expression. Warning. The interaction of left-to-right evaluation and greedy matching can be hard to predict. This is why we highly recommend writing and debugging regexes with a validation engine, such as regex101. Warning. Nested * operators can be costly, due to a combinatorial explosion of the number of attempts to find a match. This is sometimes referred to as catastrophic backtracking. Successive best first matches # Most regex engines can return best first matches in an iterative way. Intuitively, the engine \u0026ldquo;consumes\u0026rdquo; the best first match. Then the next match is the best first match in the remaining string, etc.\nMore precisely: Definition. Let $e$ be regex and let $w$ be a word with lenght $n$.\nThen:\nthe first match $w[i_1 .. j_1)$ for $e$ in $w$ is the best first match (if any) for $e$ in $w$, the second match $w[i_2 .. j_2)$ for $e$ in $w$ is the best first match (if any) for $e$ in $w[j_1 .. n)$, the third match $w[i_3 .. j_3)$ for $e$ in $w$ is the best first match (if any) for $e$ in $w[j_2 .. n)$, etc. Example. Let $e$ be the regex ab*, and let $w$ be the word abac.\nThe best first match for $e$ in $w$ is $w[0 ..2)$, with word ab.\nThe second match is the best first match in the rest of $w$, i.e. in $w[2 .. 4)$. This match is $w[2 .. 3)$, with word a.\nThere is no third match.\nExercise In each of the cases below, find all successive best first matches for the regex $e$ in word $w$:\nregex $e$ word $w$ a aba a*b aba a* a a* aba (ab)* aba (ab)* abab Solution regex $e$ word $w$ matches a aba $[0 .. 1)$:a, $[2 .. 3)$:a a*b aba $[0 .. 2)$:ab a* a $[0 .. 1)$:a, $[1 .. 1)$: $\\varepsilon$ a* aba $[0 .. 1)$:a, $[1 .. 1)$: $\\varepsilon$, $[2 .. 3)$:a, $[3 .. 3)$: $\\varepsilon$ (ab)* aba $[0 .. 1)$:ab, $[2 .. 2)$: $\\varepsilon$, $[3 .. 3)$: $\\varepsilon$ (ab)* abab $[0 .. 3)$:abab, $[3 .. 3)$: $\\varepsilon$ Lazy closure # Some regex engines (notably the ones used by default in Java, Javascript, Python, etc.) support alternative ways to evaluate * operators.\nOne of them is lazy evaluation (also called reluctant). In this case, the star operator matches the shortest possible segment.\nExamples.\nregex $e$ word $w$ best first match with lazy evaluation of star operators a* aa $[0 .. 0)$:$\\varepsilon$ a*ac ac $[0 .. 2)$:ac a*ac aac $[0 .. 3)$:aac Note. In a same regular expression, it is possible to specify that some * operators must be evaluated in a lazy way, and others in a greedy way. Exercise In each of the cases below, find all successive best first matches for the regex $e$ in word $w$, where * operators are evaluated in a lazy way.\nregex $e$ word $w$ ab* ab a*b aba a*ab* ab a* a a* aa b* aa Solution regex $e$ word $w$ lazy matches ab* ab $[0 .. 1)$:a a*b aba $[0 .. 2)$:ab a*ab* ab $[0 .. 1)$:a a* a $[0 .. 0)$:$\\varepsilon$, $[1 .. 1)$:$\\varepsilon$ a* aa $[0 .. 0)$:$\\varepsilon$, $[1 .. 1)$:$\\varepsilon$, $[2 .. 2)$:$\\varepsilon$ b* aa $[0 .. 0)$:$\\varepsilon$, $[1 .. 1)$:$\\varepsilon$, $[2 .. 2)$:$\\varepsilon$ Warning. Lazy * operators can be hard to predict. "},{"id":10,"href":"/docs/stream/sections/pipeline/","title":"Pipeline","section":"Streams in Java","content":" Pipeline # Stream computations are specified as a pipeline, which consists of:\na source (e.g. a collection or an I/O channel), a sequence of zero or more intermediate operations, each of which transforms a stream into another stream (e.g. filtering or modifying the stream\u0026rsquo;s elements), at most one terminal operation (e.g. collecting the elements of the transformed stream). Intermediate operations are generally specified via callback methods (some terminal operations may as well). More precisely, the Java interface Stream provides instance methods (like filter or map) that take a callback method as argument, and transform the stream accordingly.\nExample # Consider the following classes Unit, Butterfly, Caterpillar and Unicorn.\nThe pipeline below:\ncreates a stream out of a list of units, retains only butterflies, extracts the color of each butterfly, collects these colors as a set. List\u0026lt;Unit\u0026gt; units = getUnits(); Set\u0026lt;String\u0026gt; butterflyColors = units.stream() // create a stream .filter(u -\u0026gt; u instanceof Butterfly) // retain butterflies .map(b -\u0026gt; b.color) // map each butterfly to its color .collect(Collectors.toSet()); // collect the colors as a set Explanation # This pipeline can be decomposed as follows:\nSource # The instance method Collection.stream generates a stream out of a collection (e.g. out of a List or a Set):\nunits.stream() In this example, because units has type List\u0026lt;Unit\u0026gt;, the stream that is returned by units.stream() has type Stream\u0026lt;Unit\u0026gt;.\nIntermediate operations # Filter # .filter(u -\u0026gt; u instanceof Butterfly) The instance method Stream.filter retains certain elements of the stream.\nLet us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt; (for instance, in our example, $\\mathit{T}$ is Unit).\nThe method filter takes as argument a callback function of type\n$\\qquad \\mathit{T} \\to$ Boolean\n(equivalently, in Java\u0026rsquo;s terminology, the callback function must implement the native functional interface Predicate\u0026lt;$\\mathit{T}$\u0026gt;).\nIn this example, the callback function is\nu -\u0026gt; u instanceof Butterfly which has type\n$\\qquad$ Unit $\\to$ Boolean\nThe method filter returns a Stream\u0026lt;$\\mathit{T}$\u0026gt; (e.g. in this example a Stream\u0026lt;Unit\u0026gt;) that consists of the elements for which the callback method evaluates to true (in this case, it retains only butterflies).\nMap # .map(b -\u0026gt; b.color) The instance method Stream.map applies a function to each element of the stream.\nLet us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt; (for instance, in our example, $\\mathit{T}$ is Unit).\nThe method map takes as argument a callback function of type\n$\\qquad T \\to T'$\nwhere $T\u0026rsquo;$ can be any type (equivalently, in Java\u0026rsquo;s terminology, the callback function must implement the native functional interface Function\u0026lt;$T$,$T\u0026rsquo;$\u0026gt;, seen earlier).\nIn this example, the callback function is\nb -\u0026gt; b.color which has type\n$\\qquad$ Unit $\\to$ String\nLet us call this function $f$.\nThe method map returns a Stream\u0026lt;$\\mathit{T\u0026rsquo;}$\u0026gt; (e.g. in this example a Stream\u0026lt;String\u0026gt;) that consists of all objects $f(a)$ such that $a$ belongs to the input stream.\nTerminal operation # .collect(Collectors.toSet()); The instance method Stream.collect takes as argument a so-called Collector, which is in charge of collecting the elements of its input stream into a Collection (e.g. List or Set), or a Map, or a String, etc.\nIn this example, we call the static method Collectors.toSet, which returns a collector that produces a set. Because the stream has type Stream\u0026lt;String\u0026gt;, the instruction .collect(Collectors.toSet()) returns a set with type Set\u0026lt;String\u0026gt;.\nReading a pipeline # Exercise What do the following methods compute?\nSet\u0026lt;Unit\u0026gt; method1(Set\u0026lt;Unit\u0026gt; set1, Set\u0026lt;Unit\u0026gt; set2) { return set1.stream() .filter(u -\u0026gt; set2.contains(u)) .collect(Collectors.toSet()); } Set\u0026lt;Unit\u0026gt; method2(Set\u0026lt;Unit\u0026gt; set1, Set\u0026lt;Unit\u0026gt; set2) { return set1.stream() .filter(set2::contains) .collect(Collectors.toSet()); } Solution Both methods compute the intersection of set1 and set2. Exercise What do the methods method1 to method4 below compute?\nStream\u0026lt;Unit\u0026gt; method1(List\u0026lt;Unit\u0026gt; units) { return units.stream() .filter(u -\u0026gt; u.health \u0026gt; 0); } List\u0026lt;Unit\u0026gt; method2(Stream\u0026lt;Unit\u0026gt; stream) { return stream.map(u -\u0026gt; transform(u)) .toList(); // this is syntactic sugar for .collect(Collectors.toList()) } Unit transform(Unit u) { if (u instanceof Caterpillar) { return new Butterfly(u.color, u.health); } return u; } List\u0026lt;Unit\u0026gt; method3(List\u0026lt;Unit\u0026gt; units) { return method2(method1(units)); } List\u0026lt;Unit\u0026gt; method4(List\u0026lt;Unit\u0026gt; units) { return units.stream() .filter(u -\u0026gt; u.health \u0026gt; 0) .map(u -\u0026gt; u instanceof Caterpillar ? new Butterfly(u.color, u.health) : u ) .toList(); } Solution method1: Input: A list of units. Output: a stream that contains the same units, but discarding units with no health. method2: Input: A stream of units. Output: A list that contains the same units, but where caterpillars become butterflies. method3: Input: A list of units. Output: A list that contains the same units, but discarding units with no health, and transforming caterpillars into butterflies. method4 is equivalent to method3. "},{"id":11,"href":"/docs/lambda/sections/pure/","title":"Pure function","section":"Callback methods and lamda expressions","content":" Pure function # Side effects # Definition. A method has side effects if it modifies resources (variable, object, array, etc.) that are accessible outside of its scope. Definition # A pure function is a method that intuitively behaves like a mathematical function. More precisely:\nDefinition. A pure function is a method that:\nreturns a value, returns the same value if called twice with the same arguments, and has no side-effect. Example # Exercise The Java method createUsers below violates each of the three properties that define a pure function.\nCan you see why?\nHow would you rewrite it into a pure function?\nint[] ids = parseIds(); String[] names = parseNames(); User[] users = new User[ids.length]; createUsers(ids, names, users); void createUsers(int[] ids, String[] names, User[] users) { for(int i = 0; i \u0026lt; ids.length; i++){ users[i] = new User(ids[i], names[i]); } } Possible solution int[] ids = parseIds(); String[] names = parseNames(); User[] users = createUsers(ids, names); User[] createUsers(int[] ids, String[] names) { User[] users = new User[ids.length]; for(int i = 0; i \u0026lt; ids.length; i++){ users[i] = new User(ids[i], names[i]); } return users; } Benefits # Easier debugging # Because it has no side effect, a pure function may cause of a bug only if it returns an incorrect value. Because it only depend on its arguments, the behavior of a pure function is easier to predict. Readability # The behavior of a pure function can be fully documented by describing its signature (arguments and return value).\nEasier parallelization # Consider two pure functions $f$ and $g$. If the input of $f$ (resp. $g$) does not depend on the output of $g$ (resp. $f$), then they can be executed in any order (therefore also in parallel).\nExample. If $f$ and $g$ are pure functions, the two programs below (written in pseudocode) are equivalent: x = f(a) y = g(b) result = x + y y = g(b) x = f(a) result = x + y "},{"id":12,"href":"/docs/intro/sections/schedule/","title":"Schedule","section":"This course","content":" Schedule # The course consists of 60 hours of lectures and 30 hours of labs.\nLectures # By default, lectures are scheduled:\nTuesday 10:00 - 12:00 Wednesday 08:00 - 10:00 Thursday 10:00 - 12:00 All students attend the same lectures.\nOne lecture (to be determined) will be dedicated to a visit to Raiffeisen Information Service in Bolzano.\nLabs # By default, labs are scheduled:\nTuesday 16:00 - 18:00 Friday 14:00 - 16:00 Students are split in two groups (to be determined) for the labs, with identical content. Students who collaborate on the same group project are expected to attend the same lab.\nMost labs will be dedicated to the assignments for this course. Two or three labs will be dedicated to a presentation and discussion of the advancement of the different group projects.\nTimetable # Some weeks will see fewer lectures/labs, and schedules or room numbers may vary from one week to the other. So make sure to check the timetable regularly.\n"},{"id":13,"href":"/docs/interfaces/sections/specification/","title":"Specification and programming interface","section":"Interfaces","content":" Specification and programming interface # Specification # The specification of a method usually consists of:\nthe computational problem that the method solves (if any), and (if needed,) a description of the format of the input and expected output, and (if applicable,) a description of the behavior of the program for invalid inputs (e.g. errors thrown by the method), and (if useful,) information about the implementation (e.g. if this may have an impact on performance for certain inputs). Example.\nboolean isSolvable(int[][] grid) Input: a 9 x 9 array of integers with numbers between 0 and 9 Output: true is this array represents a sudoku grid with a unique solution (where 0 stands for the absence of value) Errors: if the array\u0026rsquo;s size is not 9 x 9 if the array contains a number smaller that 0 or greater than 9 If a method has no return type or is not a pure function, then the specification may indicate the effect the method on its environment.\nThe specification of a command (for a program with a command line interface) is similar, but may include additional information about the syntax of the command (options, arguments, etc.)\nProgramming interface # In its simplest form, a programming interface is a set of method/command specifications. "},{"id":14,"href":"/docs/intro/","title":"This course","section":"Docs","content":" Structure and organization of the course # This chapter explains how the course is structured and briefly summarizes its content.\n"},{"id":15,"href":"/docs/lambda/sections/anonymous/","title":"Anonymous method","section":"Callback methods and lamda expressions","content":" Anonymous method # An anonymous method is a method without a name. Illustration # The two following Java methods only differ by their name:\nint square(int x){ return x * x; } int toThePowerOfTwo(int x){ return x * x; } So in a sense, these two methods are the same method.\nAn anonymous method simply abstracts away from the name of the method. For instance, in Java, the two methods above could be described with the following lambda expression:\n(int x) -\u0026gt; { return x * x; } Or (with a more concise syntax):\nx -\u0026gt; x * x "},{"id":16,"href":"/docs/git/sections/collaboration/","title":"Basics: network and collaboration","section":"git","content":" Basics: network and collaboration # Network # In the previous section, Alice created and manipulated a git repository (with two branches).\nShe may also want to backup her work. To this end, she can upload some of her branches to a remote machine (often called \u0026ldquo;a remote\u0026rdquo;). For instance use a cloud hosting service for git repositories (such as GitHub, Gitlab, Bitbucket, etc.).\nWhenever Alice wants to upload the content of a branch, she can push this branch to the remote.\nAlice may also want to work from another computer (or a virtual machine). She can achieve this by cloning the repository from the remote to this second machine.\nWarning. By default, cloning a repository will only clone the main branch. But other branches (or all branches) can also be cloned explicitly. Note. When two machines share a git branch, each of them has a copy of the full history of the branch. Note. A branch can be shared with several remote servers (e.g. one for releases and one for development or continuous integration). For these two reasons, git is sometimes called a \u0026ldquo;distributed\u0026rdquo; versioning system.\nCollaboration # Enters Bob\u0026hellip;\nBob may want to collaborate with Alice on her project. He can clone Alice\u0026rsquo;s repository, and add his own commits.\nIn order to synchronize their work, Alice and Bob may agree to share the content of one or several branches (for instance the main branch).\nWarning. For a smooth collaboration, code on a shared branch is expected to:\ncompile and pass all unit tests defined for the project. A basic workflow # Alice and Bob share the main branch of their repository, and this branch is called main. This generally means that there are (at least) 3 copies of this branch: one on Alice\u0026rsquo;s machine, one on Bob\u0026rsquo;s machine, and one on the remote.\nHowever Alice and Bob, do not work directly on this branch. Instead, each of them works on his/her own development branch (e.g. called alice and bob respectively).\nBackup # Alice regularly pushes the content of the branch alice to the remote, for backup purposes only. And so does Bob for the branch bob.\nHowever, Alice does not need a local copy of bob, and Bob does not need a local copy of alice.\nSharing # Bob has been working on a new feature, on the branch bob. His code compiles and passes all unit tests. He now feels ready to share this code with Alice (via the branch main).\nHowever, Alice may have added commits to the main branch since Bob last looked at it.\nIn order to share his work, Bob:\nswitches to (his local copy of) main (with the git checkout command), then updates his local copy of main (with the git pull command), then merges main into bob (this may require fixing merge conflicts), then merges bob into main, then pushes main to the remote. And Alice follows the same procedure to share her code (using alice instead of bob).\nTo go further # There is a vast literature (and diverging opinions) on collaborative git workflows. This is beyond the scope of this course.\nNote that many of these workflows incorporate so-called \u0026ldquo;pull requests\u0026rdquo;, which are a mechanism for to notify team members of your team that you have completed a feature. Pull requests are not a functionality of git itself, but of (some) git hosting services. To learn more about pull requests, you may consult the corresponding GitHub or Atlassian guides.\n"},{"id":17,"href":"/docs/objects/sections/classes/","title":"Class and instance","section":"Objects and classes","content":" Class and instance # A class can be viewed as a blueprint for a set of similar objects.\nFor instance, consider the two objects:\n{ name: \u0026#34;Florence\u0026#34;, zipCode: 50100, region: \u0026#34;Tuscany\u0026#34; } { name: \u0026#34;Rome\u0026#34;, zipCode: 00100, region: \u0026#34;Lazio\u0026#34; } Each of these objects describes a city, and they share the same keys (name, zipCode and region). A possible class for these two objects may enforce this structure, and it could be named City. An object that follows this blueprint is called an instance of this class.\nDeclaration # In a typed language (like Java), a class must specifies not only the \u0026ldquo;keys\u0026rdquo; of its instances, but also their types. For instance, the class City could be declared as follows in Java:\npublic class City { String name; int zipCode; String region; ... } In Java, a class is often declared in a dedicated file. This file must have the same name as the class (e.g. City.java in this example). The three variables (name, zipCode and region) are called attributes (or sometimes member variables).\nConstructor # A class also needs a special method called a constructor. The constructor is in charge of creating a (fresh) instance of the class. In Java (as in Python, C#, etc.), the constructor does not return the instance itself, but a reference (sometimes called \u0026ldquo;pointer\u0026rdquo;) to this instance.\nNote. A class may have several constructors (with different signatures). Writing a constructor in Java # The constructor of a Java class must have the same name as the class. For instance:\npublic class City { String name; int zipCode; String region; public City(String n, int z, String r){ name = n; zipCode = z; region = r; } ... } Note. In this example, the variable names n, z and r are not very explicit. However, using name, zipCode and region would be ambiguous (because these names are already used for the attributes of the class). In Java, we can use the prefix this. to refer to attribute names, thus eliminating the ambiguity.\nFor instance:\npublic class City { String name; int zipCode; String region; public City(String name, int zipCode, String region){ this.name = name; this.zipCode = zipcode; this.region = region; } ... } Calling a constructor in Java # A Java constructor is called with the keyword new. For instance:\nCity myCity = new City(\u0026#34;Florence\u0026#34;, 50100, \u0026#34;Tuscany\u0026#34;); City yourCity = new City(\u0026#34;Rome\u0026#34;, 00100, \u0026#34;Lazio\u0026#34;); Note. The object that is created in memory contains extra information, in particular a reference to its class. This allows type checking, casts, etc. (more on this later). Accessing an object in Java # The attributes of an object can be accessed like regular variables, using ., followed by the name of the attribute. For instance,\nCity thatCity = new City(\u0026#34;Siena\u0026#34;, 53100, \u0026#34;Lazio\u0026#34;); System.out.println(\u0026#34;Wrong region: \u0026#34; + thatCity.region); thatCity.region = \u0026#34;Tuscany\u0026#34;; System.out.println(\u0026#34;Better now: \u0026#34; + thatCity.region); will output\nWrong region: Lazio Better now: Tuscany Reference type vs primitive type # Recall that a Java constructor returns a reference to the object that it creates. So in the example above, the value of each variable (myCity and yourCity) is a reference, not the object itself.\nThis also holds for:\nvariables of type String, variable with an array type (like int[] myArray). The types of these variables (e.g. City, String or int[]) are called reference types.\nSyntax. In Java, types that start with a capital letter (like City or Array\u0026lt;Integer\u0026gt;) are usually reference types. Types that are not references types (like int or char) are called primitive types.\nThe value of a reference cannot be output (printed, displayed, etc.) by a program. But this value can be modified or compared to another.\nExercise What is the output of the following program?\nCity aCity = new City(\u0026#34;Matera\u0026#34;, 75100, \u0026#34;Basilicata\u0026#34;); City theSameCity = new City(\u0026#34;Matera\u0026#34;, 75100, \u0026#34;Basilicata\u0026#34;); System.out.println(aCity == theSameCity); System.out.println(aCity.zipCode == theSameCity.zipCode); System.out.println(aCity.name == theSameCity.name); Solution false true false Exercise What is the output of the following program?\nCity anotherCity = new City(\u0026#34;Bologna\u0026#34;, 40100, \u0026#34;Emilia-Romagna\u0026#34;); City yetAnotherCity = new City(\u0026#34;Mantua\u0026#34;, 46100, \u0026#34;Emilia-Romagna\u0026#34;); yetAnotherCity.name = anotherCity.name; System.out.println(yetAnotherCity.name); anotherCity = yetAnotherCity; System.out.println(anotherCity.zipCode); System.out.println(anotherCity == yetAnotherCity); Solution Exercise 2.\n\u0026#34;Bologna\u0026#34; 46100 true Passing by value or by reference # Programming languages differ in the way arguments are passed to methods. Two common strategies are:\npassing by value: the method receives as input a copy of each argument, passing by reference: the method receives as input a reference to each argument. Consider for instance the following program (in pseudocode):\nint myInteger = 0 myMethod(myInteger) print(myInteger) void myMethod(int argument){ argument += 1 } If the argument is passed by value, then the program will print 0. If the argument is passed by reference, then the program will print 1. Java passes by value # In Java (and many other programming languages, like C, Python, Javascript, etc.), arguments are passed by value. So the above program translated in Java will print 0.\nWarning. Consider a method with a reference type argument. Because Java passes by value, this method will receive a copy of this argument. But this is a copy of the reference, not a copy of the object itself. Exercise What does the following Java program print?\nint myInteger = 0; City myFirstCity = new City(\u0026#34;Florence\u0026#34;, 50100, \u0026#34;Tuscany\u0026#34;); City mySecondCity = new City(\u0026#34;Mantua\u0026#34;, 46100, \u0026#34;Emilia-Romagna\u0026#34;); myMethod(myInteger, myFirstCity, mySecondCity); System.out.println(myInteger); System.out.println(myFirstCity.zipCode); System.out.println(mySecondCity.zipCode); public void myMethod(int integer, City firstCity, City secondCity){ integer += 1; System.out.println(integer); firstCity.zipCode = 20590; System.out.println(firstCity.zipCode); secondCity = new City(\u0026#34;Rome\u0026#34;, 00100, \u0026#34;Lazio\u0026#34;); System.out.println(secondCity.zipCode); } Solution 1 20590 00100 0 20590 46100 "},{"id":18,"href":"/docs/unittests/sections/structured/","title":"Code units","section":"Unit tests","content":" Code units # A unit test is meant to test to a small unit of code. This is only possible if the program contains small units of code.\nTherefore unit testing is closely related to decomposing complex problems into smaller ones (and creating methods that solve these smaller problems).\nBenefits # Possible benefits of decomposing complex methods into smaller ones are:\nreadability, easier debugging, opportunities to factorize code (the same small methods can be called in several places), easier collaboration (two person modifying the same method in parallel is less likely if the method is small), Some good indicators that auxiliary methods may be helpful are:\nmultiple levels of nested blocks (\u0026ldquo;curly braces\u0026rdquo; in Java), a loop that contains a important amount of code. Exercise Simplify (and factorize) the following pseudocode using auxiliary methods:\nif(\u0026lt;condition1\u0026gt;){ while(\u0026lt;condition2\u0026gt;){ if(\u0026lt;condition3\u0026gt;){ \u0026lt;block1\u0026gt; } else { \u0026lt;block2\u0026gt; } \u0026lt;block3\u0026gt; } \u0026lt;block4\u0026gt; } else { if(\u0026lt;condition3\u0026gt;){ \u0026lt;block1\u0026gt; } else { \u0026lt;block2\u0026gt; } \u0026lt;block5\u0026gt; } \u0026lt;block6\u0026gt; Possible solution method1() \u0026lt;block6\u0026gt; method1(){ if(\u0026lt;condition1\u0026gt;){ method2() \u0026lt;block4\u0026gt; } else { method3() \u0026lt;block5\u0026gt; } } method2(){ while(\u0026lt;condition2\u0026gt;){ method3() \u0026lt;block3\u0026gt; } } method3(){ if(\u0026lt;condition3\u0026gt;){ \u0026lt;block1\u0026gt; } else { \u0026lt;block2\u0026gt; } } "},{"id":19,"href":"/docs/unittests/sections/tdd/","title":"Development driven by unit tests","section":"Unit tests","content":" Development driven by unit tests # Test-driven development (TDD) consists in converting a program\u0026rsquo;s requirements into test cases, before the program is fully developed. Note that this approach is not restricted to unit tests.\nIn practice # For a non-trivial method:\nCreate a method stub (e.g. return null is the method\u0026rsquo;s return type is a reference type). Specify the expected behavior (input and expected output) of the method. Write one or several test(s) for this method, illustrating the specification. Implement the method until the test(s) is (are) successful. Hint. Your IDE can generate method stubs. Note. This implementation may be temporary. For instance, it may be refactored later on (moving code where it logically belongs, factorizing duplicate code, etc.). However, the tests that were written before refactoring are (usually) still relevant afterwards, because they correspond to functional requirements. Benefits # Some benefits of TDD are:\nStarting from an example often helps clarifying what a method should do. TDD provides intermediate objectives (milestones) to a developer. The sooner a bug is identified (during the development process), the easier it is to fix. The program is likely to be more robust, because development was guided by requirements (rather than technologies or algorithmic considerations). Each unit test created during TDD provides an alternative entry point (\u0026ldquo;green arrow\u0026rdquo; in an IDE) into the codebase (in addition to the \u0026ldquo;main\u0026rdquo; method). This allows experimenting with a specific feature in isolation, ignoring aspects that are not relevant for this feature (e.g. GUI, network, data storage, etc.). Example # In our game, let us consider once again the method EventHandler.deleteUnit, which modifies the current board when a unit deletion instruction is received.\nProblem decomposition # First, let us decompose this method into simpler ones. For instance as follows:\npublic class Backend implements EventHandler { private Snapshot currentSnapshot; ... void deleteUnit(int rowindex, int columnIndex) { // reduce by 1 the number of remaining actions for the active player decrementNumberOfRemainingActions(); // delete the unit (leaving a blank tile) currentSnapshot.getBoard().removeUnit(rowIndex, columnIndex); // shift up or down the units that followed it (if any) shiftUnitsInColumn(columnIndex); // perform resulting unit merges (if any) performUnitMerges(); // if there is no more action for the active player, then end the turn if (currentSnapshot.getNumberOfRemainingActions() == 0){ endTurn(); } } ... } At first sight, the auxiliary method decrementNumerOfRemainingActions seems trivial, so it may not benefit from unit tests. The method shiftUnitsInColumn seems relatively simple as well. However, the two remaining ones (performUnitMerges and endTurn) seem more complex. So it could be helpful to decompose them and/or devise unit tests for them.\nLet us focus on endTurn. It may for instance be decomposed as follows:\nvoid endTurn() { // perform attacks for units whose counter is 1 // (on the active player\u0026#39;s side) performAttacks(); // change the active player swapActivePlayer(); } And performAttacks may in turn be decomposed as follows:\nvoid performAttacks() { int maxColumnIndex = currentSnapshot.getBoard().getMaxColumnIndex(); // for each column for (int columnIndex = 0; columnIndex \u0026lt;= maxColumnIndex; columnIndex++){ performAttacks(columnIndex); } } void performAttack(int columnIndex) { // for each combined unit in this column (for the active player), // starting from front units for (Unit unit: getCombinedUnits(columnIndex)){ int countdown = unit.getAttackCountdown(); // if the unit is ready to attack if(countdown \u0026gt; 1) { unit.setAttackCountdown(countdown - 1); } else { attack(columnIndex); } } } Unit test # The auxiliary method attack seems non-trivial, so it may be a good candidate for unit testing.\nOne possible (\u0026ldquo;happy path\u0026rdquo;) test could be:\nInput (for column 1):\nExpected output:\n"},{"id":20,"href":"/docs/errors/sections/exceptions/","title":"Exceptions","section":"Errors","content":" Exceptions # Programming languages may significantly differ in the way they support errors messages.\nJava relies on a mechanism called exceptions. Several other languages use exceptions, for instance C++, C#, PHP, Python or Ruby. However, the purpose of exceptions may vary from one language to another.\nAn exception is an object or data structure that stores information about an exceptional condition encountered during the execution of a program. in Java # In Java, an exception is an object, instance of the native class Exception.\nAll exception types (e.g. IOException) are subclasses of Exception.\nBy convention, a class name for an exception:\nends with the word Exception, and provides information about the cause of the exception. Stack trace # By default, when an exception is thrown, the program interrupts its execution, and the current call stack is sent to an output stream called System.error. This output is called the stack trace (because it allows tracing back the method calls that led to the exception being thrown).\nFor instance, consider the following class:\n1 2 3 4 5 6 public class MyClass{ void myMethod(){ Integer.parseInt(\u0026#34;clearlyNotANumber\u0026#34;); } } When myMethod is executed, the following stack trace is printed to System.error:\njava.lang.NumberFormatException: For input string: \u0026#34;clearlyNotANumber\u0026#34; at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67) at java.base/java.lang.Integer.parseInt(Integer.java:668) at java.base/java.lang.Integer.parseInt(Integer.java:786) at Myclass.myMethod(Myclass.java:4) \u0026lt;bottom of the stack trace\u0026gt; The explanation is the following:\nmyMethod (Line 4) calls Integer.parseInt(String string), Integer.parseInt(String string) calls Integer.parseInt(String string, int radix) with the same string as argument, and a value of 10 for the radix (meaning that the string should represent an integer in base 10). Integer.parseInt(String string, int radix) throws an exception, because the string \u0026ldquo;clearlyNotANumber\u0026rdquo; does not represent a (base 10) number. Hint. Your IDE allows you to navigate through Java\u0026rsquo;s source code to trace the cause of an exception. Hint. To debug your code, by default:\nfind the last method (from bottom to top) in the stack trace that was written by you (in this example Myclass.myMethod), using our IDE, create a breakpoint at the indicated line for this class (4 in this example), run your program in debug mode (e.g. clicking on the \u0026ldquo;bug\u0026rdquo; icon of your IDE). Throwing an exception # An exception can be thrown with the keyword throw, as follows:\nboolean isSolvable(int[][] sudokuGrid){ if(sudokuGrid.length != 9){ throw new IllegalArgumentException(\u0026#34;A sudoku grid should have 9 rows\u0026#34;); } if(sudokuGrid[0].length != 9){ throw new IllegalArgumentException(\u0026#34;A sudoku grid should have 9 columns\u0026#34;); } ... } Classes for native Java exceptions usually have several constructors, one of which takes a string as input. For instance, in the example above, we used the constructor IllegalArgumentException(String errorMessage).\nCatching an exception # When a runtime exception is thrown by a method, the method immediately below it in the stack trace can either rethrow the exception, or catch it. If some method in the call stack catches the exception, then the program is not interrupted. Instead, control is passed to the catching method.\nIn other words, when an exception is thrown, the JVM \u0026ldquo;pops\u0026rdquo; method calls from the call stack, until either:\na catching method is found, or the call stack is empty (in which case the program is interrupted). For instance, let us modify myMethod above so that:\nit takes as input a string (maybe supplied at run time), if this string can be converted to an integer, then it returns this integer, otherwise it returns 0. This can be achieved by catching the exception thrown by Integer.parseInt. Syntactically, this is done with a try/catch block, as follows:\nint myMethod(String inputString){ try{ return Integer.parseInt(inputString); } catch (NumberFormatException e) { return 0; } } In this example:\nthe code inside the try block is always executed, the code inside the catch block is only executed if a NumberFormatException is thrown during the execution of the try block, the program is not interrupted. Chaining # The catch clause may itself throw an exception.\nThis is a very common pattern. In particular, it can be used to add information about the context in which an error occurred. In such a case, a common practice consists in chaining these two exceptions.\nMost native Java classes for exceptions have a dedicated constructor for this purpose: it takes as input a string (for the error message), and the exception that was caught. For instance, we can modify our example in such a way that if the input string cannot be converted to an integer, then the program gets interrupted, but with a less generic error message:\n1 2 3 4 5 6 7 8 9 10 public class MyClass{ int myMethod(String inputString){ try{ return Integer.parseInt(inputString); } catch (NumberFormatException e) { throw new IllegalArgumentException(\u0026#34;Please provide a valid number\u0026#34;, e); } } } Note in this example the second argument e of the constructor for IllegalArgumentException.\nIf the method is called as follows,\nmyMethod(\u0026#34;notANumberEither\u0026#34;); then the program will be interrupted, with the following stack trace:\nJava.lang.IllegalArgumentException: Please provide a valid number at MyClass.myMethod(MyClass.java:6) \u0026lt;bottom of the stack trace\u0026gt; Caused by: java.lang.NumberFormatException: For input string: \u0026#34;notANumberEither\u0026#34; at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67) at java.base/java.lang.Integer.parseInt(Integer.java:668) at java.base/java.lang.Integer.parseInt(Integer.java:786) at MyClass.myMethod(MyClass.java:4) "},{"id":21,"href":"/docs/env/sections/files/","title":"Hierarchical file system","section":"Development environment","content":" Hierarchical file system # Tree # Most operating system expose files as a tree (or possibly several trees for Windows).\nDefinition. A (nonempty) tree is either:\na single node (called a leaf), or a node with one or several children that are trees. In this tree, non-leaf nodes are directories, and the leaves can be files, executables, links, empty directories, etc. For instance:\n├── bin │ ├── echo │ └── ... ├── home │ ├── alice │ │ ├── .bashrc │ │ ├── .m2 │ │ │ └── ... │ │ ├── Desktop │ │ │ └── ... │ │ ├── music │ │ │ └── thatSong.mp3 │ │ └── workspace │ │ └── pp │ │ ├── assignments │ │ │ └── ... │ │ └── project │ │ ├── .git │ │ │ └── ... │ │ ├── src │ │ │ └── HelloWorld.java │ │ └── test │ │ └── testHelloWorld.java │ └── bob │ ├── .bashrc │ ├── Desktop │ │ └── ... │ └── music │ ├── thatSong.mp3 │ └── anotherSong.mp3 └── ... Terminology. In this course, we will use the terms \u0026ldquo;folder\u0026rdquo; and \u0026ldquo;directory\u0026rdquo; interchangeably. Terminology. \u0026ldquo;File\u0026rdquo; is sometimes used (e.g. in the Linux documentation) as a generic term for all nodes in this tree (in combination with \u0026ldquo;directory file\u0026rdquo;, \u0026ldquo;executable file\u0026rdquo;, \u0026ldquo;regular file\u0026rdquo;, etc.) We will not follow this terminology. Windows may expose several trees (e.g. one per physical device).\nPath # Definition. In such a tree, a path from a directory s to an arbitrary node t is either:\n. if s and t are the same node, or .. if t is the parent of s, or the name of t if s is the parent of t, or a path from s to some node i, followed by / (or \\on Windows), followed by a path from i to t. For instance (on macOS, Linux, etc.), in the tree above:\nhome/alice/workspace/pp/project/src/HelloWorld.java is a path from the root to the file HelloWorld.java, workspace/pp/project/src/HelloWorld.java is a path from the directory alice to the file HelloWorld.java, ../../bob/Desktop is a path from Alice\u0026rsquo;s Desktop to Bob\u0026rsquo;s Desktop, ../../bob/../bob/./Desktop is another path from Alice\u0026rsquo;s Desktop to Bob\u0026rsquo;s Desktop. Exercise How many paths are there from a directory to an arbitrary node? Solution (Countably) infinitely many. Warning. Some operating system (Windows, macOS) use case-insensitive paths, whereas others (Linux, Android) use case-sensitive paths (this may also vary depending on physical storage devices).\nFor instance, on Windows, src/HelloWorld.java and src/helloworld.java are the same path.\nIn order to make sure that your code is portable:\nalways use case-sensitive paths in your code (i.e. respect the names of your files, folders, executables, etc.), do not create two files (or subfolders, executables, etc.) in the same folder with identical names modulo upper/lower case (e.g. Readme.md and README.md). Convention. In what follows (unless explicitly stated), we will adopt by default the conventions for path names adopted on Linux. In particular, we will use / as a separator, and case-sensitive file and folder names. Absolute path # Definition. An absolute path is a path prefixed with:\n/ on macOS, Linux, Android, IOs, etc. a capital letter followed by :\\ on Windows, where the letter identifies a physical device, disk partition, etc. In particular, the identifier of the main partition is often the letter C, in which case absolute paths (within this partition) are prefixed with C:\\. An absolute path is always a path from the root of the tree.\nFor instance (on macOS, Linux, etc.), /home/alice/workspace/pp/project/src/HelloWorld.java is an absolute path to the file HelloWorld.java\nA few simple observations:\ntwo different files may share the same name (but cannot share an absolute path), and two files with the same name may or may not be identical. E.g. in the above example, the two files named thatSong.mp3 may or may not be identical. Relative path # Definition. A relative path is a path that is not absolute. For instance (on macOS, Linux, etc.), ../../bob/Desktop is a path to to Bob\u0026rsquo;s Desktop relative to Alice\u0026rsquo;s Desktop.\nNote that if p is a relative path, then p prefixed with ./ (or .\\ on Windows) is a path equivalent to p. This prefix is sometimes used to emphasize that a path is relative (among other purposes).\nWorking directory # Each process (e.g. a process that executes a Java program) has a working directory, which is a directory of the hierarchical file system. This directory may vary depending on the program and/or how it was started.\nMany programs (implicitly) interpret a relative path as relative to their working directory, regardless of whether the path is prefixed with ./ (or .\\ on Windows).\nIn particular, this is the case of:\nJava programs, file browsers, shells. Home directory # Each user of a system has its own home directory. E.g. in this example:\n/home/alice/ for Alice /home/bob/ for Bob Warning. The home directory is usually not the root of the tree (even if there is a single user on the machine). Absolute paths to the home directory # The home directory (of a regular user) is normally:\n/home/\u0026lt;userId\u0026gt; on Linux/BSD, /Users/\u0026lt;userId\u0026gt; on macOS, /User/\u0026lt;userId\u0026gt; on iOS, /data/media/⟨userId⟩ on Android, \u0026lt;mainHardDriveId\u0026gt;:\\Users\\\u0026lt;userId\u0026gt; on Windows (e.g. C:\\Users\\\u0026lt;userId\u0026gt;). On Linux and macOS, the alias ~ can be used as an absolute path to the current user\u0026rsquo;s home directory. For instance, in the above example, if Alice is logged in, then ~/music/thatSong.mp3 and /home/alice/music/thatSong.mp3 are two absolute paths to the same file.\nAccess restriction # Files and programs within the home directory of a user can usually be accessed by this user (or a system admin). Therefore programs that can be executed by all users are usually located in other directories (e.g. the program /bin/echo in the example above). Access restrictions (read, write and/or execute) may apply to the content of such directories. Notably, on Linux systems, (most of) the content of these directories can only be modified by a system admin.\nHidden files and directories # The home directory often contains files (resp. directories) whose names are preceded with a . (e.g. the file /home/alice/.bashrc in the above example). These are sometimes called \u0026ldquo;dot files\u0026rdquo; (resp. \u0026ldquo;dot folders\u0026rdquo;). On Linux and macOS, dot files and dot folder are hidden by default in a terminal or a file browser. On Windows, a (dot or not) file or folder can also be hidden, via a dedicated \u0026ldquo;hidden\u0026rdquo; attribute.\nHidden files and directories may be used to store (user-specific) parameters or options for a program. For instance, the configuration file ~/.gitconfig can be used to declare parameters (e.g. user identifier, etc.) or options (e.g. disable default fast-forward merge, etc.) to be used with git.\nHint. Configuration files are a convenient way to save your personal preferences and use them on several machines. For instance, you may need to logging to a remote server via ssh to perform some tasks (e.g. deploy a database or run costly computations). In such a scenario, you can upload dot files to your home directory on this server. Hidden files or directories may serve other purposes. For instance, the dot folder ~/.m2 is used by Maven to store (in one place) the Java libraries that are required (as dependencies) by any Java project present in the home directory.\nHidden files or directories may also contain information specific to a subdirectory. For instance, every git repository (a.k.a. \u0026ldquo;project\u0026rdquo;) contains a dot folder .git that stores the full history of modification made to the repository.\nUsage and layout # Your home directory is where you generally want to store your projects, documents, scripts, etc.\nYou are free to structure it as you like (using sub-directories). Make sure that this structure allows you to retrieve your own work easily.\nWarning. When you download or create a project/document in your home directory, choose its location. Do not:\nlet an application decide this location for you, rely exclusively on the \u0026ldquo;recently opened\u0026rdquo; feature of an app to locate your files, store files and project directly at the root of your home directory. Warning. Aside from a few exceptional cases, your home directory should not contain multiple copies of a project or document. Hint. It can be difficult for a new developer to figure out when to accept the default directory or layout suggested by a program, and when to overwrite it. As a (soft) rule of thumb, you generally want to choose the location of:\na file downloaded from your browser (or mail client), a project created with your IDE, a cloned git repository, a file created with an app, etc. Conversely, it is generally recommended to follow suggestions in the following cases:\ninternal structure of a project (typically the one generated by an IDE): e.g. the standard directory layout for a Maven project, or the standard directory structure of a Node JS project. software installed outside of your home directory, location of dot files and folders, etc. "},{"id":22,"href":"/docs/regex/sections/practice/","title":"in practice","section":"Regular expressions","content":" Regexes in practice # Concrete regexes deviate from theoretical ones in several ways. In particular:\nConcrete syntaxes include a wide range of syntactic sugar, i.e. operators that could in theory be expressed in terms of |, * and concatenation.\nMany regex engines support expressions with features (such as backreferences) that go beyond the expressivity of theoretical regexes. Technically, such expressions do not qualify as as regexes (they may describe a language that is not regular). However, in practice, they are still referred to as \u0026ldquo;regexes\u0026rdquo;. This is also what we will do in this section.\nFlavours # Multiple syntaxes for regexes coexist, which have a lot in common. Among these:\nRegexes defined by the IEEE POSIX standards are supported by a variety of command-line utilities, scripting languages or database engines.\nThe regex engine of the programming language Perl has been very influential. A widely used variant is the PCRE (Perl Compatible Regular Expressions) library, written in C (and natively used by PHP and R). Besides, many programming languages (Java, Javascript, Python, C#, etc.) have adopted a regex syntax and engine inspired by Perl\u0026rsquo;s.\nA detailed comparison of some the main flavours of regexes can be found here.\nWarning. The patterns used in .gitigore files are not regular expressions. Java regexes # Java regexes are very similar to PCRE regexes (albeit less expressive).\nWe list below some of the main constructs of Java regexes, and refer to the Javadoc for an exhaustive list. Most of these are identical in other regex languages inspired by Perl\u0026rsquo;s.\nCharacters # A character in a Java regex can alternatively be written using its Unicode hexadecimal identifier, preceded with \\u.\nExamples.\nthe character A can be written either in its normal form, or \\u0041 the carriage return character can be written either \\r or \\u000D Special characters (like | or *) need to be escaped to be treated as standard ones (except in some specific contexts, see below).\nExamples. In order to be treated as a standard character:\n* can be either escaped (\\*) or written \\u002A \\ can be either escaped (\\\\) or written \\u005C Syntactic sugar # We have seen in previous sections that in theory, regular expressions only admit three operators:\nconcatenation ($e_1e_2$), union ($e_1$|$e_2$) and closure ($e$*). However, this is impractical for most implication.\nExample. In order to match a character that is not a digit, with these three operators only, one would need to write an expression that enumerates all other characters in the underlying alphabet, e.g.:\n$\\qquad\\qquad$ a | b | c | .. | A | B | C | .. | \u0026amp; | ! | \u0026gt; | ..\nFor the simple ASCII alphabet, this is already more than a hundred characters. For the Unicode alphabet, this is more than 100 000.\nIn practice, regexes include additional operators, most of which are syntactic sugar (i.e. could in theory be expressed with only concatenation, union, and closure).\nCharacter class # Square brackets ([ and ]) are used to denote a set of characters, called a character class. Examples.\n[abcd] is equivalent to a|b|c|d\ngr[ae]y is equivalent to gr(a|e)y\nA character class can also be defined with ranges of characters. If $c_1$ and $c_2$ are two characters, then $c_1$-$c_2$ (within square brackets still) denotes any character between $c_1$ and $c_2$ in the Unicode alphabet. Examples.\n[A-Z] matches any character between A and Z [A-Za-z0-9] matches any character between (A and Z) or between (a and z) or between (0 and 9) [A-Za-z@] matches @ or any character between (A and Z) or between (a and z) The complement (in the Unicode alphabet) of a character class is described by adding a ^ after the opening square bracket [. Examples.\n[^a] matches any character different from a [^abc] matches any character that is neither a, b or c [^0-9] matches any character that is not a digit [^A-Za-z0-9] matches any character that is not an ASCII letter or digit Most special characters (like * or |) can be used unescaped inside square brackets to refer to a character (some exceptions to this rule are -, ^ or \\).\nExamples.\n[|*] matches either a | or a * [^|] matches any character that is not | The special character . stands for any (Unicode) character Examples.\n.. matches any string of two characters .* matches any Unicode string Exercise List all matches returned by a regex engine for:\nthe regex gr[ae]y in the words grey and gray are homonyms the regex [A-Z][^;]*; in Alice:12;Bob,35; the regex \u0026lt;.*\u0026gt; in \u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt; Solution $[10 .. 14)$: grey, $[19 .. 23)$: gray $[0 .. 8)$: Alice:12;, $[19 .. 23)$: Bob:35; $[0 .. 35)$: \u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt; Exercise Use the regex validation tool regex101 to write a regex whose evaluation matches HTML tags. For instance, in the word\n$\\qquad\\qquad$\u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt;\nthe regex should match \u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt; and \u0026lt;/span\u0026gt;.\nPossible solution \u0026lt;[^\u0026gt;]*\u0026gt; Predefined character classes # Some escaped characters denote common character classes:\n\\d is equivalent to [0-9] \\w is equivalent to [A-Za-z0-9] \\s stands for any whitespace character. It is equivalent to $\\qquad\\qquad$[ \\t\\n\\x0B\\f\\r]\n\\R stands for any Unicode linebreak sequence. It is equivalent to\n$\\qquad$\\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029]\nThe complements of some of these classes are also available:\n\\D is equivalent to [^\\d] \\S is equivalent to [^\\s] \\W is equivalent to [^\\w] Quantifiers # If $i \\le j \\in \\mathbb{N}$ then $e${$i$,$j$} concatenates $e$ with itself at least $i$ times and at most $j$ times, and is evaluated in a greedy way. Examples.\na{1,3} is equivalent to aaa|aa|a [A-Z]{1,3} greedily matches a sequence of 1 to 3 capital letters [A-Z]{0,3} greedily matches a (possibly empty) sequence of at most 3 capital letters $e${$i$} is equivalent to $e${$i$,$i$}. Examples.\na{3} is equivalent to aaa [A-Z]{4} matches a sequence of 4 capital letters $e$+ is equivalent to $ee$*. Examples.\na+ greedily matches a sequence of at least one a \\d+ greedily matches a nonempty sequence of digits [^\\d]+ greedily matches a nonempty sequence of non-digits If $e$ does not end with a quantifier, then $e$? is equivalent to $e$|$\\varepsilon$. Examples.\na? greedily matches at most one occurrence of a (ab)? greedily matches at most one occurrence of ab [A-Z]? greedily matches at most one capital letter Lazy quantification # If $e$ ends with a quantifier (e.g. with * or +) then $e$? forces a lazy evaluation of this quantifier. Examples.\nIn the word $w$ = ab:\nab* matches $w$ ab*? matches $w[0 .. 1)$: a In the word $w$ = abbb:\nab{1,3} matches $w$ ab{1,3}? matches $w[0 .. 2)$: ab Boundary matchers # Some special characters match empty segments (i.e. segments with word $\\varepsilon$).\nIn particular:\n^ (outside of a character class definition) matches the beginning of a string, $ matches the end of a string. Examples. Consider the string $w$ = a123b\nthe regex \\d+ matches $w[1 .. 3)$: 123 the regex ^\\d+ has no match in $w$ the regex \\d+$ has no match in $w$ Hint. These two special characters are widely used, in particular for string validation: an input word $w$ belongs to the language described by a regex $e$ iff there is a match for the regex ^$e$$ in $w$.\nBesides, if this is the case, then the best first match is also the longest possible match.\nExample. In the string $w$ = ab:\nthe best first match for a|ab is $w[a .. 1)$: a the best first match for ^(a|ab)$ is $w[a .. 2)$: ab The special character \\b matches any \u0026ldquo;natural language word\u0026rdquo; boundary (i.e. beginning or end). Example. Consider the string $w$ = User Alice797 is 55 years old\nThe best first match for \\d+ in $w$ is $w[10 .. 13)$: 797 The best first match for \\d+\\b in $w$ is $w[10 .. 13)$: 797 The only match for \\b\\d+ in $w$ is $w[17 .. 19)$: 55 The only match for \\b\\d+\\b in $w$ is $w[17 .. 19)$: 55 Group # A group in a regex is the content of a pair of parentheses. Groups allow capturing subsegments of a matched segment.\nExample. Consider the regex: $e$ = a(b|c)d and the word $w = $abd\nThere is only one match for $e$ in $w$ (namely $w$ itself).\nWithin this match, the subsegment captured by the group (a|b) is $w[1 .. 2)$: b.\nGroups in a regex are (totally) ordered based on the position of their opening parenthesis.\nExample. In the regex a(([\\d]*)(a|b))\nGroup number 1 is (([\\d]*)(a|b)) Group number 2 is ([\\d]*) Group number 3 is (a|b) Exercise Use the regex validation tool regex101 to write a regex with a group that matches what is inside a pair of opening and a closing HTML tags. For instance, in the word\n$\\qquad\\qquad$\u0026lt;span class=\u0026quot;title\u0026quot;\u0026gt;My Title\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;content\u0026quot;\u0026gt;Hello\u0026lt;/span\u0026gt;\nthe group should match My Title and Hello\nPossible solution \u0026gt;([^\u0026lt;]*)\u0026lt;/ Backreference # A group can be referenced within a regex, with \\$n$, where $n$ is the group number. If the reference appears after the group, this is called a backreference. Example.\nIn the regex a(b|c)d\\1q, the backreference \\1 refers to the group (b|c) In the regex (a(b|m))d\\2m, the backreference \\2 refers to the group (b|m) Evaluation. Let $e$ be a regex with backreferences.\nConsider the expression $e\u0026rsquo;$ identical to $e$, but where each backreference is replaced with the group that it references. Then a match for $e$ is a match for $e\u0026rsquo;$ where each group and its copy capture segments with identical words.\nExample. The regex (a|b)\\1 is equivalent to aa|bb Exercise Which words does the following regex match?\n$\\qquad\\qquad$((\\d)_\\2)@\\1\nSolution .\n1_1@1_1, 2_2@2_2, 3_3@3_3, etc. Note. Regexes with backreferences go beyond the expressivity of traditional regular expressions, meaning that they can describe languages that are not regular. "},{"id":23,"href":"/docs/interfaces/sections/java_interfaces/","title":"Java interfaces","section":"Interfaces","content":" Java interfaces # A Java interface is a programming interface with additional (object-oriented) features.\nSyntactically, a Java interface is similar to a class. But (in its simplest form), it contains no code. Instead, it specifies the behavior of some methods (which are implemented in some classes).\nExamples # The implementation of our game contains an interface called Snapshot, which describes what a game snapshot is. This interface specifies (among others) a method called getSizeOfReinforcement, as follows:\npublic interface Snapshot { ... /** * Returns the number of units that will enter the board if reinforcement * is called for the input player. */ int getSizeOfReinforcement(Player player); ... } Note that this description contains no code.\nA Java interface acts not only as documentation, but also as a contract : any (non-abstract) class that implements this interface must implement all methods declared in the interface (otherwise the program will not compile).\nA Java interface can be used to specify how two components of a system communicate (before the interface is even implemented!). For instance, the Snapshot interface specifies which information must be provided by our backend to the component in charge of displaying the game on screen.\nThe name of an interface can be used as a reference type (similarly to the name of a class). For instance, the Snapshot interface also specifies a method\nBoard getBoard(); which must return an object of type Board. And Board is itself an interface, which specifies the information needed to draw the game board (units, position, etc).\nHere is for instance a fragment of the Board interface:\n/** * Board for an ongoing game. * This is a two-dimensional grid. * * Tile coordinates are natural numbers and start at 0. * The top left tile has coordinates (0,0). */ public interface Board { ... /** * Returns true if the input coordinates are within the board\u0026#39;s boundaries */ boolean areValidCoordinates(int rowIndex, int columnIndex); /** * Removes the unit standing at the input coordinates, and does nothing * if there is none. */ void removeUnit(int rowIndex, int columnIndex) throws CoordinatesOutOfBoardException; ... } Finally, the interface DisplayManager specifies a method that can be called (e.g. from the backend) to draw a Snapshot on screen (together with a message):\npublic interface DisplayManager { ... /** * Displays the input snapshot on screen, as well as the input message. */ void drawSnapshot(Snapshot snapshot, String message); ... } Observe that these interfaces only specify what classes should implement, not how. In other words, these interfaces specify how components can communicate without exposing unnecessary implementation details.\nWhen to use a Java interface? # Technically, Java interfaces are not needed in a project. But they can make collaboration within a team of developers significantly easier. In particular:\nAn interface is a convenient way to expose what is needed to interact with your code, while hiding the details of your implementation. For instance, the method drawSnapshot (mentioned above) can be called to draw a snapshot on screen, without knowing how this method is implemented.\nAs a contract, an interface allows two programmers to work independently, ensuring interoperability between the methods and/or components that they are respectively developing.\nInheritance # An interface in Java can extend another interface, like a class can extend another class, with the same keyword extends.\nHowever, Java interfaces support multiple inheritance (whereas java classes do not). This means that an interface A can extend two interfaces B and C even if B and C do not extend each other.\nImplementing an interface # In Java, the keyword implements is used to indicate that a class implements an interface. For instance:\npublic class SnapshotImpl implements Snapshot { ... } Note. It is good practice to avoid a class and an interface with the same name (even if they describe the same objects). To differentiate them, you may for instance use the suffix Impl, as illustrated above. Consider a class C that implements an interface I :\nif C is abstract, then it can implement some of the methods declared in I if C is not abstract, then each method declared in I must be implemented in C (or some superclass of C ), otherwise the program will not compile. Exercise The program represented by the following diagram does not compile. Can you see why?\nSolution The class Butterfly does not implement the method sleep.\nNote. In this example, the class Butterfly inherits an implementation of boost (from AbstractUnit), and overrides it. This is not an error.\nSince Java interfaces support multiple inheritance, a Java class can implement several interface that do not extend each other.\nFor instance, the class Unicorn could implement an interface Animal and another interface ImaginaryCreature, even though none of these two interfaces extends the other (not all animals are imaginary, and not all imaginary creatures are animals). This would be declared as follows:\npublic class Unicorn extends MobileUnit implements Animal, ImaginaryCreature { ... } Exercise The program represented by the following diagram does not compile. Can you see why?\nSolution The class Unicorn does not implement the method hide. Interfaces vs abstract classes # In theory, Java\u0026rsquo;s interfaces and abstract classes serve different purposes:\nabstract classes are meant to factorize code (i.e. avoid redundant code), whereas interfaces are meant to document code and act as a contract. However, in practice, they have partially overlapping features, which may be confusing.\nIn particular:\nan abstract class can have abstract methods, which behave similarly to interface methods (with the additional constraint that an abstract method must be implemented by at least one subclass). Since Java 8 (2014), interfaces can carry code, in so-called default methods. This feature was introduced for backward compatibility reasons, but arguably contradicts the meaning of the term \u0026ldquo;interface\u0026rdquo;. An benefit of default methods (i.e. methods implemented in interfaces) is that they allow multiple inheritance of implemented methods (since interfaces allow multiple inheritance), which is not possible with classes. For this reason, some authors (like Joshua Bloch) recommend using default methods instead of abstract methods. However, a program where interfaces play the role of abstract classes may be confusing for less experienced Java developers.\nFor this course, we chose to present Java interfaces from a more traditional (pre-Java 8) perspective, because this perspective is arguably easier to understand, and because this is still the dominant usage of Java interfaces. However, for your project, feel free to deviate from this model if you think that this is appropriate (in particular if you need multiple inheritance).\n"},{"id":24,"href":"/docs/build/sections/layout/","title":"Layout","section":"Build automation","content":" Layout # The standard directory layout # By default, a Maven project is expected to comply with the so-called \u0026ldquo;standard directly layout\u0026rdquo;.\nWarning. We restrict here the layout to files and folders that you are likely to use in your project. A comprehensive description can be found here. ├── pom.xml ├── README.md ├── src │ ├── main │ │ ├── java │ │ │ └── ... │ │ └── resources │ │ └── ... │ └── test │ ├── java │ │ └── ... │ └── resources │ └── ... ... Here is the intended purpose of these files and directories (all paths are from the root of the project):\nfile or directory content pom.xml Maven configuration for the project README or README.md (human readable) description of the project src/main/java source code of the project src/main/resources resources for the project (e.g. configuration files, images, etc.) src/test/java source code for unit tests src/test/resources resources for unit tests (e.g. data) Note. By default, the content of the src/main/resources directory is automatically included in a jar generated with Maven. Hint. Your IDE can generate this folder structure (together with a minimal pom.xml file).\nFor instance, with IntelliJ, click on File/New/Project, and then select \u0026ldquo;Maven\u0026rdquo; as the \u0026ldquo;Build system\u0026rdquo;:\nHint. In some cases, a folder structure and pom.xml file that are tailored to a certain framework (like JavaFX or JSP) can be generated. This is called a maven archetype. The target directory # When building a Maven project, some files and directories are generated.\nBy default, the directory called target (at the root of the project) contains the output of the build, in particular:\nthe bytecode (i.e. .class files), the generated .jar file(s), if any. Hint. Since it is automatically generated, the target directory can be safely deleted. Maven and Git # The pom.xml file should usually be committed.\nHowever, the following should not be committed (i.e. should be ignored via .gitignore):\nthe target directory, any other content generated during the build (e.g. generated source code, etc.). "},{"id":25,"href":"/docs/recursion/sections/nary/","title":"N-ary recursion","section":"Recursion","content":" N-ary recursion # Definition. A recursive method that is not linear recursive uses n-ary recursion. Specific cases include:\nbinary recursion if a method performs up to two recursive calls each time it is executed, ternary recursion if it performs up to three recursive calls each time it is executed, etc. Examples.\nThe algorithm seen earlier to print all files in a folder uses n-ary recursion.\nAll the binary tree algorithms seen earlier use binary recursion.\nDivide and conquer # The divide-and-conquer paradigm is a variation of the methodology seen earlier to solve a problem recursively. In the divide-and-conquer approach, the smaller inputs $I_1$, .., $I_k$ usually have (nearly) the same size. Divide-and-conquer has been instrumental in discovering efficient solutions to pervasive computational problems. Well-known examples include:\nthe Karatsuba algorithm for multiplying two numbers, the Strassen algorithm for matrix product, Mergesort for (stable) sorting. Example: Mergesort # Mergesort is one of (many) algorithms commonly used to sort an array, i.e. to solve the following problem:\nInput: an array $A$\nOutput: a sorted array with the same elements as $A$\nObservation. As we saw already, the array can be of any type (int, String, City, Unit, etc.), and the sorting criterion can be any total preorder over this type.\nThe Mergesort algorithm may be summarized as follows:\n(Base case). If $A$ has size $1$, then return it ($A$ is already sorted). (Inductive case). Otherwise: (divide): partition $A$ into its left half $A_1$ and its right half $A_2$, (solve): sort $A_1$ and sort $A_2$ (recursively), (combine): merge (the sorted versions of) $A_1$ and $A_2$. Here is a naive implementation, in pseudocode:\n// Returns a sorted array that contains the same elements as A. Type[] mergesort(Type[] A) { // Base case: the input array has size 1, it is already sorted. if(A.length == 1){ return A } // Inductive case (the input array has size \u0026gt; 1) // Compute the middle index (rounded down) int middleIndex = (A.length - 1) / 2 // Copy the left half of A into a new array Type[] leftHalf = copy(A[0 .. middleIndex]) // Sort it leftHalf = mergesort(leftHalf) // Copy the right half of A into a new array Type[] rightHalf = copy(A[middleIndex + 1 .. A.length - 1]) // Sort it rightHalf = mergesort(rightHalf) // merge the two sorted halves return merge(leftHalf, rightHalf) } Warning. This implementation is suboptimal (some arrays can be reused). We only used it to keep the explanation simple. Exercise To complete this algorithm, implement (in pseudocode) the auxiliary method\nType[] merge(Type[] A, Type[] B) that takes as input two sorted arrays A and B, and returns a sorted array that contains their values.\nTry also to write it in such a way that the overall Mergesort algorithm is stable.\nPossible solution Iterate over A and B in parallel:\nif A[0] (resp. B[0]) is smaller than B[0] (resp. A[0]), then: add A[0] (resp. B[0]) to the output array, and repeat with A[1] and B[0] (resp. A[0] and B[1]), etc. when reaching the end of A (resp. B), add the remaining elements of B (resp. A) to the output array. More precisely:\nType[] merge(Type[] A, Type[] B){ // Output array Type[] C = new Type[A.length + B.length] // Index to iterate over A int a = 0 // Index to iterate over B int b = 0 // Index to iteratate over C int c = 0 // while we have not reached the end of A or B while (a \u0026lt; A.length \u0026amp;\u0026amp; b \u0026lt; B.length) { if(A[a] \u0026lt;= B[b]) { C[c] = A[a] a++ } else { C[c] = B[b] b++ } // If we reached the end of A, if(a == A.length){ // append all remaining elements of B to the output array. append(B, b, C, c) } else // Otherwise we reached the end of B. // So append all remaining elements of A to the output array. append(A, a, C, c) } } append (Type[] D, int d, Type[] C, int c) { while (d \u0026lt; D.length){ C[c] = D[d] d++ } } Merge sort in action. You can find visual illustrations of the execution of merge sort online. For instance this animation, or this (more accurate) one. Observation. Merge sort is a stable sorting algorithm. Tree and graph traversal # Earlier in this chapter, we used different algorithms to traverse a binary tree, where nodes were instances of the following class:\nOne of these algorithms was the so-called \u0026ldquo;pre-order traversal\u0026rdquo;:\ntraverse(Node root){ // inductive case only (do nothing in the base case) if (root != null){ print(root.label) traverse(root.leftChild) traverse(root.rightChild) } } This algorithm naturally generalizes to trees where nodes may have more than two children. Nodes in such a tree can be represented as instances of the following class:\nAnd the algorithm becomes:\ntraverse(Node root){ if (root != null){ print(root.label) foreach child in root.children { traverse(child) } } } This algorithm can in turn be adapted to traverse a graph. More precisely, to explore all nodes reachable (directly or transitively) from a given source node in the graph.\nWarning. When applied to a graph, the algorithm above:\nmay not terminate (if the graph contains a loop), may process some nodes multiple times (even if the graph is acyclic). In order to avoid this, a common technique consists in labelling nodes in a graph with an additional boolean attribute visited, which indicates whether a node has already been visited during a traversal:\nAnd the algorithm becomes:\ntraverse(Node root){ if (root != null \u0026amp;\u0026amp; !root.visited){ root.visited = true print(root.label) foreach child in root.children { traverse(child) } } } Terminology. This approach is often called depth-first exploration of a graph. Exercise Consider the following graph.\nWhat does the above algorithm print for input node A, assuming that the children of each node are sorted in label\u0026rsquo;s alphabetical order?\nSolution A B D F C E "},{"id":26,"href":"/docs/project/sections/board_game/","title":"Option 2: board game","section":"Project","content":" Option 2: board game # The second project option available to you consists in developing a video game with mechanics analogous to the ones of Might \u0026amp; Magic: Clash of Heroes or Legend of Solgard.\nIf you choose this option, you will be provided:\na basic graphical user interface (GUI) that you can reuse and/or customize, examples during lectures that you may adapt to your project. Requirements # The minimal requirement to submit your project is a player vs player game playable on a single machine.\nBut of course, you are free to go further and add your own features. Among other possibilities, you could for instance:\nimplement new mechanics (e.g. a rock-paper-scissor logic for unit encounters, events that may affect the board, etc.), make the game deterministic (i.e. eliminate randomness), create units with specific behaviors, implements scripted encounters (\u0026ldquo;boss fights\u0026rdquo;), implement a story, character progression, etc., develop a player vs bot mode, etc, Note. If you choose the last options in the list above (player vs bot), then you may benefit from an algorithm seen in the chapter on recursion. Besides, if several groups choose this option, we may organize a competition between bots (provided that they play by the same rules). Guidelines # GUI # The source code for the GUI can be cloned from GitHub. The project is designed so that:\nyou can develop a fully functional game (player vs player or player vs bot) by focusing exclusively on the backend (i.e. the mechanics of the game), without modifying the GUI. backend and frontend are decoupled. Communication between frontend and backend is specified via Java interfaces. It revolves around the notion of a game snapshot, which contains all the information needed to describe a state of the game (equivalently, you can think of a snapshot as a save state). In particular, snapshots are independent of a specific GUI.\nFor instance, a method is available that allows you to pass a snapshot to the GUI component. When you call this method, the snapshot will be drawn on screen, replacing the previous one (if any).\nAs input, your code receives the next action of the active player (for instance, delete the unit present on a specific tile). These are again specified by an interface. Your code should react accordingly: modify the current snapshot, and then send it the GUI component for display.\nThe README.md file (at the root of the project) contains a description of the different components and interfaces, as well as building instructions, and explains where your code could fit. Read it carefully before you start working on your project!\nNote. You are of course free to modify the interfaces that come with the project. But this may require modifying the implementation of the GUI. Disclaimer. By design, the project compromises performance for simplicity and modularity. This is not how a resource intensive game would be implemented.\nMore generally, this exercise is not meant to teach you game development, but general-purpose programming and problem solving.\n"},{"id":27,"href":"/docs/project/","title":"Project","section":"Docs","content":" Project # Students enrolled in this course are expected to deliver a group project.\nTwo alternative options # You can develop either:\nA project of your choice, or Your own version of the board game used as our running example. If you choose the second option (board game), then:\nyou will be provided a graphical user interface (so that you only need to implement the mechanics of the game), additional content will be provided during the lectures (as illustrations) that you can incorporate to your project. Requirements # Here are some requirements common to both options (free project or board game).\nSource code # The source code for the project must be written in Java 17 or lower.\nThe code should be yours (or mostly yours). If you incorporate external code, make sure to reference it clearly in the README.md file of your project. If you took inspiration from a tutorial or the source code of another project, then reference it as well.\nThe source code must be submitted as a GitHub repository. The commit history must reflect the individual contribution of each member of the group. Once again, make sure that:\neach student uses a different (and only one) GitHub account, and each student commits his/her own code. The repository should contain at its root a .gitignore file hat indicates files that should not be tracked. As a result, your repository should not contain compiled classes, jars, logs, run-time files, IDE-generated files (e.g. .idea/), OS-generated files (e.g. .DS_Store), etc.\nDependencies, build and packaging # You are free to use any additional Java library in your project.\nThe project should be build with either Maven or Gradle. It should run on the evaluation environment via command line instructions.\nFor instance (depending on how you designed your project), the instructions to build the executable may be:\nmvn package and the instruction to run the executable may be (assuming that the executable is called myJar.jar and that your program takes two strings as input):\njava -jar myJar.jar \u0026#34;firstInput\u0026#34; \u0026#34;secondInput\u0026#34; If the executable cannot be built in the evaluation environment, then you should at least provide an über-jar that can run in this environment (via command line still). In this case, you may use a GitHub release to share this über-jar.\nDocumentation # Your git repository should contain at its root a README.md file (written in Markdown). This file should contain at least the following information:\nmembers of the group and their respective GitHub identifiers, clear instructions for building and running the project, a description of the project, a user\u0026rsquo;s guide for the project (either a written guide, or a link to a video), a brief overview of the implementation of your project. This should include information on: the different (high-level) components and interfaces between components, which third-party libraries you used (if any), and some programming techniques (seen in the course or not) that were particularly relevant for this project. a description of your human experience in this project. This should include information on: how the workload was distributed between the members of the project, how you used git, and challenges that each member faced (at least one per person). For further information about what a README.md file usually contains, you may look at this web page.\n"},{"id":28,"href":"/docs/input/sections/read/","title":"Reading from and writing to a file in Java","section":"I/O and serialization","content":" Reading from and writing to a file in Java # There are numerous ways to read from or write to a file in Java, using either native of external libraries.\nWe highlight here some of the simplest ones (syntactically), even though they may not be the most efficient.\nWe also restrict our scope to:\nreading and writing text (but Java also offers multiple ways to read or write sequences of bytes), reading sequentially and writing by appending (but some classes like RandomAccessFile allow accessing any position in a file). Reading # Reading a text file line by line # Here is one way to process the content of a text file line by line:\ntry (BufferedReader reader = Files.newBufferedReader(Path.of(\u0026#34;path/to/file.txt\u0026#34;))){ String line = reader.readLine(); while (line != null){ System.out.println(line); line = reader.readLine(); } } catch (IOException e) { throw new RuntimeException(e); } Reading an entire text file # Alternatively, if the file is small, its whole content can be stored as a list of strings (one per line), as follows:\nList\u0026lt;String\u0026gt; lines = null; try (Stream\u0026lt;String\u0026gt; stream = Files.lines(Path.of(\u0026#34;path/to/file.txt\u0026#34;))){ lines = stream.toList(); } catch (IOException e) { throw new RuntimeException(e); } Or even as a single string:\nString text; try { text = Files.readString(Path.of(\u0026#34;path/to/file.txt\u0026#34;)); } catch (IOException e) { throw new RuntimeException(e); } Splitting # The method String.split can be used to decompose a string into an array of substring, based on some delimiter. For instance, in a csv file, each line can be decomposed using a comma (,), as follows:\nString line = \u0026#34;Alice,Bob,Carol\u0026#34;; // Contains [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Carol\u0026#34;] String[] names = line.split(\u0026#34;,\u0026#34;); We will see in the chapter dedicated to regular expressions that more expressive delimiters can be used.\nReading with a scanner # The class Scanner is a versatile tool that allows reading from the standard input, but also from a file.\nWe refer to last year\u0026rsquo;s course for an overview.\nWriting # Warning. In Java, methods that write an (underspecified) line separator produce a (sequence of) character(s) that depends on the operating system running the program: \\r\\n on Windows, and \\n on most other modern operating systems. This is the case in all three examples below, with the methods BufferedWriter.newLine, PrintWriter.println and Files.write.\nWriting incrementally # A common way to write to a file consists in using a BufferredWriter. For instance:\ntry(BufferedWriter writer = new BufferedWriter(new FileWriter(\u0026#34;path/to/file.txt\u0026#34;))){ writer.write(\u0026#34;Hi\u0026#34;); writer.newLine(); } catch (IOException e) { e.printStackTrace(); } A PrintWriter offers additional methods to easily format the output, such as print, println or printf, analogous to the methods of the standard output stream System.out. It is often used as a wrapper around another writer, for instance a BufferedWriter:\ntry(PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(\u0026#34;path/to/file.txt\u0026#34;)))){ writer.println(\u0026#34;Hi\u0026#34;); } catch (IOException e) { e.printStackTrace(); } Writing an entire list # The method Files.write can be used to write all elements of a list to a file (one per line):\nList\u0026lt;String\u0026gt; strings = List.of(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;); try { Files.write( Path.of(\u0026#34;path/to/file.txt\u0026#34;), strings ); } catch (IOException e) { throw new RuntimeException(e); } Writing a single string # The method Files.writeString can be used to write a single string to a file\ntry { Files.writeString( Path.of(\u0026#34;path/to/file.txt\u0026#34;), \u0026#34;foo\u0026#34; ); } catch (IOException e) { throw new RuntimeException(e); } Note that this will overwrite the content of the file.\nInstead, in order to append a string to a file, a third argument can be added to the method Files.writeString:\ntry { Files.writeString( Path.of(\u0026#34;path/to/file.txt\u0026#34;), \u0026#34;foo\u0026#34;, StandardOpenOption.APPEND ); } catch (IOException e) { throw new RuntimeException(e); } "},{"id":29,"href":"/docs/abstractdatatypes/sections/set/","title":"Set","section":"Abstract data types","content":" Set # The abstract data type set simulates a (usually finite) mathematical set. A set may expose the following methods:\nadd: adds an element to the set if it was not present already (and returns true iff this was the case), contains: checks whether an element belongs to the set, size: returns the cardinality of the set, etc. Warning. A set provides no guarantee on the order of its elements! in Java # Java provides an interface Set with 8 native implementations (i.e. different classes that implement this interface). The most commonly used are HashSet and TreeSet.\nThe interface Set extends the interface Collection.\nSyntax # Here are code snippets for a few simple operations specified in the interface Set.\nCreate a Set and populate it: City milan = new City(\u0026#34;Milan\u0026#34;, 20100); City florence = new City(\u0026#34;Florence\u0026#34;, 50100); // Creates an empty set of cities Set\u0026lt;City\u0026gt; mySet = new HashSet\u0026lt;\u0026gt;(); // Adds Milan to the set mySet.add(milan); // Adds Florence to the set mySet.add(florence); // Tries to add Milan again; this has no effect. mySet.add(milan); // Creates a set identical to the previous one, // but which cannot be modified Set\u0026lt;City\u0026gt; myOtherSet = Set.of(milan, florence); Remove an element from a set: mySet.remove(milan); Check whether a set contains an certain element: // Outputs false System.out.println(mySet.contains(milan)); // Outputs true System.out.println(mySet.contains(florence)); Retrieve the cardinality of a set: // Outputs 1 System.out.println(mySet.size()); Compute the intersection of two sets: mySet.add(new City(\u0026#34;Bologna\u0026#34;, 40100)); mySet.retainAll(myOtherSet); // Outputs 1 System.out.println(mySet.size()); Add a collection to a set: mySet.addAll(myOtherSet); // Outputs 2 System.out.println(mySet.size()); For more operations, consult the Javadoc of the interface Set.\nDuplicates # By definition, a set cannot contain identical elements. But what does \u0026ldquo;identical\u0026rdquo; mean for two objects?\nIn Java, the method equals is (implicitly) used to determine whether two elements added to a Set should be considered identical.\nWarning. Recall that the method equals should be overridden together with the method hashCode (more on this later). This is essential for a HashSet to behave as expected (more on this later). For instance, consider a naive implementation of the class City, which does not override equals (or hashCode):\npublic class City { String name; int zipcode; public City(String name, int zipCode){ this.name = name; this.zipCode =zipCode; } } Recall that every class inherits a default implementation of equals (and hashCode), from the class Object. According to this default implementation, equals behaves like ==.\nCity trento = new City(\u0026#34;Trento\u0026#34;, 38100); City trentoAgain = new City(\u0026#34;Trento\u0026#34;, 38100); Set\u0026lt;City\u0026gt; cities = Set.of(trento, trentoAgain); // Outputs 2 System.out.println(cities.size()); Now consider a class SmartCity identical to City, but that overrides equals (andhashCode) in the standard way:\npublic class SmartCity { String name; int zipCode; public SmartCity(String name, int zipCode) { this.name = name; this.zipCode = zipCode; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; SmartCity smartCity = (SmartCity) o; return zipCode == smartCity.zipCode \u0026amp;\u0026amp; name.equals(smartCity.name); } @Override public int hashCode() { return Objects.hash(name, zipCode); } } A Java Set cannot contain two instances of SmartCity that have the same name and zip code:\nSmartCity smartTrento = new SmartCity(\u0026#34;Trento\u0026#34;, 38100); SmartCity smartTrentoAgain = new SmartCity(\u0026#34;Trento\u0026#34;, 38100); Set\u0026lt;SmartCity\u0026gt; smartCities = new HashSet\u0026lt;\u0026gt;(); smartCities.add(smartTrento); smartCities.add(smartTrentoAgain); // Outputs 1 System.out.println(smartCities.size()); // Outputs false System.out.println(smartCities.add(smartTrentoAgain)); Note. Recall that many native Java classes already override equals (and hashCode). Among others: String, boxed types (like Integer), but also most implementations of the Collection interface (including HashSet). Note. Some implementations of List also provide methods that perform \u0026ldquo;set-like\u0026rdquo; comparisons. E.g. containsAll, removeAll, retainAll, etc. Again, we refer to the Javadoc for an exhaustive documentation. Usage # Implementations of the ADT set can be useful in a variety of contexts. For instance, remove duplicates from an array (assuming that the order of elements in the array is irrelevant):\nInteger[] myArray = new Integer[]{1,2,3,1,2}; List\u0026lt;Integer\u0026gt; tuple = List.of(myArray); Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(tuple); // Outputs 3 System.out.println(set.size()); Or check whether two lists contain the same (distinct) elements:\nSmartCity mantova = new SmartCity(\u0026#34;Mantua\u0026#34;, 46100); SmartCity bergamo = new SmartCity(\u0026#34;Bergamo\u0026#34;, 24100); List\u0026lt;SmartCity\u0026gt; list1 = List.of(mantova, bergamo); List\u0026lt;SmartCity\u0026gt; list2 = List.of(bergamo, mantova); Set\u0026lt;SmartCity\u0026gt; set1 = new HashSet\u0026lt;\u0026gt;(list1); Set\u0026lt;SmartCity\u0026gt; set2 = new HashSet\u0026lt;\u0026gt;(list2); // Outputs true System.out.println(set1.equals(set2)); Exercise In our game, a same unit may sit on two (or more) adjacent tiles.\nConsider an implementation where:\na board consists of a two-dimensional array with type Unit[][], and if a same unit sits on several tiles, then these tiles contain (a reference to) the same (instance of) Unit, and Unit does not override equals (neither do its sub or superclasses). Write a Java method int countUnits(Unit[][] board) that takes such an array as input, and returns the number of different units on the board.\nFor instance, with the board below as input, the method should return 5.\nPossible solution int countUnits(Unit[][] board) { Set\u0026lt;Unit\u0026gt; units = new HashSet\u0026lt;\u0026gt;(); for (Unit[] row : board) { for (Unit unit : row) { if (unit != null) { units.add(unit); } } } return units.size(); } Exercise What dose the following program output?\nSet\u0026lt;Integer\u0026gt; aSet = new HashSet\u0026lt;\u0026gt;(); Set\u0026lt;Integer\u0026gt; anotherSet = new HashSet\u0026lt;\u0026gt;(); aSet.add(1); aSet.add(2); anotherSet.add(1); Set\u0026lt;Set\u0026lt;Integer\u0026gt;\u0026gt; aFamily = new HashSet\u0026lt;\u0026gt;(); aFamily.add(aSet); aFamily.add(anotherSet); System.out.println(aFamily.size()); anotherSet.add(2); System.out.println(aFamily.size()); Solution 2 and 2. "},{"id":30,"href":"/docs/background/sections/set_tuple_map/","title":"Set, tuple, function","section":"Background","content":" Set, tuple, function # Set # A set can be informally viewed as a collection of elements with no duplicate and in no specific order. Definition. The power set $\\mathcal{P}(S)$ of a set $S$ is the set of all subsets of $S$. For instance, if \\(S = \\{a,b\\}\\) , then\n\\( \\qquad \\qquad \\qquad \\mathcal{P}(S) = \\Big\\{ \\{\\}, \\{a\\}, \\{b\\}, S \\Big\\} \\) Note. An alternative notation for the power set of $S$ is $2^S$. If $S$ is finite with size $n$, then $\\mathcal{P}(S)$ has size $2^n$.\nDefinition. The product $S_1 \\times S_2$ of two sets $S_1$ and $S_2$ is the set of all pairs $(s_1, s_2)$ such that $s_1 \\in S_1$ and $s_2 \\in S_2$. For instance, if \\( S_1 = \\{a,b\\} \\) and \\(S_2 = \\{1,2,3\\} \\) , then\n\\(\\qquad \\qquad S_1 \\times S_2 = \\{ \\ (a,1), (a,2), (a,3), (b,1), (b,2), (b,3)\\ \\}\\) Notation. Similarly to $S_1 \\times S_2$:\n$S_1 \\times S_2 \\times S_3$ denotes the set of all triples $(s_1, s_2, s_3)$ such that $s_1 \\in S_1, s_2 \\in S_2$ and $s_3 \\in S_3$. $S_1 \\times .. \\times S_k$ denotes the set of all tuples $(s_1, .., s_k)$ such that $s_1 \\in S_1, .., s_k \\in S_k$. Notation.\n$S^2$ is sometimes used for $S \\times S$, $S^3$ is sometimes used for $S \\times S \\times S$, etc. Tuple # Definition. A tuple (or list) over a set $S$ is a finite sequence of (possibly repeated) element of $S$. For instance:\n- \\(()\\) is the 0-tuple or empty tuple,\n- \\((a)\\) is a 1-tuple,\n- \\((b,a)\\) is a 2-tuple or pair,\n- \\((a,b,a)\\) is a 3-tuple or triple, etc.\nFunction # A function (or map) $f\\colon X \\to Y$ maps each element $x$ of its domain $X$ to an element $f(x)$ of its codomain $Y$. A function \\(f\\colon X \\to Y\\) can equivalently be viewed as a set of \u0026ldquo;key-value\u0026rdquo; pairs, namely the set of all pairs \\((x, f(x))\\) such that \\(x \\in X\\) .\nDefinition. A function $f\\colon X \\to Y$ is:\ninjective is no two elements in its domain have the same image, i.e. if for all $ x_1, x_2 \\in X$, $\\qquad \\qquad x_1 \\neq x_2$ implies $f(x_1) \\neq f(x_2)$\nsurjective if every element in its codomain has a preimage, i.e. if $\\qquad \\qquad$ for each $y \\in Y$, there is a $x \\in X$ such that $y = f(x)$.\nbijective if it is injective and surjective. A function \\(f\\) with finite domain can be represented extensionally, as a set of pairs of the form\n\\(\\qquad \\qquad x \\mapsto f(x)\\) For instance, the function \\(f\\colon \\{a,b,c\\} \\to \\mathbb{N}\\) defined by\n\\(\\qquad f(a) = 1,\\ f(b) = 1\\) and \\(f(c) = 2\\) can be represented as the set:\n\\(\\qquad \\{\\ a \\mapsto 1,\\ b \\mapsto 1,\\ c \\mapsto 2\\ \\}\\) Multiset # A multiset (or bag) is a finite collection of elements in no specific order, possibly with duplicates. Square bracket are sometimes uses to distinguish a multiset from a set or a tuple. For instance:\n\\([b,b,c]\\) and \\([a,b]\\) are multisets (the latter is also a set).\n\\([a,b,a]\\) and \\([b,a,a]\\) denote the same multiset.\nExercise A multiset can equivalently be viewed as one of the mathematical objects seen above. Can you identify which one? Solution A multiset can be viewed as a function that maps each element to its number of occurrences.\nFor instance, the multiset\n[a, b, a]\ncan be viewed as the function\n{ a ↦ 2, b ↦ 1 }\n"},{"id":31,"href":"/docs/intro/sections/lecturers/","title":"Teaching staff","section":"This course","content":" Teaching staff # Julien Corman will teach the lectures and one lab.\nAlbulen Pano will teach the other lab.\nOffice hours # If you need additional help with the content of the course, the assignments and/or your project, you can ask for office hours with any (or both) of us.\nThese appointments must be scheduled via email (follow the links above for our email addresses).\n"},{"id":32,"href":"/docs/abstractdatatypes/sections/map/","title":"Associative array","section":"Abstract data types","content":" Associative array # An associative array (or dictionary or map) simulates a function with finite domain. A associative array exposes at least the following methods:\nlookup (or get) takes a key as input, and returns the value for this key (if any). insert (or put ) inserts a pair (key, value). If an entry for this key was already present, then overwrites its value. remove (or delete) deletes the entry for a given key (if any). Note. Associative arrays are pervasive in programming. Many data structures have been designed over the years whose main purpose is to implement associative arrays efficiently (notably hash maps and a variety of search trees). in Java # Java provides an interface Map with 19 native implementations (i.e. 19 different classes that implement this interface). The most commonly used is HashMap.\nNote. The interface Map does not extend the interface Collection. Map is a generic type with two parameters: one for the type of its keys, and one for the type of its values. For instance, a map from integers to strings has type Map\u0026lt;Integer, String\u0026gt;.\nSyntax # Here are code snippets for a few operations specified in the interface Map.\nCreate a Map and populate it: City milan = new City(\u0026#34;Milan\u0026#34;, 20100); City florence = new City(\u0026#34;Florence\u0026#34;, 50100); // Create an empty map whose keys are zipCodes, // and whose values are cities Map\u0026lt;Integer, City\u0026gt; zipCodeToCity = new HashMap\u0026lt;\u0026gt;(); // Adds { 20100 ↦ milan } to the map zipCodeToCity.put(milan.zipCode, milan); // Adds { 50100 ↦ florence } to the map zipCodeToCity.put(florence.zipCode, florence); // Creates a map identical to the previous one, // but which cannot be modified Map\u0026lt;Integer, City\u0026gt; anotherMap = Map.of( milan.zipCode, milan, florence.zipCode, florence ); Retrieve the value associated to a given key: // Contains (a reference to) Milan City aCity = zipCodeToCity.get(20100); // Has value null City anotherCity = zipCodeToCity.get(88888); Check whether a map contains an entry for a given key: // Outputs true System.out.println(zipCodeToCity.containsKey(20100)); // Outputs false System.out.println(zipCodeToCity.containsKey(88888)); Retrieve the number of entries in a map: // Outputs 2 System.out.println(zipCodeToCity.size()); Overwrite an entry in a map: City bologna = new City(\u0026#34;Bologna\u0026#34;, 40100); // Replaces { 20100 ↦ milan } with { 20100 ↦ bologna } zipCodeToCity.put(20100, bologna); // Outputs 2 System.out.println(zipCodeToCity.size()); // Adds { 40100 ↦ bologna } to the map zipCodeToCity.put(bologna.zipCode, bologna); // Outputs 3 System.out.println(zipCodeToCity.size()); // Replaces { 20100 ↦ bologna } with { 20100 ↦ milan } zipCodeToCity.put(milan.zipCode, milan); Retrieve the set of keys of a map (note that this is an instance of Set\u0026lt;E\u0026gt;, where E is the type of the keys) Set\u0026lt;Integer\u0026gt; keys = zipCodeToCity.keySet(); // Outputs true System.out.println(keys.contains(20100)); Retrieve a collection with all values in the map, in no specific order (may contain duplicates): Collection\u0026lt;City\u0026gt; values = zipCodeToCity.values(); // Outputs true System.out.println(values.contains(milan)); // Outputs 3 System.out.println(values.size()); // Adds { 99999 ↦ milan } to the map zipCodeToCity.put(99999, milan); // Outputs 4 System.out.println(zipCodeToCity.values().size()); Wrap the map into a set of entries (a.k.a. \u0026ldquo;key-value\u0026rdquo; pairs): // Creates a \u0026#34;wrapper\u0026#34; Set around the map. // No data is duplicated. // Each element of this set has type Entry\u0026lt;Integer,City\u0026gt; Set\u0026lt;Entry\u0026lt;Integer,City\u0026gt;\u0026gt; entries = zipCodeToCity.entrySet(); // Iterates over entries for (Entry\u0026lt;Integer, City\u0026gt; entry : entries){ // Holds the entry\u0026#39;s key Integer zipCode = entry.getKey(); // Holds the entry\u0026#39;s value City city = entry.getValue(); } Again, we refer to the Javadoc for an exhaustive documentation.\nComparing keys # The identity of two keys in Java is determined by the method equals, analogously to what we saw already for the identity of two elements in a set.\nFor instance, consider once again the classes City and SmartCity that we used in the section on sets, where SmartCity overrides equals (and hashCode), whereas City does not:\nCity trento = new City(\u0026#34;Trento\u0026#34;, 38100); City trentoAgain = new City(\u0026#34;Trento\u0026#34;, 38100); Country italy = new Country(\u0026#34;Italy\u0026#34;); Map\u0026lt;City, Country\u0026gt; cityToCountry = new HashMap(); cityToCountry.put(trento, italy); cityToCountry.put(trentoAgain, italy); // Outputs 2 System.out.println(cityToCountry.size()); SmartCity smartTrento = new SmartCity(\u0026#34;Trento\u0026#34;, 38100); SmartCity smartTrentoAgain = new SmartCity(\u0026#34;Trento\u0026#34;, 38100); Map\u0026lt;SmartCity, Country\u0026gt; smartCityToCountry = new HashMap(); smartCityToCountry.put(smartTrento, italy); smartCityToCountry.put(smartTrentoAgain, italy); // Outputs 1 System.out.println(smartCityToCountry.size()); Usage # Exercise Write a Java method int countRepeatedChars(char[] chars) that takes as input an array of characters, and returns the number of characters that appear multiple times in this array.\nFor instance, for the input array [a,e,b,c,b,a,d,b], the method should return 2.\nPossible solution int countRepeatedChars(char[] chars) { // key: character // value: number of occurrences of this character Map\u0026lt;Character, Integer\u0026gt; charToOcc = computeCharToOccMap(chars); // return value int repeatedChars = 0; // count the number of entries in the map with a value \u0026gt; 1 for (Integer occ : charToOcc.values()){ if(occ \u0026gt; 1){ repeatedChars++; } } return repeatedChars; } /** * Auxiliary method. * * Returns a map that associates each character to its number of occurrences */ private Map\u0026lt;Character, Integer\u0026gt; computeCharToOccMap(char[] chars) { // create an empty map Map\u0026lt;Character, Integer\u0026gt; charToOcc = new HashMap\u0026lt;\u0026gt;(); // for each character in the input array for (char character : chars) { // retrieve the number of occurrences seen so far for this character Integer occ = charToOcc.get(character); // increment this number by 1 occ = (occ == null) ? 1 : occ + 1; // update the map for this character charToOcc.put(character, occ); } return charToOcc; } Exercise Consider the implementation of our game that we used previously in our exercise with sets. Assume in addition that the class Unit has an attribute color of type String.\nWrite a (Java) method void printNumberOfUnitsByColor(Unit[][] board) that takes a board as input, and prints the number of unit of each color, in any order.\nFor instance, for the board below:\nThe method could print:\nblue: 1 yellow: 2 red: 2 Possible solution void printNumberOfUnitsByColor(Unit[][] board) { // key: a color // value: the set of all units with this color Map\u0026lt;String, Set\u0026lt;Unit\u0026gt;\u0026gt; colorToUnits = new HashMap\u0026lt;\u0026gt;(); for (Unit[] row : board) { for (Unit unit : row) { if (unit != null) { updateMap(unit, colorToUnits); } } } // for each entry in the map for (Entry\u0026lt;String, Set\u0026lt;Unit\u0026gt;\u0026gt; entry : colorToUnits.entrySet()) { // print the color and the number of units System.out.println( entry.getKey() + \u0026#34;: \u0026#34; + entry.getValue().size() ); } } /** * Auxiliary method */ private void updateMap(Unit unit, Map\u0026lt;String,Set\u0026lt;Unit\u0026gt;\u0026gt; colorToUnits){ // retrieve the set of units seen so for the color // of the current unit Set\u0026lt;Unit\u0026gt; units = colorToUnits.get(unit.color); if (units == null) { // if this is the first unit seen with this color, // then create an entry (in the map) for this color units = new HashSet\u0026lt;\u0026gt;(); colorToUnits.put(unit.color, units); } units.add(unit); } "},{"id":33,"href":"/docs/env/sections/backup/","title":"Backup","section":"Development environment","content":" Backup # Make sure that your work does not depend on your laptop. You should be able to resume your work easily on another computer if your laptop gets lost, damaged, etc.\nYou should also be able to recover your data if you accidentally delete it from your hard drive.\nWhich information to back up # As a priority, make sure that there exist copies (outside of your hard drive) of:\nyour passwords (and possibly identifiers), and your own work (code, reports, slides, notes, CV, etc.). These copies may be stored on the cloud, an external disk, another computer, etc.\nOptionally, you may also back up:\nconfiguration files present in your home folder. For development purposes, you generally do not need to back up:\ngenerated content (back up the code that generates it instead), large datasets (these should not be present on your laptop to start with), programs (they can be reinstalled). How to back up # Password managers # For passwords, your password manager may provide an online backup option. Other password managers (like pass) may let you synchronize your passwords via git.\nGit # For your own work and/or configuration files, git can be an option.\nA git repository is (roughly speaking) a directory that can be synchronized across different machines (see the dedicated chapter of this course for an introduction to git). For instance, you may create a (private) git repository for each course that you follow and/or each project that you start. Several providers (GitHub, Gitlab, Bitbucket, etc.) can host copies of your (public or private) repositories on the cloud for free.\nThe benefits are:\nthe possibility to recover any previous state of your work (a git repository stores the whole history of modifications made to it), fine-grained control over your backup: for instance, you can use a \u0026quot;.gitignore\u0026quot; file to exclude files or subfolder that do not need to be backed up. Note. If a git repository is a subfolder of another git repository, then the inner repository is not included in the history of the outer one. Limitation. Git is not suited to large volumes of data (more than 1 GB in the same repository). This is usually not an issue for your own work (code, notes, reports, etc.) as a student in computer science. However, git should not be used to back up large collections of images, audio files, videos, etc. Other solutions # Numerous programs allow you to back up (part of) the content of your hard drive. One of them may be pre-installed on your operating system.\nYou can back up content on a device that you own (e.g. on an external hard drive), or on the cloud. In the latter case, some fee may apply (depending on the volume of data).\nRestore points # Programs such as System restore (Windows), macOS Recovery (macOS) or Timeshift (Linux) allow you to create snapshots of your system (typically for what lives outside of your home folder), and revert your system\u0026rsquo;s state to one of these snapshots.\nThis can be useful in case of a corrupted system. However, it may be difficult to determine at which point in time the system was \u0026ldquo;healthy\u0026rdquo;. Note also that in such scenarios, a fresh re-install may be a simpler to restart on a sane basis.\n"},{"id":34,"href":"/docs/git/sections/config/","title":"Configuration","section":"git","content":" Configuration # Text editor # In some situations (commit without message, merge commit, etc.), git automatically opens a text editor to let you type a message.\nBy default, on most operating systems, git open vi for this purpose. I you have never used vi, we recommend selecting another text editor.\nYou can do this by running:\ngit config --global core.editor \u0026lt;myEditor\u0026gt; where \u0026lt;myEditor\u0026gt; is the command that launches your text editor (for instance notepad for Notepad, open -e -W -n for TextEdit , gedit for gedit, sublime for Sublime Text, etc.)\nProtocol # Git hosting services (such as GitHub) usually support two alternative protocols for sharing content with a remote: https and ssh.\nssh is generally recommended.\nSSH key # To share content via ssh, you need a cryptographic key, often called an \u0026ldquo;ssh key\u0026rdquo; (in practice, this is an RSA key).\nYou may already have an ssh key on your machine. By default, ssh keys are located in the dot folder \u0026lt;homeFolder\u0026gt;/.ssh (or \u0026lt;homeFolder\u0026gt;\\.ssh on Windows).\nIf this folder exists, then it should contain (at least) one file with extension .pub. Such a file contains a public RSA key. You can share this key with a git host for authentication.\nIf you do not have an SSH key on your machine, then you can generate one by running\nssh-keygen in a terminal (Linux and macOS) or in the Windows Power Shell (Windows). If you accept the default location, this command will generate the .ssh folder and a key.\nIn order to add a public key to your GitHub account, log in to GitHub, select \u0026ldquo;Settings\u0026rdquo;, then \u0026ldquo;SSH and GPG keys\u0026rdquo;. Click on the \u0026ldquo;New SSH key\u0026rdquo; button, give a name to your key, and paste your public key (i.e.the content of the file with extension .pub) in the field \u0026ldquo;Key\u0026rdquo;.\nFor more details, you can for instance consult this page.\nHTTPS credentials # If you prefer, you can interact with (most) git hosting services via HTTPS. By default, this requires entering your credentials for each interaction with a remote.\nTo avoid this, you may consider caching your GitHub credentials in Git.\n"},{"id":35,"href":"/docs/build/sections/pom/","title":"Configuration file","section":"Build automation","content":" Configuration file # The Project Object Model (POM) # The root folder of a Maven project normally contains a configuration file called pom.xml. This file provides the information needed to identify and build the project.\nHint. Your IDE can generate the backbone of a pom.xml file (for instance, when creating a Maven project). For a basic Java project, the pom.xml file usually has the following structure:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;!-- Artifact coordinates for the project --\u0026gt; \u0026lt;groupId\u0026gt; XXX \u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt; XXX \u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt; XXX \u0026lt;/version\u0026gt; \u0026lt;!-- Properties of the project --\u0026gt; \u0026lt;properties\u0026gt; ... \u0026lt;/properties\u0026gt; \u0026lt;!-- Dependencies of the project --\u0026gt; \u0026lt;dependencies\u0026gt; ... \u0026lt;/dependencies\u0026gt; \u0026lt;!-- Project build specification --\u0026gt; \u0026lt;build\u0026gt; ... \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; For instance, here is the skeleton of a minimal pom.xml file for a Java 17 project:\n\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;!-- Artifact coordinates for the project --\u0026gt; \u0026lt;groupId\u0026gt;it.unibz.pp-23-24\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;myProject\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;!-- Version of Java and character encoding --\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;!-- No dependency --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!-- No build specification --\u0026gt; \u0026lt;build\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; Parent POM, super POM, effective POM # A POM can inherit properties from a parent POM, via so-called project inheritance. In addition, every POM implicitly inherits from the so-called super POM.\nIn case of conflict, the values specified in the child POM have precedence over those specified in the parent POM (analogously to inheritance of attributes in Java).\nThe effective POM of a project is the one induced by the project\u0026rsquo;s POM and the properties that it inherits from other POMs. To display the effective POM of a project, from the root of this project, run:\nmvn help:effective-pom Note. Inheritance of configuration (where a project-specific or user-specific configuration may partially overwrite a parent configuration) is not specific to Maven, but used by many programs. "},{"id":36,"href":"/docs/recursion/sections/correctness/","title":"Correctness","section":"Recursion","content":" Correctness # To check whether a recursive method is correct, it is (usually) sufficient to check that the two following two properties hold:\n(Base case(s)). The method is correct for the smallest possible inputs.\n(Inductive case). For an arbitrary $n$:\n$\\qquad\\qquad$ if the method is correct for all inputs of size $\\leq n$, then it is correct for all inputs of size $n+1$.\nExample. Consider the algorithm seen earlier to compute the sum of all nodes in a binary tree, if nodes are instance of the following class:\n1 2 3 4 5 6 7 8 int sum(Node root){ // base case if (root == null){ return 0 } // inductive case return root.value + sum(root.leftChild) + sum(root.rightChild) } For the size $n$ of the input, we can use in this example the height of the tree (i.e. the length of its longest branch).\nLet use verify that our two properties hold:\n(Base case). The sum of all labels in an empty tree is 0, so the method is trivially correct.\n(Inductive case). Consider any natural number $n$, and any tree of height $n+1$, with root $r$. And let us assume that the method sum is correct for all trees of height $\\le n$. We need to show that under this assumption, the method is correct for the tree rooted in $r$.\nObserve that the subtrees rooted in r.left and r.right have height $\\le n$. So from our assumption, the two recursive calls (Line 6) to the method sum are correct, meaning that they return the sum of all values in each of the two subtrees. Next, observe that the sum of all labels in our tree must be equal to the sum of all values in these two subtrees, plus the label of $r$. Which is precisely what the method returns. These two properties (1 and 2 above) provide an immediate proof by induction that the method is correct for all inputs.\nProof. Partition the set of all possible inputs by size, i.e. (assuming that inputs in our base case have size 0):\nthe set $S_0$ of all inputs of size $0$, the set $S_1$ of all inputs of size $1$, the set $S_2$ of all inputs of size $2$, etc. In order to show that the method is correct, it is sufficient to show that it is correct for each $S_i$ (where $i \\in \\mathbb{N}$).\nNow let us assume that properties 1 and 2 hold, i.e.:\n(Base case). The method is correct for $S_0$. (Inductive case). For any $n$, $\\qquad\\qquad$ if the method is correct for $S_0 \\cup S_1 \\cup \u0026hellip; \\cup S_n$, then it is correct for $S_{n+1}$.\nWe know that Property 2 holds for an arbitrary $n$. In particular, it holds for $n= 0$. In other words (replacing $n$ with $0$):\nIf the method is correct for $S_0$, then it is correct for $S_1$. So from Properties 1 and 3, we can infer:\nThe method is correct for $S_1$.\n$\\qquad$\nNext, consider the case where $n = 1$. From Property 2 still, we know (replacing $n$ with $1$) that:\nIf the method is correct for $S_0 \\cup S_1$, then it is correct for $S_2$. So from Properties 1 and 4 and 5, we can infer:\nThe method is correct for $S_2$.\n$\\qquad$\netc.\n"},{"id":37,"href":"/docs/intro/sections/evaluation/","title":"Evaluation","section":"This course","content":" Evaluation # Evaluation for this course is based on:\nassignments: up to 30 points, a group project: up to 60 points, and an oral exam: up to 10 points. Your final grade is the sum of the above, multiplied by 0.3.\nAssignments # There will be 8 or 9 assignments for this course. These are standard programming exercises, related to notions seen during the lectures. The labs are (mostly) dedicated to these assignments.\nThe release of each assignment is announced via Teams. You will also find a link to the released assignments on the home page of this site.\nAssignments are submitted via GitHub classroom. You can submit an assignment multiple times (but only before its deadline).\nNote. In order to submit your assignments (and your project), you will need a GitHub account. If you do not have one already, please create one and communicate it to the lecturer, preferably via Teams. Make sure that you use a single GitHub account for all your assignments and your project. Group project # Guidelines for the content of the project are in the dedicated chapter. We focus here on organization and evaluation.\nEach group must consist of 3 to 4 students. Groups should be decided by March 20, and communicated via mail to the lecturer.\nProjects are delivered via GitHub.\nGrades for a project are awarded individually, based on each student\u0026rsquo;s contribution. Students are expected to work on different computers. Make sure that:\neach student uses a different (and only one) GitHub account, and each student commits (via git) his/her own code. The project\u0026rsquo;s code is expected to apply techniques seen during the lectures, but only if relevant. Please do not add artificial functionalities to your project for the sole purpose of illustrating a certain technique.\nOral exam # The oral exam is individual.\nNo revision is needed.\nWe will ask you questions about your code and/or involvement in the project. For instance:\nwhich design choices you made, which difficulties you encountered, the expected behavior of a certain method, how some portions of the code may be improved, etc. "},{"id":38,"href":"/docs/objects/sections/inheritance/","title":"Inheritance","section":"Objects and classes","content":" Inheritance # Subclass # In most (class-based) object-oriented languages, a class A can extend another class B. In this case, A is called a subclass of B. The intuitive meaning is inclusion between their respective sets of instances, i.e. every instance of A is also an instance of B (but the converse may not hold).\nThis can be paraphrased in English by \u0026ldquo;every A is a B \u0026ldquo;. For instance:\nevery banana is a fruit every square is a rectangle every rectangle is a geometric shape, etc. Transitivity # The \u0026ldquo;extend\u0026rdquo; relation is transitive, meaning that if A extends B and B extends C, then A extends C (for any classes A, B and C ). For instance, from the above examples, one can infer that \u0026ldquo;every square is a geometric shape\u0026rdquo;.\nInheritance # Naturally, if A is a subclass of B then it inherits the properties of B. For instance, a rectangle has four right angles. Since every square is a rectangle, a square has four right angles as well.\nFactorizing code with a (possibly abstract) superclass # Inheritance can be used to avoid redundant code\nDirect inheritance: illustration # Let us model the units of our game as objects.\nEach unit has:\na type (e.g. mage, unicorn, etc.), a color (at least in the original game), and a certain amount of health. The behavior and stats of a unit (e.g number of turns before attacking when combined, default health, etc.) are dictated by its type. So it makes sense to group units by type.\nFor instance, one can create a class Unicorn whose instances are all units of type unicorn. In Java:\npublic class Unicorn { String color; int health; int attackCountdown; public Unicorn(String color) { this.color = color; health = 1; attackCountdown = -1; } } Note. We used the keyword attackCountdown in this example to indicate the number of turns before the unit attacks (and a special value of -1 when it is not set to attack). But there are of course other ways to model this. Note. In this example, we used the prefix this. for the attribute color only, because there is no ambiguity for the three other attributes. We can also create a class Butterfly on the same model\npublic class Butterfly { String color; int health; int attackCountdown; public Butterfly(String color) { this.color = color; health = 2; int attackCountdown = -1; } } Now consider a method encounter that manages an encounter between two units. Without inheritance, one would need to implement four versions of this method:\nunicorn vs unicorn, unicorn vs butterfly, butterfly vs unicorn, and butterfly vs butterfly. For instance, the first of these four methods could be implemented as follows:\nvoid encounter(Unicorn u1, Unicorn u2) { // save the initial value of the first unit\u0026#39;s health int copy = u1.health; u1.health -= u2.health; u2.health -= copy; } More generally, if the game has \\(n\\) types of units, then the code will contain \\(n^2\\) nearly identical encounter methods.\nQuestion. Can we use inheritance in this example to avoid duplicate code (and how)? Observe that a unicorn and a butterfly (viewed as object) have identical attributes (a.k.a. \u0026ldquo;keys\u0026rdquo;), namely String color, int health, and int attackCountdown. So we can create a superclass of UnicornandButterflythat carries these attributes, and let the two subclasses inherit it. For instance, this superclass may be called Unit.\nHowever, we may also want every unit in the game to have a concrete type (like \u0026ldquo;unicorn\u0026rdquo; or \u0026ldquo;butterfly\u0026rdquo;), rather than being a generic \u0026ldquo;unit\u0026rdquo;. In Java, this can be achieved with the abstract keyword. This keyword ensures that our superclass cannot be directly instantiated (even though it can still have a constructor). For instance:\npublic abstract class Unit { String color; int health; int attackCountdown; public Unit(String color, int health) { this.color = color; this.health = health; int attackCountdown = -1; } } Because this class is abstract, the following code will not compile:\nUnit myUnit = new Unit(\u0026#34;green\u0026#34;, 2); Next, we can declare that Unicorn extends Unit, by using the Java keyword extends. We can also use the constructor of Unit within the constructor of Unicorn, with the Java keyword super.\nNote. In Java (as opposed to C++ for instance), a class can only have one immediate superclass, so the keyword super is never ambiguous. This yields:\npublic class Unicorn extends Unit { public Unicorn(String color) { super(color, 1); } } And we can proceed similarly for the class Butterfly.\nObserve that all the attributes are now carried by the superclass Unit. However, because they are inherited, these attributes can be accessed as if they were regular attributes of the subclass. For instance,\nUnicorn myUnit = new Unicorn(\u0026#34;green\u0026#34;); System.out.println(myUnit.health); outputs\n1 This allows us to write a generic encounter method, as follows:\nvoid encounter(Unit u1, Unit u2) { // save the initial value of the first unit\u0026#39;s health int copy = u1.health; u1.health -= u2.health; u2.health -= copy; } And this method can be used with unicorns and/or butterflies. For instance:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;yellow\u0026#34;); encounter(myUnicorn, myButterfly); } Transitive inheritance # In the example above, we assumed that all units have a color and can attack. What if we also want to create a type of unit called Wall that has no color and cannot attack? An instance of this class does not need the attributes color and attackCountdown.\nA quick solution here consists is setting attackCountdown to -1, and color to null. However, unnecessary attributes make code harder to understand, and such a design may not scale well if the game is extended with more units types.\nExercise Modify our model to accommodate for the class Wall, so that an instance of Wall only has the health attribute. Possible solution One solution (among others) is the following:\nmodify the class Unit so that it only carries the attribute health, Wall extends Unit, create an (abstract) subclass of Unit (for instance MobileUnit) that carries the other two attributes, Butterfly and Unicorn extend MobileUnit (therefore they also extend Unit, by transitivity). Or in Java:\npublic abstract class Unit { int health; public Unit(int health) { this.heath = health; } } public class Wall extends Unit { public Wall() { super(5); } } public abstract class MobileUnit extends Unit { String color; int attackCountdown; public MobileUnit(String color, int health) { super(health); this.color = color; this.attackCountdown = -1; } } public class Unicorn extends MobileUnit { public Unicorn(String color) { super(color, 1); } } and similarly for Butterfy.\n"},{"id":39,"href":"/docs/stream/sections/intermediate/","title":"Intermediate operations","section":"Streams in Java","content":" Intermediate operations # In a stream pipeline, an intermediate operation takes a stream and produces another stream.\nStateless operations # A stateless intermediate operation processes each element of the input stream independently.\nfilter and map # The instance methods Stream.filter and Stream.map allows specifying a stateless operation, via a callback method. We have already explained in detail the behavior of these two methods in our initial pipeline example.\nflatMap # Another very useful method is the instance method Stream.flatMap, which can produce several objects out a single object in the stream.\nExample. Consider the following classes City and Region.\nGiven as input a collection of regions, we can use the function flatMap to create a stream that consists of all cities in these regions, as follows:\nregions.stream() .flatMap(r -\u0026gt; r.cities.stream()) For instance, the following method takes as argument a list of regions, and returns the zip codes of all cities in these regions, with the exceptions of the zip code of Bologna:\nList\u0026lt;Integer\u0026gt; allZipCodesButBologna(List\u0026lt;Region\u0026gt; regions) return regions.stream() .flatMap(r -\u0026gt; r.cities.stream()) .filter(c -\u0026gt; !c.name.equals(\u0026#34;Bologna\u0026#34;)) .map(c -\u0026gt; c.zipCode) .toList() Let us assume that the stream has type Stream\u0026lt;$\\mathit{T}$\u0026gt; (for instance, in our example, $\\mathit{T}$ is Region).\nThe method map takes as argument a callback function of type\n$\\qquad T \\to$ Stream\u0026lt;$T\u0026rsquo;$\u0026gt;\nwhere $T\u0026rsquo;$ can be any type.\nIn this example, the callback function is\nr -\u0026gt; r.cities.stream() which has type\n$\\qquad$ Region $\\to$ Stream\u0026lt;City\u0026gt;\nLet us call this function $f$.\nThe method map returns a Stream\u0026lt;$\\mathit{T\u0026rsquo;}$\u0026gt; (e.g. in this example a Stream\u0026lt;City\u0026gt;). This stream is the concatenation of all streams $f(a)$ such that $a$ belongs to the input stream.\n"},{"id":40,"href":"/docs/lambda/sections/lambda/","title":"Lambda expression","section":"Callback methods and lamda expressions","content":" Lambda expression # In certain programming languages like Java, C#, C++ or JavaScript, the term lambda expression (sometimes called closure expression) is used to denote an anonymous method with a certain syntax.\nThe term is a (loose) reference to lambda calculus, a model of computation exclusively based on function composition and application.\nSyntax in Java # A Java method\n\u0026lt;ReturnType\u0026gt; myMethod (\u0026lt;Type 1\u0026gt; \u0026lt;argument 1\u0026gt;, .., \u0026lt;Type n\u0026gt; \u0026lt;argument n\u0026gt;){ \u0026lt;Body\u0026gt; } can be written anonymously as the lambda expression:\n(\u0026lt;Type 1\u0026gt; \u0026lt;argument 1\u0026gt;, .., \u0026lt;Type n\u0026gt; \u0026lt;argument n\u0026gt;) -\u0026gt; { \u0026lt;Body\u0026gt; } For instance, the method:\nint division (int x, int y){ return x / y; } is equivalent to the lambda expression\n(int x, int y) -\u0026gt; { return x / y ; } However, a more concise syntax can often be used:\nArguments # If the types of the arguments can be inferred by the compiler (which is most often the case), then they can be omitted.\nExample.\n(int x, int y) -\u0026gt; { ... } can often be written\n(x, y) -\u0026gt; { ... } If the method has exactly one argument and its type is omitted, then parentheses can also be omitted.\nExample.\n(x) -\u0026gt; { ... } can always be written\nx -\u0026gt; { ... } If the method takes no argument, then parentheses are mandatory.\nExample.\n() -\u0026gt; { ... } Body # If:\nthe body of a lambda expression consists of a single statement, and the return type of this lambda expression (or void if there is none) can be inferred by the compiler (which is most often the case), then the semicolon (;), curly braces ({ and }) and return keyword (if any) can be omitted.\nExample.\n(x, y) -\u0026gt; { return x / y ; } can often be written\n(x, y) -\u0026gt; x / y "},{"id":41,"href":"/docs/objects/","title":"Objects and classes","section":"Docs","content":" Objects and classes # This chapter introduces some basic notions of (class-based) object-oriented programming.\n"},{"id":42,"href":"/docs/regex/sections/java/","title":"Using Java regexes","section":"Regular expressions","content":" Using Java regexes # Escaping \\ # A regex in Java is a string.\nRecall that within a Java string, a \\ character must be escaped (i.e. written \\\\) to be read as a normal character. So in a Java string that represents a regex, every \\ should be written \\\\.\nExample. The string \u0026quot;[A-Z]\\\\d+\u0026quot; represents the regex [A-Z]\\d+ Hint. This is another good reason for using a regex validation tool (e.g. regex101) to test and debug a regex, before incorporating it into a program. Warning. We saw earlier that when \\ is treated as a normal character in a regex, it must be escaped (\\\\). Therefore in this specific case, the Java string should contain \\\\\\\\. Example. The string \u0026quot;\\\\d+\\\\\\\\[A-Z]\u0026quot; represents the regex \\d+\\\\[A-Z] Regexes and String instance methods # Some instance methods of the class String take a regex as input. Among these:\nboolean matches(String regex) returns true iff the whole string belongs to the language described by the regex. Or equivalently if there is a match for the regex ^regex$. String input = \u0026#34;ab\u0026#34;; // Outputs false System.out.println(input.matches(\u0026#34;a\u0026#34;)); // Outputs true System.out.println(input.matches(\u0026#34;ab|a\u0026#34;)); // Outputs true System.out.println(input.matches(\u0026#34;a|ab\u0026#34;)); String replaceFirst(String regex, String replacement) replaces the best first match with the input replacement string: String input = \u0026#34;aba\u0026#34;; // Outputs \u0026#34;ba\u0026#34; System.out.println(input.replaceFirst(\u0026#34;ab|a\u0026#34;, \u0026#34;b\u0026#34;)); // Outputs \u0026#34;bba\u0026#34; System.out.println(input.replaceFirst(\u0026#34;a|ab\u0026#34;, \u0026#34;b\u0026#34;)); String replaceAll(String regex, String replacement) replaces all (successive) best first matches with the input replacement string: String input = \u0026#34;aba\u0026#34;; // Outputs \u0026#34;bb\u0026#34; System.out.println(input.replaceAll(\u0026#34;ab|a\u0026#34;, \u0026#34;b\u0026#34;)); // Outputs \u0026#34;bbb\u0026#34; System.out.println(input.replaceAll(\u0026#34;a|ab\u0026#34;, \u0026#34;b\u0026#34;)); For both replaceFirst and replaceAll, the replacement string can use a reference to a group, written $$n$, where $n$ is the group number:\nString input = \u0026#34;The windows are open. The apples are green.\u0026#34;; String output = input.replaceAll(\u0026#34;(\\\\w+)s\\\\s+are\u0026#34;, \u0026#34;$1 is\u0026#34;); // Outputs \u0026#34;The window is open. The apple is green.\u0026#34; System.out.println(output); Reminder. Strings in Java are immutable. So when the methods replaceFirst and replaceAll successfully \u0026ldquo;modify\u0026rdquo; the string, they return a different object. String[] split() splits the input string around the (successive) best first matches: String input = \u0026#34;This is weird.\\n\u0026#34;+ \u0026#34;Or not.\u0026#34; // Contains [ \u0026#34;This\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;weird.\u0026#34;, \u0026#34;Or\u0026#34;, \u0026#34;not.\u0026#34; ] String[] output = input.split(\u0026#34;\\\\s+\u0026#34;); java.util.regex # The native package java.util.regex contains among other the following classes:\nPattern # A Pattern is a regex.\nA Pattern can be created with the static method Pattern Pattern.compile(Sring regex).\nMatcher # A Matcher is a \u0026ldquo;regex engine\u0026rdquo; for a specific regex and a specific string.\nA Matcher can be created out of a Pattern, with the instance method Matcher matcher(String inputString) of the class Pattern.\nPattern pattern = Pattern.compile(\u0026#34;\\\\d+[a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice787@unibz\u0026#34;); Among others, the class Matcher provides the following instance methods:\nboolean matches(), String replaceFirst() and String replaceAll() behave analogously to their counterpart for the class String, described above.\nboolean find() tries to match the next best first match. If this method succeeds, then information can be retrieved about the matched segment (see below). The next call to find() will find the following best first match (if any).\nPattern pattern = Pattern.compile(\u0026#34;[A-Z][a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); // Outputs true and matches the segment with word \u0026#34;Alice\u0026#34; System.out.println(matcher.find()); // Outputs true and matches the segment with word \u0026#34;Bob\u0026#34; System.out.println(matcher.find()); // Outputs false System.out.println(matcher.find()); String group(int i) returns the substring captured by Group $i$ in the latest match. Group 0 stands for the whole regex.\nString group() is equivalent to group(0).\nint start() returns the start index (included) of the latest matched segment.\nint end() returns the end index (excluded) of the latest matched segment.\nPattern pattern = Pattern.compile(\u0026#34;([A-Z])[a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); //Find the best first match matcher.find(); // Outputs \u0026#34;Alice\u0026#34; System.out.println(matcher.group()); // Outputs \u0026#34;A\u0026#34; System.out.println(matcher.group(1)); // Outputs 0 System.out.println(matcher.start()); // Outputs 5 System.out.println(matcher.end()); //Find the next best first match matcher.find(); // Outputs \u0026#34;Bob\u0026#34; System.out.println(matcher.group()); // Outputs \u0026#34;B\u0026#34; System.out.println(matcher.group(1)); public Sream\u0026lt;MatchResult\u0026gt; results() returns all (successive) best first matches. Pattern pattern = Pattern.compile(\u0026#34;[A-Z][a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); // Contains two match results: // - one for the segment with word \u0026#34;Alice\u0026#34;, // - one for the segment with word \u0026#34;Bob\u0026#34; List\u0026lt;MatchResult\u0026gt; matches = matcher.results().toList(); MatchResult # A MatchResult is a matched segment.\nThe class MatchResult provides (among others) the instance methods String group(int i), String group(), int start() and int end(), which behave analogously to their counterparts in the class Matcher.\nPattern pattern = Pattern.compile(\u0026#34;[A-Z][a-z]*\u0026#34;); Matcher matcher = pattern.matcher(\u0026#34;Alice and Bob are exhausted.\u0026#34;); // Get all best first matches List\u0026lt;MatchResult\u0026gt; matches = matcher.results().toList(); // Outputs \u0026#34;Alice\u0026#34; System.out.println(matches.get(0).group()); // Outputs \u0026#34;Bob\u0026#34; System.out.println(matches.get(1).group()); "},{"id":43,"href":"/docs/build/sections/artifact/","title":"Artifact","section":"Build automation","content":" Artifact # A Maven artifact is the output of a build process. It can for instance be a jar. Coordinates # A Maven artifact is identified by so-called coordinates:\ngroupId: identifier of the organization that created the project (this is usually the organization\u0026rsquo;s reversed domain name), artifactId: identifier of the project within the group, version: version of the artifact. Examples.\n\u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;33.1.0-jre\u0026lt;/version\u0026gt; \u0026lt;groupId\u0026gt;com.github.haifengl\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;smile-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; These coordinates are notably used to declare dependencies.\nVersions # SemVer # Maven artifact versions often follow (or loosely follow) the so-called semantic versioning scheme.\nMajorVersion.MinorVersion or\nMajorVersion.MinorVersion.Patch Example. According to the SemVer scheme, Version 3.4.1 means:\nmajor version: 3 minor version: 4 patch: 1 By convention:\na new major version often signals the absence of backward compatibility, a new minor version often signals (backward compatible) new features, a patch often signals bug (or security-related) fixes. Note. Java has only one major version. For instance \u0026ldquo;Java 17\u0026rdquo; actually refers to Java 1.17. SNAPSHOT # The SNAPSHOT qualifier (e.g. in Version 3.4.1-SNAPSHOT) indicates an upcoming release, still under development. The SNAPSHOT qualifier is typically used to describe the (current state of) the source code of (a git branch of) a project (e.g. available as a public git repository). For instance, if the latest release of the project was 3.5.2, and if the developers are working on bug fixes, then the latest source code may have Version 3.5.3-SNAPSHOT.\nWarning. A program whose version number has the SNAPSHOT qualifier may be modified by it authors, while keeping the same version number. In other words, Version 3.4.1-SNAPSHOT downloaded today may differ from Version 3.4.1-SNAPSHOT downloaded tomorrow. So when releasing a project, it is recommended to avoid dependencies on SNAPSHOT versions. "},{"id":44,"href":"/docs/errors/sections/checked/","title":"Checked vs unchecked","section":"Errors","content":" Checked vs unchecked # Unchecked exceptions # The simplest type of exception in Java is called an unchecked exception. An unchecked exception is an instances of the native class RuntimeException.\nThe class RuntimeException has several native subclasses. You may be familiar wit some of them: NullPointerException, ArrayIndexOutOfBoundsException, IllegalArgumentException, etc.\nAn unchecked exception that is not caught is automatically rethrown. Checked exceptions # In Java, an Exception that is not a RuntimeException is a checked exception.\nFor instance, an IOException is a checked exception.\nA checked exception is not rethrown by default. Instead, it must be explicitly rethrown (or caught), otherwise the program does not compile. For instance, the following code does not compile, because the method of Files.readAllLines may throw an IOException.\nvoid someMethod(Path path) { Files.readAllLines(path); } Rethrow explicitly # This can be fixed by either catching the exception, or explicitly rethrowing it, as follows:\nvoid someMethod(Path path) throws IOException { Files.readAllLines(path); } Then a method that calls myMethod will in turn have to catch the exception, or rethrow it explicitly, etc.\nWarning. Checked exceptions add boilerplate code to method signatures (e.g. throws IOException in the above example). For this reason, it is often recommended to use unchecked exceptions (i.e. instances of RuntimeException) by default. In Effective java (Item 71), Joshua Bloch suggests checked exceptions only if some calling method is likely to catch the exception and take a meaningful action when this happens. "},{"id":45,"href":"/docs/input/sections/property/","title":"Configuration files","section":"I/O and serialization","content":" Configuration files # It is common practice for an application to store parameters (e.g. user-specific settings) in configuration files.\nA configuration file may be edited manually and/or via a graphical interface.\nConfiguration files may use different serialization formats. Some popular formats are INI, JSON, TOML, YAML or XML.\nin Java # Java provides native support for at least two configuration file serialization formats: XML and the so-called \u0026ldquo;property file\u0026rdquo; format.\nWe introduce here the latter.\nA property file usually:\nhas extension .properties, may have commented line (starting with # or !), contains one key=value pair per (non-commented) line. Example. In our game, the file config.properties has two key=value pairs:\nanimationDuration=1 resolution=1920x1080 More details about the syntax of property files (escaped characters, spaces, etc.) can be found here.\nReading a property file # The content of a property file can be loaded in memory and modified as an associative array , instance of the class Properties (which extends Map).\nFor instance, the content of a property file can be loaded as follows:\nProperties properties = new Properties(); try { properties.load(new FileInputStream(\u0026#34;path/to/config.properties\u0026#34;)); } catch (IOException e) { throw new RuntimeException(e); } Then a value can be read with the method getProperty (among other possibilities), as follows:\nString resolution = properties.getProperty(\u0026#34;resolution\u0026#34;); float duration = Float.parseFloat(properties.getProperty(\u0026#34;animationDuration\u0026#34;)); Writing to a property file # The content of a property file can be modified with the methods setProperty and store (among other possibilities), as follows:\nString path = \u0026#34;path/to/config.properties\u0026#34;; Properties properties = new Properties(); try { // load the file as an associative array properties.load(new FileInputStream(path)); // modify the associative array properties.setProperty(\u0026#34;animationDuration\u0026#34;, Float.toString(0.5f)); // replace the content of the property file with the // content of the associative array properties.store(new FileOutputStream(path)); } catch (IOException e) { throw new RuntimeException(e); } "},{"id":46,"href":"/docs/intro/sections/content/","title":"Content","section":"This course","content":" Content of the course # This is a beginner\u0026rsquo;s course on imperative and (class-based) object oriented programming, with an emphasis on practice and collaboration.\nThe course relies on Java as main programming language. However, many concepts seen in this course are relevant to other (imperative and/or object-oriented) programming languages: C/C++, C#, Javascript, Go, Kotlin, Lua, Perl, PHP, Python, Rust, Ruby, Typescript, Visual Basic, etc.\nPrerequisites # Students are expected to have completed the Computer Programming course (INF/01 76258).\nTherefore the following topics are not covered in this course:\nvariables, assignments, variable scope, basic data types, conditional statements (\u0026ldquo;if/then/else\u0026rdquo;) and loops, expression evaluation, methods/functions, arrays, etc. Students are also expected to have played the board game used as a running example throughout the lectures.\nOutcomes # After completing this course, students should be able to:\ndevelop a prototype application in Java, write structured, documented and easily maintainable code, collaborate with other developers. Focus # Foundations # Most lectures put an emphasis on problem solving rather than syntax. For conciseness, pseudocode may be used in some sections rather than Java code.\nSome lectures also focus on more abstract (albeit simple) notions. These includes elementary mathematical objects or structures (set, tuple, map, relation, preorder, graph, tree, etc.), recursion, boolean logic, regular languages, etc.\nThe purpose is twofold:\nease the application of techniques seen in this course to programming languages other than Java, provide a widely accepted vocabulary to document/explain your code. Collaboration # The course introduces basic coding practices that facilitate development within a team. In particular:\nstructuring a project (components, interfaces, encapsulation, etc.), factorizing code (inheritance, reuse of methods, etc.), test-driven development, collaboration via git, documentation. Note. What is considered good communication in computer science may differ from other disciplines. Emphasis is put on clarity, precision and conciseness. Exercise Here is a (caricature of) a poorly documented method. Can you improve the method\u0026rsquo;s description and/or signature?\n/** The algorithm looks at the first collection, and is only guaranteed to * work if no number is present twice in this collection, in which case it * loops over the numbers contained in this collection (in no specific order) * and checks for each number whether it is also present in the second * collection (which is also expected to have distinct numbers). The code * written in this loop adds the current number (from the first collection) * to the output collection if this number is also present in the second * collection, and does nothing otherwise. */ Collection\u0026lt;Integer\u0026gt; filterNumbersThatAreShared(Collection\u0026lt;Integer\u0026gt; c1, Collection\u0026lt;Integer\u0026gt; c2); Solution A simpler signature and description could be:\n/** * Returns the intersection of sets s1 and s2. */ Set\u0026lt;Integer\u0026gt; intersection(Set\u0026lt;Integer\u0026gt; s1, Set\u0026lt;Integer\u0026gt; s2); However, the following topics are beyond the scope of this course:\ncontinuous integration, project management (agile methodology, bug tracking, etc.), advanced git workflows, advanced design patterns, dependency injection, etc. Quizzes # Some lectures will include quizzes. These are anonymous, and therefore are not part of your evaluation. The purpose is to:\nmake lectures more interactive and adapt the pace of the lectures based on students\u0026rsquo; answers. It is in your own interest to answer them without external resources (web, chatbots, IDE, etc.).\nHere is a link to the first quiz: https://forms.gle/7Y2MpzE7v5xzUJFy7.\nTopics covered # Due to limited time, many notions (such as asymptotic cost, regular languages, hashmaps or multi-threading) are only briefly introduced in this course. However, some of them will be further discussed in other courses of the bachelor.\nProgramming concepts and techniques # An important part of the lectures is dedicated to the following core topics:\nobjects, classes and interfaces (inheritance, encapsulation, value vs reference, comparing objects, cloning objects, etc.), abstract data types (set, list, map, queue, etc.) and data structures (arrays, linked lists, hashmaps, heaps, etc.), recursion. In addition, the following will be (briefly) introduced:\nregular expressions, generics, mutability, pure functions, lambda expressions and streams, multi-threading. Note. Some of these topics pertain to functional programming, but have been incorporated (in some form) to several imperative languages over the years. Software engineering # unit tests, exceptions, code factorization, object-oriented design (basic design patterns). Java # compilation/interpretation, bytecode, JVM and JDK, memory (stack VS heap), garbage collection, input/output, object serialization, JSON/XML serialization. Tools and tutorials # git, build automation (Maven and Gradle), using an IDE efficiently (navigation, debugging, autocompletion, etc.), using a terminal efficiently (introduction), etc. "},{"id":47,"href":"/docs/git/sections/create/","title":"Create or clone a repository","section":"git","content":" Create or clone a repository # From a remote server # The most common way to create a repository is to create the remote copy first, using the web interface of your host (Github, Gitlab, Bitbucket, etc.).\nYou will be asked to give the repository a name. Then you will be provided an address that allows use to clone the repository on your own machine (via ssh or https).\nTo do so, navigate on your machine to the folder where you want to clone the repository, and run\ngit clone \u0026lt;address\u0026gt; Note. After cloning a repository, you can verify that it contains a (hidden) subfolder called .git. Recall that this is what distinguishes a git repository from a regular folder. Note. You can safely move a cloned repository to another location on your machine (as long as it contains the .git subfolder). With the same command, you can clone any public repository that you find online (e.g. hosted on GitHub).\nTo clone a specific branch, run\ngit clone -b \u0026lt;branchName\u0026gt; \u0026lt;address\u0026gt; Locally # Alternatively, you can create a git repository on your machine with the git init command. This may be convenient if you want to create a git repository from an existing (nonempty) folder.\nIf you create a git repository locally, then you will need to declare your remote(s) manually (with git remote).\n"},{"id":48,"href":"/docs/objects/sections/methods/","title":"Instance methods","section":"Objects and classes","content":" Instance methods # In most object-oriented languages (like Java), methods are implemented within class declarations.\nAn instance method can only be called using an instance of the class where it is declared.\nFor instance, in Java, an instance method declared in MyClass can be called by appending . to a variable of type MyClass. The object referenced by the variable is accessible in the method, as well as its attributes.\nThis intuitively allows us to write methods with one less argument. For instance, consider the following method, which is not and instance method. It verifies whether two instance of MobileUnit have the same color:\npublic boolean sameColor(MobileUnit u1, MobileUnit u2){ return u1.color.equals(u2.color); } This method may be called as follows:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;green\u0026#34;); boolean sameColor = sameColor(myUnicorn, myButterfly); Instead, one may write an equivalent method, as an instance method of our class MobileUnit, with one less argument:\npublic abstract class MobileUnit extends Unit { String color; ... public boolean sameColorAs(MobileUnit otherUnit){ return color.equals(otherUnit.color); } } and we can call this method as follows:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;green\u0026#34;); boolean sameColor = myUnicorn.sameColorAs(myButterfly); } Overriding # A same instance method can be declared in a class C and a subclass S or C. In this case, we say that S overrides the method.\nWhen such a method is called, the most specific applicable version is executed.\nFor instance, let us extend our example from the previous section with a method regen, declared in both Unit and MobileUnit, as follows:\npublic abstract class Unit { int health; ... public void regen(){ if(health \u0026lt; 10){ health += 1; } } } public abstract class MobileUnit extends Unit { ... public void regen(){ if(health \u0026lt; 10){ health += 1; } health += 1; } } Now consider this program.\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); myUnicorn.regen(); This program increases the health of (the object referenced by) myUnicorn by 2, because Unicorn is a subclass of MobileUnit. However, the following program increases the health of (the object referenced by) myWall by 1, because Wall is a subclass of Unit, but not a subclass of MobileUnit.\nWall myWall = new Wall(); myWall.regen(); Hint. In Java, you can use the annotation @Override to indicate that a method overrides another, as follows:\npublic abstract class MobileUnit extends Unit { ... @Override public void regen(){ if(health \u0026lt; 10){ health += 1; } health += 1; } } This is not necessary. The benefit is that the program will not compile if the overridden and overriding methods have different signatures.\nMore generally, syntactic mistakes (a.k.a. compile time errors) are easier to fix than bugs (a.k.a. runtime errors). So when possible, it is good practice to use features of a language that prevent compilation if incorrect programs. This is why debugging in an untyped language (like Python, Javascript, Lua, etc.) can be more difficult than in a typed one (such as Java, C#, Typescript, etc.).\nDynamic dispatch (a.k.a. runtime polymorphism) # Dynamic dispatch consists in determining which version of a method must be called when a program is executed (a.k.a. \u0026ldquo;at run time\u0026rdquo;), when this cannot be determined by analyzing the program alone. This is a feature of most (class-based) object-oriented languages. For instance, in our example, assume a method generateRandomUnits that generates a random array of units (butterflies, unicorns or walls). And let us call the method regen for each unit in this array:\nUnit[] ramdomUnits = generateRandomUnits(); for (Unit unit: randomUnits){ unit.regen(); } The most specific applicable version of the method regen will be executed for each unit, based on its type, even though this type cannot be determined at compile time. For instance, if there is an instance of Unicorn in this array, then the method MobileUnit.regen() will be executed for this instance (rather than the method Unit.regen()).\nCode factorization # An overriding method often extends the functionality of the overridden one. This is a possible source of duplicate code. For instance, in the example above, both implementations of regen() contain:\nif(health \u0026lt; 10){ health += 1; } A common way to factorize this consists in calling the overridden method inside the overriding one. In Java, the keyword super allows us to distinguish the two methods (since they have the same name). For instance, in the above example, the overriding method may be better written as follows:\npublic abstract class MobileUnit extends Unit { ... public void regen() { super.regen(); health += 1; } } Exercise In this example, what would be the effect of replacing super.regen() with regen()? Solution The method would not terminate. Exercise Consider the method encounter of the previous section. Add it as an instance method to our example, so that:\nthe method now distinguishes the attacker from the defender, a wall cannot attack, a unicorn gets a regen if it defends. Possible solution The trick here consists in viewing an encounter from the point of view of the defender:\npublic abstract class Unit { int health; ... public void defend(MobileUnit attacker) { // save the initial value of the first unit\u0026#39;s health int copy = health; health -= attacker.health; attacker.health -= copy; } } public class Unicorn extends Unit { ... public void defend(MobileUnit attacker) { regen(); super.defend(attacker); } } "},{"id":49,"href":"/docs/interfaces/","title":"Interfaces","section":"Docs","content":" Interfaces # The term interface is used to refer to a variety of artifacts. For instance (in computer science alone): (graphical) user interface, command-line interface, Application Programming Interface (API), hardware interfaces, etc.\nWhat do these have in common?\nOne may think of an interface as a set of conventions adopted by two \u0026ldquo;agents\u0026rdquo; (human being, program, \u0026hellip;) to communicate. For instance:\nif Alice sends a message to Bob, then she has to use a language that Bob can understand, if Alice uses git via command-line, then she has to use a command that git recognizes as a possible input, if a program calls git, then it also has to use a command that git recognizes as a possible input, etc. Warning. A program interface usually specifies communication in one direction only. So when two programs communicate, they may use different interfaces, one in each direction (a rough analogy could be communication between a human being and a dog). "},{"id":50,"href":"/docs/background/sections/order/","title":"Relation, preorder","section":"Background","content":" Relation, preorder # Relation # Definition. A relation over a set $S$ is a set of tuples over $S$ with the same arity. In particular:\na binary relation over $S$ is a set of pairs, or equivalently a subset of $S \\times S$, a ternary relation over $S$ is a set of triples, or equivalently a subset of $S \\times S \\times S$, etc. For instance, if \\(S = \\{a,b,c,d\\}\\) , then\n\\(\\Big\\{ (a,a),\\ (a,b),\\ (b,a),\\ (b,c) \\Big\\}\\) is a binary relation over \\(S\\) ,\n\\(\\Big\\{ (a,b,a),\\ (c,c,c) \\Big\\}\\) is a ternary relation over \\(S\\) .\nExercise If $S$ is finite with size $n$, then how many $k$-ary relations are there over $S$? Solution A $k$-ary relation over $S$ is a subset of $S^k$.\nSo there are $2^{|S^k|} = 2^{n^k}$ $k$-ary relations over $S$.\nBinary relation # A binary relation can be represented in multiple ways.\nIn particular, it can be represented as a (directed) graph (and conversely).\nFor instance, the relation \\(\\Big\\{ (a,a),\\ (a,b),\\ (b,a),\\ (b,c) \\Big\\}\\) over \\(\\{a,b,c,d\\}\\) can be viewed as the graph:\nA binary relation can also be represented with an infix symbol.\nFor instance, the same relation \\(\\Big\\{ (a,a),\\ (a,b),\\ (b,a),\\ (b,c) \\Big\\}\\) can be represented as\n\\(a \\preceq a\\) ,\n\\(a \\preceq b\\) ,\n\\(b \\preceq a\\) ,\n\\(b \\preceq c\\) .\nReflexivity, transitivity, antisymmetry # Definition. A binary relation $\\preceq$ over a set $S$ is\nreflexive if $x \\preceq x$ for all $x \\in S$ transitive if for all $x, y, z \\in S$ $\\qquad \\qquad \\qquad x \\preceq y$ and $y \\preceq z$ imply $x \\preceq z$\nantisymmetric if for all $x, y \\in S$ $\\qquad \\qquad \\qquad x \\preceq y$ and $y \\preceq x$ imply $x = y$\nExercise Which of these three properties does the relation below satisfy?\nSolution Only reflexivity. Preorder, order # Definition. A binary relation is a preorder if it is reflexive and transitive. It is an order if it is also antisymmetric. Total vs partial # Definition. A preorder $\\preceq$ over $S$ is total if every two elements of $S$ are comparable, i.e. if\n$ \\qquad \\qquad x \\preceq y$ or $y \\preceq x$ for all $x, y \\in S$.\nA preoder that is not total is called partial.\nExample. The natural order $\\le$ over $\\mathbb{R}$ is a total order (i.e. total, reflexive, transitive and antisymmetric). Example. If $S$ is a set, then the set inclusion relation $\\subseteq$ over the power set of $S$ is a partial order (i.e. reflexive, transitive and antisymmetric). Warning. The term \u0026ldquo;order\u0026rdquo; is often used to refer to a total order. Sorting # If \\(S\\) is a set, then a total preorder over \\(S\\) is intuitively any relation that allows sorting \\(S\\) .\nExample. Let $P$ be the set of people, and let $\\preceq_{\\text{age}}$ be the relation defined over $P$ by\n$\\qquad \\qquad p_1 \\preceq_{\\text{age}} p_2$ iff $p_1$ is younger than (or as old as) $p_2$.\nThen $\\preceq_{\\text{age}}$ is a total preorder (i.e. total, reflexive and transitive), but it is not an order (i.e. not antisymmetric), because two persons can have the same age.\nLexicographic product # Notation. If $\\preceq_o$ is a preorder, let us use:\n$x \\prec_o y$ as a shortcut for ($ x \\preceq_o y$ and $ y \\not\\preceq_o x$ ), $x =_o y$ as a shortcut for ($x \\preceq_o y$ and $y \\preceq_o x$ ). Definition. The lexicographic product $\\preceq_{1,2}$ of a preorder $\\preceq_1$ by a preorder $\\preceq_2$ is defined by\n$\\qquad \\qquad x \\preceq_{1,2} y$ iff $x \\prec_1 y$ or ( $x =_1 y$ and $x \\preceq_2 y$ )\nExample. Let $P$ be the set of people, and let $\\preceq_{\\text{age}}$ and $\\preceq_{\\text{size}}$ be the total preorders defined over $S$ by\n$\\qquad \\qquad p_1 \\preceq_{\\text{age}} p_2$ iff $p_1$ is younger than (or as old as) $p_2$, and\n$\\qquad \\qquad p_1 \\preceq_{\\text{size}} p_2$ iff $p_1$ is smaller than (or as tall as) $p_2$.\nThen the lexicographic product $\\preceq_{\\text{age, size}}$ of $\\preceq_{\\text{age}}$ by $\\preceq_{\\text{size}}$ is defined by\n$\\qquad p_1 \\preceq_{\\text{age, size}} p_2$ iff\n$\\qquad \\qquad p_1$ is strictly younger than $p_2$, or\n$\\qquad \\qquad$ they have the same age and $p_1$ is smaller than (or as tall as) $p_2$.\nWarning. The lexicographic product of $\\preceq_1$ by $\\preceq_2$ may differ from the lexicographic product of $\\preceq_2$ by $\\preceq_1$. Hint. The lexicographic product of a total preorder by a total preorder (resp. a total order) is itself a total preorder (resp. a total order). "},{"id":51,"href":"/docs/env/sections/install/","title":"Software management","section":"Development environment","content":" Software management # Dependencies # As a developer, you frequently need to download, install and/or update:\nlibraries used in your projects (called dependencies), core programming utilities, such as a compiler or interpreter for a given programming language, a package manager, etc. tools for software development: editor, debugger, visualization tool, etc. These programs have their own dependencies, that have their own dependencies, etc. And two programs may depend on different versions of a same third program.\nDependency management is a frequent source of complications during software development. Dependency patterns that may occur include:\nco-dependencies:\nFor instance, consider the following configuration:\nProject \\(P\\) depends on a certain version of Library \\(L_1\\) , \\(P\\) also depends on Library \\(L_2\\) , which depends on an older version of \\(L_1\\) (and the two versions are not compatible), The build of project \\(P\\) may fail because it can contain only one version of \\(L_1\\) .\ncyclic dependencies:\nLibrary \\(L_1\\) depends on a specific version of Library \\(L_2\\) , and\n\\(L_2\\) depends on a specific version of \\(L_1\\) .\nUpgrading one of these two libraries independently may prevent the other one to run. But it may be possible to upgrade both at the same time.\netc.\nNote that in these two examples, dependencies may be direct or transitive. As a result, it can be very difficult to diagnose such problems.\nThe term dependency hell is sometimes used to refer to such situations.\nTwo (non-exclusive) broad approaches are commonly adopted to avoid such issues:\nautomated dependency management, and self-containment: avoid shared libraries, each program having a copy (some of) its own dependencies. Automated dependency management # Definitions # A package is a program together with some metadata. These metadata include the program\u0026rsquo;s name, version, release date, authors, licence and dependencies (together with their versions).\nA software repository is a collection of packages that comply to the same format of metadata. A software repository (precisely, multiple copies of it) is generally hosted on the cloud.\nA package manager automates the installation (as well as configuration, update and removal) of packages from a software repository (or several) to a user\u0026rsquo;s machine.\nExamples # Many programming languages have dedicated package managers. For instance:\nMaven for Java, npm for Node.js (Javascript) pip for Python, NuGet for .NET (C#, F#, and Visual Basic) RubyGems for Ruby, CPAN for Perl CRAN for R, etc. Some applications also have dedicated software repositories for plugins (and plugin managers to handle these plugins). For instance.\nThe VSCode market place, CTAN for LateX, MELPA for Emacs, etc. Other applications (such as zsh, vim or neovim) only have plugin managers, without a centralized software repository. These managers install plugins directly from hosts (e.g. a GitHub repository) specified by the plugins\u0026rsquo; authors.\nLast (but not least), an operating system (OS) may use a package manager and software repositories. Notably, this is the preferred way of installing software on most Linux distributions. Widely used OS package managers include:\napt for Debian and derivatives, dnf for Fedora and derivatives, pacman for Arch and derivatives, homebrew for macOS, chocolatey (since 2011) and winget (since May 2021) for Windows. Usage # Installing, updating and removing software via a package manager is highly recommended in most scenarios. In particular:\ndependencies of a package are also installed (or it some cases updated or removed) transitively, some package managers can install and manage several versions of the same package (when needed), the installation process often uses a default configuration and directory layout (environment variables, etc.) that facilitates interaction with other programs. The installation (or update or removal) procedure is also significantly simpler, thus leaving less room for manual errors. As an illustration, here is the full procedure to install Maven with the apt package manager (on Debian and derivatives):\napt install maven and similarly with homebrew (on macOS):\nbrew install maven or with Chocolatey (on Windows):\nchoco install maven In comparison, the procedure to install Maven manually on Windows is more involved, thus more likely to introduce errors (trough inadvertence, or by following outdated instructions).\nHowever, in some (rare) scenarios, a manual installation may be preferred. In particular when the latest version of a program is needed, but not available yet on the software repository.\nSelf-containment # A variety of strategies can be adopted to build a program so that it runs in partial isolation from the rest of the system that it is deployed on (i.e. in its own environment, and with its own dependencies, that cannot be used by other programs).\nFor instance, a Node.js project often includes a copy of all the Javascript libraries that it depends on (transitively). Further self-containment strategies may involve different levels of virtualization (e.g. via Docker).\nThis is one way of avoiding shared dependencies. Other benefits are increased portability, and ease of installation by end-users. Drawbacks include and increased workload on the developer\u0026rsquo;s side (e.g. for maintenance), and limited opportunities for integration with other programs.\nSelf-containment in Java # In Java, self-containment is usually less pronounced during development. Java libraries are typically managed via Maven:\non a per-user basis (which can be viewed as a compromise between per-project and system-wise): each user has a hidden folder \u0026lt;homeDir\u0026gt;/.m2/ that contains all Java libraries used in his/her projects, and allowing multiple versions of the same library to coexist. However, a Java application that targets non-developers can be released together with its Java dependencies, as a so-called über jar (a.k.a. fat jar).\n"},{"id":52,"href":"/docs/abstractdatatypes/sections/queue/","title":"Stack, queue, priority queue","section":"Abstract data types","content":" Stack, queue, priority queue # Some abstract data types impose strong limitations on the set of operations allowed on a collection. These limitations provide opportunities for specialized implementations (i.e. specialized data structures), which can be very efficient in some contexts.\nStack # A stack (or Last In First Out queue or LIFO queue) simulates a collection organized as a physical stack (for instance a stack of plates). A stack exposes three main methods:\npush adds an element to the collection, pop removes and returns the most recently added element, isEmpty is self-explanatory. Queue # A queue (or First In First Out queue or FIFO queue) simulates a collection organized as physical queue (for instance a waiting line). A queue exposes three main methods:\nenqueue (or add) adds an element to the end of the queue, dequeue (or poll) removes and returns the earliest enqueued element, isEmpty is self-explanatory. Priority queue # A priority queue simulates a collection equipped with a total preorder, so that only (one of) the element(s) with highest priority can be retrieved. A priority queue exposes three main methods:\ninsert adds an element to the collection, getMaximumElement removes and returns an element with highest priority, isEmpty is self-explanatory. Note. A regular queue can be viewed as a specific case of priority queue, where each inserted element has (strictly) lower priority than the previous one. "},{"id":53,"href":"/docs/abstractdatatypes/","title":"Abstract data types","section":"Docs","content":" Abstract data types # An abstract data type (ADT) is a programming interface to access and manipulate a collection of elements. For instance, a queue is an ADT that mimics the behavior of a \u0026ldquo;first come first served\u0026rdquo; queue (e.g. a waiting line at a post office). This interface typically exposes three methods:\none that checks whether the queue is empty, one that takes as input an element and adds it to the end of the queue, one that removes the first element of the queue and returns it. An ADT may have several implementations. For instance, a queue may be implemented as an array or as a linked list (among others). Each implementation may have advantages and drawbacks (in terms of performance, memory footprint, parallelization opportunities, etc.) for different tasks (reading, writing, etc.).\nA data structure (e.g. an array, a linked list, a hash map, etc.) is not an ADT, but a (concrete) way to store a collection of elements (values, objects, etc.) in memory. However, a data structure can implement one or several ADT(s). Some ADTs correspond to basic mathematical objects (set, tuple, function, etc.), and are therefore easy to understand and manipulate. They allow you to easily write code that is correct, but may be inefficient if you do not have a good understanding of underlying (concrete) data structure.\nAnother benefit of ADTs is that they can make your code significantly easier to read (thus requiring less documentation). For instance, if your program manipulates a collection of objects without duplicates and whose order is irrelevant, then you can simply use the Java interface Set, which is self-explanatory.\nin Java # Generic types # An ADT in Java is usually a parameterized type, meaning that it has one or several types as parameter.\nFor instance, a set of strings in Java has type Set\u0026lt;String\u0026gt;.\nNote. In Java, a primitive type (like int or bool) cannot be used as a type parameter, but a boxed type (like Integer or Boolean) can. For instance, the type Set\u0026lt;Integer\u0026gt; is valid. The interface Collection # In Java, many ADTs and data structures extend or implement the interface Collection (the only exception in this chapter is Map).\nAmong others, the interface Collection specifies the following methods (if E is the type of the elements in the collection):\nint size() boolean add(E e) boolean contains(Object o) boolean isEmpty() boolean remove(E e), etc. Warning. Some of these methods are so-called \u0026ldquo;optional operations\u0026rdquo;, meaning that they may not be available for some implementations of Collection. Like an array, a collection can be iterated over, for instance with a \u0026ldquo;foreach\u0026rdquo;-like loop:\nfor (E element: myCollection){ ... } Another way to iterate over a collection consists in using an iterator.\nWarning. Some collections (e.g. some implementations of the subinterface Set) do not offer any guarantee on the order of their elements! External libraries # Some external libraries provide additional implementations of Java\u0026rsquo;s ADTs.\nFor instance, Java has 19 native implementations of the ADT Map (e.g. HashMap,TreeMap, etc.). But Guava provides additional ones, like ImmutableMap, HashBiMap, etc.\n"},{"id":54,"href":"/docs/git/sections/commit/","title":"Add, commit, stash","section":"git","content":" Add, commit, stash # Staging files # Git lets you to choose which modifications will be part of your next commit.\nFirst, run\ngit status This will show which files have been added or modified since the last commit on the current branch (if any). In order to add (some of) these files to the next commit, you need to stage them.\nIf you want to stage all these files, from the root of the repository, run\ngit add . Hint. You can create a .gitignore file to indicate files of folders that should never be staged.\nThis allows you to use git add . without staging by accident compiled files, IDE-generated files, etc.\nAlternatively, to stage a specific file, run\ngit add \u0026lt;relative/path/to/file\u0026gt; At any moment, you can check which files have been staged with\ngit status You can also unstage all staged files with\ngit reset . And unstage a single file with\ngit reset \u0026lt;relative/path/to/file\u0026gt; Commit # Once you have staged your file, you can commit with\ngit commit -m \u0026#34;\u0026lt;commit message\u0026gt;\u0026#34; If you do not add the -m \u0026quot;\u0026lt;myMessage\u0026gt;\u0026quot; option to your command, then git will open a text editor where you can type a commit message. If this happens, then type your commit message, save and close the file.\nWarning. By default, on most operating systems, git opens vi as a text editor. I you have never used vi, we recommend selecting another default text editor. Stash # git stash temporarily reverts all modifications made to your repository since the last commit.\nTo apply them back, run\ngit stash pop "},{"id":55,"href":"/docs/intro/sections/board_game/","title":"Board game","section":"This course","content":" Board game # In order to follow this course, you will need to play one of the two following video games:\nMight \u0026amp; Magic: Clash of Heroes, or Legend of Solgard. These two games have very similar mechanics. So by default, we will refer to them as a unique game (e.g. when we write \u0026ldquo;this game\u0026rdquo; or \u0026ldquo;our board game\u0026rdquo;).\nWhy this game # Turn-based board games (like chess, go, checkers, etc.) are traditionally a good playground to learn the basics of algorithmic thinking.\nDisclaimer. This course is not about video game development, but general-purpose programming. This game will only serve as didactic support. Precisely, this game will serve two purposes:\nwe will use it as a running example throughout the lectures, and you can choose to implement (your own version of) this game as your project By default, we will focus on the two player variant, where both players play by the same rules. These two players may be humans and/or bots.\nHow long do I need to play # You only need to play long enough to get a reasonable understanding of the mechanics of the game.\n1.5 to 2 hours should be sufficient.\nWarning. In both games, mechanics are introduced gradually, so you are unlikely to get a full overview by playing less than an hour. Which game to choose # Might and Magic clash of heroes (MMCoH) # This game was initially released in 2009 for Nintendo DS. It has then been ported to PC and several consoles, as well as Android and iOS.\nA free demo was available on Steam until July 2023. Unfortunately, the game has been re-released since, by another editor (as a so-called \u0026ldquo;definitive edition\u0026rdquo;). As a result, the demo is not available on Steam anymore.\nThe Android and iOS versions have also been removed from the Google Play store and App store respectively.\nAdvantages.\nThe mechanics of this game may be easier to understand (in a short amount of time). The default mode is the (symmetric) 2 player mode (player vs bot or player vs player) that we will work on. Drawbacks.\nThe touch-screen interface on Android and iOS is arguably dated. Legend of Solgard # This game was released in 2016 for Android and iOS. It is still available on the Google Play store and the App store.\nIt is free to play, with optional microtransactions (via so-called loot boxes).\nWarning. For this course, you do not need to perform any transaction. Advantages.\nAnimations can be sped up. The touch-screen interface is more modern than the one of MMCoH for Android and iOS. Drawbacks.\nProgression is based on a (complex) system of virtual currencies, which may add noise to the interface. The game can only be played (for free) a limited amount of time per day (approximately 45 min). The default mode is not the (symmetric) 2 players mode that we will work on (it requires more playtime to be unlocked). So you will need an extra effort of imagination. "},{"id":56,"href":"/docs/errors/sections/custom/","title":"Custom exceptions","section":"Errors","content":" Custom exception # Custom exceptions can be created by extending one of Java\u0026rsquo;s native exception types. For instance:\npublic class WrongNumberOfRowsException extends IllegalArgumentException { public WrongNumberOfRowsException(int numberOfRows) { super(\u0026#34;This sudoku grid has \u0026#34;+numberOfRows+\u0026#34; rows, whereas it should have 9\u0026#34;). } } A custom exception can be thrown like a regular one:\nif(sudokuGrid.length != 9){ throw new WrongNumberOfRowsException(sudokuGrid.length); } Observation. In this example, WrongNumberOfRowsException extends IllegalArgumentException, which extends RuntimeException. Recall that an instance of a subclass of RuntimeException is unchecked. Therefore an instance of WrongNumberOfRowsException is an unchecked exception. "},{"id":57,"href":"/docs/build/sections/dependencies/","title":"Dependencies","section":"Build automation","content":" Dependencies # Maven (like Gradle) acts both as a build automation tool and as a package manager.\nAs a package manager, Maven (like Gradle) relies by default a software repository called Maven Central. This repository contains more than 260.000 artifacts (more than 6 million when counting versions), with over a trillion downloads in 2023.\nAn artifact on Maven Central is identified by its coordinates.\nFinding a library\u0026rsquo;s coordinates # The coordinates of a library are often provided as part of its documentation. For instance, this is the case of Google\u0026rsquo;s Guava library.\nAlternatively, this website can be used to search for the coordinates of an artifact on Maven Central (as well as 1990 other repositories). For instance, here are the coordinates for the latest version of the Smile library for machine learning.\nLocal repository # By default, Maven caches project dependencies (as jars) in a hidden directory with path \u0026lt;homeFolder\u0026gt;/.m2 (or \u0026lt;homeFolder\u0026gt;\\.m2 on Windows). In Maven\u0026rsquo;s terminology:\nthis directory is called the local repository, an artifact is installed when it is added the local repository. When a project is build, Maven searches for each dependency in the local repository. If the corresponding artifact is not installed, then it is downloaded (e.g. from Maven central) and installed.\nGradle proceeds in a similar way (but the cache is under \u0026lt;homeFolder\u0026gt;/.gradle).\nNote. The local repository can contain different versions of the same artifact. Note. By default, when installing an artifact, Maven also installs all its missing dependencies, transitively. Gradle proceeds in a similar way. Warning. Maven (like Gradle) does not support cyclic dependencies, i.e. an artifact cannot depend on itself (directly or transitively). Exercise Does this imply that the dependencies of an artifact form a tree? Solution No. A tree is a rooted acyclic graph, but the converse does not hold. To display the dependency graph of a project (unraveled as a tree), run:\nmvn dependency:tree If a project depends (transitively) on two versions of the same artifact, then the \u0026ldquo;closest\u0026rdquo; version (in the dependency graph) is chosen (or the first declared in case of a tie).\nNote. If a project depends on a SNAPSHOT version, then the installed artifact is automatically updated on a regular basis (by default once per day), by both Maven and Gradle. Declaring a dependency # Maven # A dependency can be declared by adding the following to the pom.xml file, inside the \u0026lt;dependencies\u0026gt; tag:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt; XXX \u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt; XXX \u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt; XXX \u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; In addition, the attribute \u0026lt;scope\u0026gt;test\u0026lt;\\scope\u0026gt; can be added to indicate that the dependency is needed for unit tests only (other scopes can be specified).\nExample. Here is how to declare dependencies on Guava, Smile and JUNIT 5, while specifying that the latter is only needed for unit tests:\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;33.1.0-jre\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.haifengl\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;smile-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.10.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; Gradle # There are several alternative syntaxes to declare a dependency with Gradle (these may depend on the project\u0026rsquo;s configuration).\nExample. If you chose the board game as your project, then you can declare a dependency in the file core/build.gradle as follows. Within:\ndependencies { ... } add a line:\nimplementation group: XXX, name: XXX, version: XXX For instance:\nimplementation group: \u0026#39;com.google.guava\u0026#39;, name: \u0026#39;guava\u0026#39;, version: \u0026#39;33.1.0-jre\u0026#39; To specify that the dependency is only needed for unit tests, replace implementation with testImplementation.\nUsing an external library # Once a dependency is declared, the classes and interfaces of the corresponding library can be used in the source code of the project, with a regular import statement.\nExample. Guava provides a convenient class ImmutableList for lists that cannot be modified. It can be used as follows:\nimport com.google.common.collect.ImmutableList; public class MyClass { String name; ImmutableList\u0026lt;Integer\u0026gt; values; public MyClass(String name, ImmutableList\u0026lt;Integer\u0026gt; values){ this.name = name; this.values = values; } ... } Hint. Import statements like the one above can be automatically generated by your IDE. "},{"id":58,"href":"/docs/objects/sections/tostring/","title":"Displaying objects","section":"Objects and classes","content":" Displaying objects # The class Object # Java has a native class called Object with 11 instance methods. Every Java class implicitly extends Object, including user-defined classes. Therefore any Java class inherits these methods. The method toString # toString is one of the methods of the class Object. Here is (part of) its specification:\n/** Returns a string representation of the object. * In general, the toString method returns a string that * \u0026#34;textually represents\u0026#34; this object. */ public String toString(); This is the preferred way to display information about an object. For instance, the debugger of your IDE probably relies on this method to display a string that represents an object.\nThis method is also called by many (native or not) methods and operators. For instance, the following program\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); System.out.println(myUnicorn); String message = \u0026#34;Hello \u0026#34; + myUnicorn; is equivalent to\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); System.out.println(myUnicorn.toString()); String message = \u0026#34;Hello \u0026#34; + myUnicorn.toString(); Overriding toString # The default implementation of toString (in the class Object) displays very little information about the object:\npublic String toString() { return getClass().getName() + \u0026#34;@\u0026#34; + Integer.toHexString(hashCode()); } Warning. The output of hashCode() in this example is not the reference (a.k.a. \u0026ldquo;memory address\u0026rdquo;) of the object. So a common practice consists in overriding toString. For instance, here is a possible implementation of the method toString within a class Unicorn:\npublic class Unicorn { String color; int health; @Override public String toString() { return \u0026#34;Unicorn{\u0026#34; + \u0026#34;color=\u0026#34; + color + \u0026#34;, \u0026#34; + \u0026#34;health=\u0026#34; + health + \u0026#34;}\u0026#34;; } } Hint. Your IDE can generate such a method. Recursion # A naive implementation of toString (e.g. generated by an IDE) may have unexpected effects.\nExercise Consider an implementation of our game where units (on each side of the board) are grouped by column. This implementation may use a class Column to represent a column and the adjacent one(s), as follows:\npublic class Column { Unit[] units; // null if this is the left-most column Column leftAdjacentColumn; // null if this is the right-most column Column rightAdjacentColumn; public Column(Unit[] units){ this.units = units; } @Override public String toString() { return \u0026#34;Column{\u0026#34; + \u0026#34;left=\u0026#34; + leftAdjacentColumn +\u0026#34;, \u0026#34; + \u0026#34;right=\u0026#34; + rightAdjacentColumn +\u0026#34;, \u0026#34; + \u0026#34;units=\u0026#34; + units + \u0026#34;}\u0026#34;; } } Then a board may be created as follows:\nUnit[] a1 = new Unit[]{ new Unicorn(\u0026#34;green\u0026#34;) }; Column c1 = new Column(a1); Unit[] a2 = new Unit[]{ new Butterfly(\u0026#34;yellow\u0026#34;) }; Column c2 = new Column(a2); c1.rightAdjacentColumn = c2; c2.leftAdjacentColumn = c1; System.out.println(c1); There is an issue with this program. Can you identify it?\nSolution The program does not terminate, because toString is (implicitly) recursive, and each of the two columns refers to the other. "},{"id":59,"href":"/docs/unittests/sections/junit/","title":"in Java","section":"Unit tests","content":" Unit tests in Java # Several frameworks are available in Java for unit tests. Popular frameworks include:\nJUnit 4 JUnit 5 TestNG Spock In this section, we focus on Junit 5.\nInstall Junit 5 with Maven # Junit 5 can be used in a Maven project by declaring the following dependency and plugin\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.10.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.5\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; For the latest versions, search Maven Central.\nLayout # Maven # Recall that in a Maven project, by default:\nsource code for unit tests is located in the directory src/test/java, resources for unit tests (e.g. data) are located in the directory src/test/resources. Note. You can create sub-directories (in these directories) to organize your tests and resources. Gradle # Junit 5 can be used with Gradle in a similar way, but the directories for unit tests and related resources and (usually) specified manually.\nHint. If you chose the board game as your project, then you can write JUnit 5 tests under core/src/test/java. You will also find (dummy) unit tests in the directory core/src/test/java/dummy. Writing unit tests # With Maven, any (public or protected) Java class in src/test/java (or a subdirectory) can contain JUnit tests.\nA Junit 5 test is a (public or protected) instance method :\nwith void return type, annotated with org.junit.jupiter.api.Test. In addition, the method usually contains one or several calls to static methods of JUnit\u0026rsquo;s Assertions class, like assertEquals or assertThrows. The test succeeds iff all these calls return true.\nFor instance, the following class contains a single (successful) test:\nimport org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class MyTests { @Test void myTest(){ String myString = \u0026#34;foo\u0026#34;; assertEquals(true, myString.contains(\u0026#34;oo\u0026#34;)); } } Warning. The method assertEquals takes the expected value as first argument, and the actual one as second argument. This has an incidence on logs in case of test failure (\u0026ldquo;expected\u0026rdquo; : XXX, \u0026ldquo;actual: \u0026ldquo;YYY\u0026rdquo;); Hint. A string can be passed to assertEquals as third argument, in order to display an additional message in case of failure. Hint. Most methods of the class Assertions are syntactic sugar (thus not strictly necessary). For instance\nassertTrue(\u0026lt;myExpression\u0026gt;) is a shortcut for\nassertEquals(true, \u0026lt;myExpression\u0026gt;) Warning. By default, the execution of a test method is interrupted as soon as an assertion fails. So following instructions (for instance other assertions) will not be executed. Checking exceptions # The assertion assertThrows allows checking whether the execution of a piece of code method throws an exception of a given type. For instance the following unit test succeeds:\n@Test void testException(){ assertThrows( ArithmeticException.class, () -\u0026gt; { int x = 2 / 0; } ); } Prior and/or subsequent code # The annotation @BeforeAll (resp. @AfterAll) can be used to indicate that a (static) method must be executed (only once) before (resp. after) all unit tests in the class, regardless of test successes or failures. This can be used for costly operations, or for opening (resp. closing) a resource, like an connection or an input (resp. output) stream. For instance\nimport org.junit.jupiter.api.AfterAll; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.Test; import java.sql.Connection; public class SQLTests { Connection myConnection; @BeforeAll static void openConnection(){ ... } @Test void test1(){ ... } @Test void test2(){ ... } @AfterAll static void closeConnection(){ ... } } Similarly the annotation @BeforeEach (resp. @AfterEach) can be used to indicate that a method must be executed before (resp. after) each unit test in the class. This can be convenient to avoid copy-pasting code. For instance\nimport org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; public class BoardgameTests { Snapshot testSnapshot; @BeforeEach void createTestSnapshot(){ testSnapshot = new DummySnapshot(); } @Test void test1(){ ... } @Test void test2(){ ... } } Disabling tests # A unit test can be disabled with the annotation @Disabled. As a result, it will be ignored by Maven, Gradle, and (to some extent) your IDE. For instance:\nimport org.junit.jupiter.api.Disabled; import org.junit.jupiter.api.Test; public class MyTests { @Test @Disabled void test1(){ ... } @Test void test2(){ ... } } Running unit tests # from the command line # For a Maven project, the command\nmvn test executes all phases that precede the test phase (e.g. compile and test-compile) in Maven\u0026rsquo;s default lifecycle, and then executes all unit tests under src/test/java.\nNote. The source code of unit tests (and related resources) is by default excluded form the output of the package phase (e.g. from the jar produced by Maven). Note. A unit test failure will prevent execution of Maven phases that are posterior to test. For instance\nmvn package does not produce the expected jar if a test fails.\nHowever, if needed, it is possible to execute a posterior Maven phase while skipping the unit tests, with the option -DskipTests. For instance:\nmvn package -DskipTests within an IDE # IDEs provide several ways to run unit tests, either:\nin isolation, or all tests within a class, or all tests within a package (including subpackages). For instance, with IntelliJ:\nclick on the green arrow to run a single unit test, click on the double green arrow to run all unit tests defined in the current class, right click on a folder and select \u0026ldquo;Run Tests\u0026rdquo; to run all tests in this package. Note. Within an IDE, a unit test can (and most often should) be run in debug mode. For instance, with IntelliJ, right-click on the green arrow and select \u0026lsquo;Debug\u0026rsquo;. "},{"id":60,"href":"/docs/env/sections/os/","title":"Operating system","section":"Development environment","content":" Operating system (OS) # Your computer does not bind you to one OS. You can run multiple OSs on the same computer by:\npartitioning your disk, or booting from an external drive, or using virtualisation. Depending on what you are developing, one operating system may be more convenient than another.\nWe review below some of the benefits and drawbacks of developing under Windows, macOS and Linux.\nWindows # Benefits and drawbacks # Here are some benefits of using Windows as your OS for software development:\nit comes pre-installed on most PCs, it is compatible out-of-the-box with most hardware, it provides a fully integrated development suite for the .NET framework (C#, F#, Visual Basic), and to a lesser extent C/C++. And some drawbacks:\nfor general-purpose development, Windows is not friendly to new programmers (compared to Linux or macOS), the usage of an (OS-wise) package manager is (still) not the norm, it sometimes favors backwards compatibility over compliance with modern standards. When to use Windows (and when not) # Windows is the OS of choice for developing software meant to run on Windows only, or cross-platform software written in one of the .NET languages (mostly C#). C# is notably used for game development (e.g. for Unity) and graphical interfaces (although Javascript-based graphical frameworks may have become more popular lately). Another interesting feature of C# (compared to Java) is the Language Integrated Query framework, which provides a tight integration with database engines.\nVisual studio (not VSCode!) offers a fully integrated development suite for the .NET languages, and is also commonly used for C/C++.\nFor other programming languages, using Windows may require extra efforts or precautions (compared to Linux or macOS), especially for new developers.\nIn particular, manual software installation/upgrade/removal can be complex and error-prone. Writing scripts (e.g. for two programs to interact) can also be more involved, especially given the fact that Windows has three shells (the Windows shell, the Windows Power Shell and Power Shell), or four if counting WSL.\nBesides, additional care must be taken to write platform-independent code. Here are for instance two frequent sources of errors made by students:\nPath names: Windows uses \\ as a path separator, as opposed to the / used by other OSs (or in web URIs). In Java, a path can be safely written with /. At run time (i.e. when the program is executed), this symbol will be interpreted based on the underlying OS (i.e. as \\ on Windows, and as / on other OSs). However, a path written with \\ will be interpreted as such (therefore the program will throw an exception on OSs other than Windows). Line breaks: many text editors for Windows encode a line break as two ascii characters (\\r\\n), against a single character (\\n) on most modern systems. This is often transparent for regular users, because many text editors (or even git) use detection and normalization procedures for line breaks. However, this may be a source of bugs for developers, for instance when generating code, or when writing a script to configure a virtual environment (e.g. a Docker image). For this course # You should be able to complete all assignments and write your project using Windows (even if your collaborators use other OSs).\nHowever, you may need to pay extra attention, for instance to path names (as explained above). Installing and configuring the necessary software may also be more complex (again, we recommend using a package manager when possible).\nIf you do not manage to set up your working environment for this course (see the requirements) in a short amount of time, then consider using a Linux distribution instead (see the dedicated section below for using Linux alongside Windows).\nmacOS # Here are some benefits of using macOS as your OS for software development:\nit comes pre-installed with an Apple computer, it is POSIX-compliant (since 2001), thus offering easier interoperability with Linux/BSD/Android/IOS the homebrew package manager is relatively mature. And some drawbacks:\nsome software may not be available, your working environment is not easily customizable. When to use macOS (and when not) # MacOS is rarely used on hardware other than Apple computers.\nIt is often a good choice for new developers. In particular, homebrew offers an easy way to install programs needed for general-purpose development (compilers, interpreters, other package managers, etc.), and its software repository is reasonably comprehensive in that regard (albeit smaller than repositories used by Linux distributions).\nA number of more experienced developers also work with macOS, notably for web development (Node.js/Javascript) or data science related projects (Python).\nA Linux distribution may be more convenient in some situations, e.g. when developing a program meant to run on a server, or when working with Docker containers.\nFor this course # If you have a Apple laptop, then you should not need an OS other than macOS for this course (even if your collaborators use other OSs).\nLinux # Here are some benefits of using Linux as your OS for software development:\nit is used by most web servers servers, it is relatively lightweight, for developers, it has an important (and high-quality) online community support, (OS) package managers are mature and easy to use, your working environment can be easily customized and/or configured. And some drawbacks:\nLinux rarely comes pre-installed on a computer, there sometimes too much choice of programs or distributions, Linux distributions are (still) not as friendly to desktop users as Windows or macOS, Hardware support (e.g. for peripherals) is (still) more limited than for Windows. When to use Linux (and when not) # Linux is often the OS of choice for developing programs meant to run on web servers. It is also a good choice for writing cross-platform software.\nLinux (together with macOS) is also a good environment to learn the basics of programming, due to native compatibility with a wide range of technologies for general-purpose development (e.g. Docker). Software installation, configuration, upgrade and removal is also made easier by mature package managers. Besides, the Linux shell is a versatile yet relatively simple tool that can ease process management or interaction between programs.\nLinux is arguably not the best choice for developing Desktop applications that target a specific OS (such as Windows or macOS), or in some specific domains such as game development.\nFor this course # You should be able to complete all assignments and write your project using a Linux distribution (even if your collaborators use other OSs).\nIn particular, if you face important issues when setting up your working environment (git, JDK, Maven, Gradle, etc. ) on Windows, we recommend using a Linux distribution instead (because it may save you time). Keep in mind however that this will not solve issues related to the configuration of your IDE.\nNot that you can use Linux (for development) and Windows (for other purposes) on the same computer.\nWhich distribution to choose # You can use any (reasonably mainstream) all-purposes Linux distribution for this course (and other courses).\nThe choice may seem overwhelming at first sight, but most distributions are forks of a few popular ones (Debian, Fedora, Arch, \u0026hellip;), and are relatively similar to each other. Besides, Linux environments are highly customizable: for instance, the choice of a distribution does not bind you to its default desktop environment. Available software is also very similar from one distribution to another: regardless of the distribution, you will have access to openJDK, git, Maven, etc. via a package manager.\nDistributions that are more desktop-oriented can be more friendly to newcomers (especially non-developers), but also come with unnecessary software. Two popular distributions in this category (for new users) are Linux Mint and Zorin OS. Both are forks of Ubuntu, which is itself a fork of Debian.\nFor a (slightly) more lightweight distribution, MX Linux is currently a popular choice. It is also based on Debian.\nHow to install a Linux distribution # Most distributions provide detailed instructions on their web page.\nRegardless of the distribution, you have are (at least) three possible options:\nVirtual machine (such as VirtualBox). This is the simplest option in terms of installation. But also the most expensive computationally, so only suited to a relatively powerful computer. Performance is also suboptimal.\nA virtual machine is often good way to test a distribution before properly installing it.\nBootable drive. You can store your Linux distribution on an external hard drive, and boot on Linux when the hard drive is connected to your computer. Compared to the third option below, this may affect the performance of disk access.\nPartition (with dual boot). You can dedicate a certain amount of space to a Linux distribution your hard drive. A minimum of 30 GB is often recommended, but this can be adjusted later on. When starting your computer, it will let you choose which OS to boot on. This is the best option in terms of performance.\nNote. For the third option (dual boot), the installation procedure has become more involved on some recent computers, due to encrypted disks or so-called \u0026ldquo;secure boot\u0026rdquo;. So make sure that the instructions that you follow are up-to-date. "},{"id":61,"href":"/docs/lambda/sections/type/","title":"Type of a method","section":"Callback methods and lamda expressions","content":" Type of a method # Terminology. The type (a.k.a. signature) of a method consists of:\nthe type(s) of its argument(s), and its return type. Notation. The type of a method is sometimes described analogously to the type of a mathematical function. For instance, consider the following Java method square:\nint square(int x){ return x * x; } This method takes as input an int, and returns an int.\nIn other words, this is a function with domain int and codomain int. This is written:\n$\\qquad$square$\\colon$ int $\\to$ int\nAnd the type of this function is\n$\\qquad$ int $\\to$ int\nSimilarly, we may use:\nint $\\times$ int $\\to$ int if the method takes two int and returns another, Unit $\\times$ int $\\to$ Unit if the method takes a Unit and an int (in that order) and returns a Unit, Unit[] $\\to$ void if the method takes an array of Units[] and returns nothing, etc. in Java # Syntactically, Java does not provide a method typing system like the one above. Instead, Java uses (abuses?) interfaces for this purpose.\nFunctional interface # A method type in Java is described with a so-called functional interface.\nSyntax. A Java functional interface is an interface with a single (standard) method. Note. In this definition, \u0026ldquo;standard\u0026rdquo; method stands for a method that does not have the default qualifier (\u0026ldquo;standard\u0026rdquo; interface methods are also called \u0026ldquo;abstract\u0026rdquo;). Example. The following is a functional interface, which describes the type Unit $\\times$ Integer $\\to$ Unit.\nAny method with type Unit $\\times$ Integer $\\to$ Unit implements this interface.\ninterface UnitPerIntegerToUnit { Unit myMethod(Unit unit, Integer x); } The name of a functional interface is irrelevant, as well as the name of its method (and the arguments of this method).\nExample. The following functional interface also describes the type Unit $\\times$ Integer $\\to$ Unit.\ninterface Just { Unit because(Unit we, Integer can); } A functional interface can be annotated with @FunctionalInterface. This will for instance cause a compilation error if the interface has more than one (non-default) method.\nExample.\n@FunctionalInterface interface UnitPerIntegerToUnit { Unit myMethod(Unit unit, Integer x); } Native functional interfaces # Java provides native (parameterized) functional interfaces for some frequent method types.\nWe highlight here a few of them:\nFunction # The functional interface Function\u0026lt;InputType, OutputType\u0026gt; stands for the type InputType $\\to$ OutputType. Its method is called apply. Examples.\na method with type Unit $\\to$ Integer implements the functional interface Function\u0026lt;Unit, Integer\u0026gt; a method with type Unit $\\to$ Unit implements the functional interface Function\u0026lt;Unit, Unit\u0026gt; Consumer # The interface Consumer\u0026lt;InputType\u0026gt; stands for the type InputType $\\to$ void. Its method is called accept. Examples.\na method with type Integer $\\to$ void implements the functional interface Consumer\u0026lt;Integer\u0026gt; a method with type Unit $\\to$ void implements the functional interface Consumer\u0026lt;Unit\u0026gt; Supplier # The interface Supplier\u0026lt;OutputType\u0026gt; stands for the type void $\\to$ OutputType. Its method is called get. Examples.\na method with type void $\\to$ Integer implements the functional interface Supplier\u0026lt;Integer\u0026gt; a method with type void $\\to$ Unit implements the functional interface Supplier\u0026lt;Integer\u0026gt; "},{"id":62,"href":"/docs/intro/sections/bibliography/","title":"Bibliography","section":"This course","content":" Bibliography # Java\u0026rsquo;s syntax # In each chapter of this course, you will find Java code snippets that illustrate how to perform certain operations. However, this documentation is far from exhaustive (on purpose).\nSo when it comes to syntax, the first two sources of complementary material for this course are:\nthe Javadoc of the libraries (standard and auxiliary) used in your project/assignments. Your IDE is often the fastest way to navigate through it, the web. Books # You will find a reading list for this course in the catalogue of the Unibz\u0026rsquo;s library. All books can be accessed via the library (either physically or digitally).\nAmong these books, we highlight the following two:\nMain textbook # Java: How to Program, Early Objects (11th edition)\nby Paul Deitel and Harvey Deitel\nPearson, 2018\nThis is a general introductory book to Java and object oriented programming. It covers most of the topics seen in this course.\nGood practices # Effective Java (3rd edition)\nby Joshua Bloch\nAddison-Wesley Professional, 2017\nThis is a reference book for best practices and common pitfalls when programming in Java.\n"},{"id":63,"href":"/docs/build/sections/building/","title":"Building","section":"Build automation","content":" Building # Cleaning # The command\nmvn clean attempts to delete all content generated during a previous build (in particular, .class files).\nExample. Let us assume that MyClass.java is compiled into MyClass.class, and then renamed MyNewClass.java. In this scenario, mvn clean allows eliminating the file MyClass.class from the target directory. The default lifecycle # Maven\u0026rsquo;s default lifecycle is a sequence of 23 operations (called phases) that can be executed during a build. These include (in order):\nvalidate: checks if all the information needed for the build is present compile: compiles the source code of the project test-compile: compiles the source code of the unit tests of the project test: runs the unit tests package: packages the compiled code in its distributable format (such as a jar) install: installs the package into the local repository (for use as a dependency in other local projects) Each phase can be executed via command-line with mvn \u0026lt;phaseName\u0026gt;. For instance:\nmvn package Warning. Executing any of these phases triggers the execution of all phases that precede it. For instance, executing the test phase triggers the execution of validate, compile and test-compile (among others).\nGoals and plugins # A build phase (like package) consists of so-called goals.\nA goal can be declared, configured and associated to a specific phase via a so-called plugin.\nIn a POM:\na plugin is specified within the \u0026lt;plugin\u0026gt;\u0026lt;/plugin\u0026gt; tag, and plugins are declared within: \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; For instance, here is the plugin called maven-jar-plugin, as it is inherited from the Super POM:\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-jar-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;default-jar\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;jar\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; This plugin assigns the goal jar to the phase package. Intuitively, this specifies that the phase package must produce a jar file (as opposed to other formats like war or ear).\nIn order to make this jar executable (and specify the main class of the application), we can add information to this inherited plugin, in the pom.xml file of the project, as follows:\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-jar-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;archive\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;addClasspath\u0026gt;true\u0026lt;/addClasspath\u0026gt; \u0026lt;mainClass\u0026gt;org.example.Main\u0026lt;/mainClass\u0026gt; \u0026lt;/manifest\u0026gt; \u0026lt;/archive\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; The effective POM in this example contains:\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-jar-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;default-jar\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;jar\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;archive\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;addClasspath\u0026gt;true\u0026lt;/addClasspath\u0026gt; \u0026lt;mainClass\u0026gt;org.example.Main\u0026lt;/mainClass\u0026gt; \u0026lt;/manifest\u0026gt; \u0026lt;/archive\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; A plugin can contain several goals, and these may or may not be assigned to a specific phase.\nBesides, a goal can be executed independently from a phase, with the command:\nmvn myplugin:myGoal For instance, the javafx maven plugin has a goal run to start a JavaFX application. It can be executed with:\nmvn javafx:run Installing a plugin # Maven plugins are available for a variety of tasks, like code analysis, Javadoc generation, parser generation, etc.\nAn plugin is a Maven artifact. Similarly to a dependency, an external plugin can be downloaded from Maven Central and installed into the local repository , as follows:\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt; XXX \u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt; XXX \u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt; XXX \u0026lt;/version\u0026gt; ... \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; However, as illustrated above, additional XML attributes may be needed to configure the plugin. These are often specific to a plugin.\nUseful plugins # The assembly plugin # The assembly plugin allows building a über jar (i.e. including dependencies), as opposed to the maven-jar-plugin, which can build a thin jar.\nThis is a simple way to distribute an end-user application (as opposed to a library).\n\u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.7.1\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;archive\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;mainClass\u0026gt;org.example.MainClass\u0026lt;/mainClass\u0026gt; \u0026lt;/manifest\u0026gt; \u0026lt;/archive\u0026gt; \u0026lt;descriptorRefs\u0026gt; \u0026lt;descriptorRef\u0026gt;jar-with-dependencies\u0026lt;/descriptorRef\u0026gt; \u0026lt;descriptorRef\u0026gt;src\u0026lt;/descriptorRef\u0026gt; \u0026lt;/descriptorRefs\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; In this example, the execution of the goal (called single) is attached to the phase package, so the über jar can be produced like a regular jar, with:\nmvn package The source plugin # The source plugin can package source code as a jar. This allows:\ndistributing a Java library alongside its source code, and/or installing the library in the local repository together with the source (and navigate through it with an IDE). \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-source-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.1\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;attach-sources\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;verify\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;jar-no-fork\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; In this example, the execution of the goal (called jar-no-fork) is attached to the phase verify.\nThe Javadoc plugin # \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-javadoc-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.6.3\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;source\u0026gt;17\u0026lt;/source\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; This plugin has many goals, which are often executed independently (i.s. not bound to a phase).\nFor instance:\nmvn javadoc:javadoc generates Javadoc for the project in the folder target/site.\n"},{"id":64,"href":"/docs/lambda/sections/callback/","title":"Callback method","section":"Callback methods and lamda expressions","content":" Callback method # When a method takes another method as argument, the latter is a callback method. Anonymous methods are often used as callback methods.\nin Java # Running example # Example. The two following Java methods have the same structure: both modify each unit in the input list.\nvoid boostUnits(List\u0026lt;Unit\u0026gt; units){ for(Unit unit: units){ unit.health++; } } void penalizeGreenUnits(List\u0026lt;Unit\u0026gt; units){ for(Unit unit: units){ if(unit.color.equals(\u0026#34;green\u0026#34;)){ unit.health--; } } } In each case, let us isolate the modification that is applied to a single unit, with a dedicated method (called boost and penalizeGreen respectively).\nvoid boost(Unit unit){ unit.health++; } void penalizeGreen(Unit unit){ if(unit.color.equals(\u0026#34;green\u0026#34;)){ unit.health--; } } Both methods have type Unit $\\to$ void, so they are instances of the functional interface Consumer\u0026lt;Unit\u0026gt;.\nThis allows us to factorize our code with a method transform that takes as input:\nan array of units, a callback method with type Consumer\u0026lt;Unit\u0026gt;, and applies the callback method to each unit in the input array.\nvoid transform(List\u0026lt;Unit\u0026gt; units, Consumer\u0026lt;Unit\u0026gt; method){ for (Unit unit: units){ method.accept(unit); } } Passing a callback method # A callback method in Java can be:\na method reference, or a lambda expression. Method reference as a callback method # Syntax. A Java method reference is written:\nClassName::methodName for a static method, objectVariable::methodName for an instance method, ClassName::new for a constructor. Example (continued).\nLet us assume that our methods boost and penalizeGreen above are static methods of some class called UnitTransformer:\npublic class UnitTransformer{ static void boost(Unit unit){ unit.health++; } static void penalizeGreen(Unit unit){ if(unit.color.equals(\u0026#34;green\u0026#34;)){ unit.health--; } } } We can call our method transform with boost as callback method:\nList\u0026lt;Unit\u0026gt; units = getUnits(); transform( units, UnitTransformer::boost ); And similarly with penalizeGreen:\nList\u0026lt;Unit\u0026gt; units = getUnits(); transform( units, UnitTransformer::penalizeGreen ); Lambda expression as a callback method # Alternatively, instead of declaring a method boost, we can directly use a lambda expression:\nExample (continued).\nList\u0026lt;Unit\u0026gt; units = getUnits(); transform( units, unit -\u0026gt; unit.health++ ); And similarly, instead of declaring a method penalizeGreen, we can use the following lambda expression:\nList\u0026lt;Unit\u0026gt; units = getUnits(); transform( units, unit -\u0026gt; { if(unit.color.equals(\u0026#34;green\u0026#34;)){ unit.health-- ; } ); Native support # Programming languages that support anonymous methods (like Java, Python, C#, C++, JavaScript, etc.) often provide concise syntaxes to use them as callback methods.\nExample(continued).\nIn Java, the above method transform is not necessary. Instead, we can use the native method forEach, available (among others) for any Java Collection. This method takes a Consumer method as input, and applies this method to each element of the collection.\nSo the following program:\ngetUnits().forEach(unit -\u0026gt; unit.health++); is equivalent to:\ntransform( getUnits(), unit -\u0026gt; unit.health++ ); void transform(List\u0026lt;Unit\u0026gt; units, Consumer\u0026lt;Unit\u0026gt; method){ for (Unit unit: units){ method.accept(unit); } } "},{"id":65,"href":"/docs/objects/sections/comparing/","title":"Cast and equality","section":"Objects and classes","content":" Cast and Equality # Cast # Java (as well as C# and C++) provides mechanisms to change the type associated with an object o, using either a supertype of o (this is an upcast), or a subtype of o (this is a downcast). Upcast # Explicit upcasts are uncommon, but may still be useful in some scenarios, e.g. to disambiguate two method calls.\nImplicit upcasts on the other hand are very frequent, when the type of an object cannot be determined at compile time.\nExample. Consider the following classes:\nNow consider the following program, where the method getUnits produces an array of units that depends on the player\u0026rsquo;s input. The type of objects in this array (Unicorn or Butterfly) cannot be determined at compile time. Thanks to the implicit upcast, they can nonetheless be treated as (underspecified) units.\nUnit[] units = getUnits(); for (Unit unit: units){ System.out.println(unit.health); } Downcast # Downcasting in Java is frequent for objects whose type cannot be determined at compile time. However, this may not be safe. For instance, in the above example, downcasting a unit from Unit to Unicorn may cause a ClassCastException (at runtime), because this unit is a instance of Butterfly. This is why downcasting is often used in combination with the instanceof operator. For instance the above example can be modifed as follows:\nUnit[] units = getUnits(); for (Unit unit: units){ if(unit instanceof Unicorn){ ((Unicorn) unit).regen(); } } Here the operation (Unicorn) unit is a downcast. The output of this operation has type Unicorn, thus allowing the call to the method regen.\nObject equality # As we saw in a previous chapter, a constructor in Java creates an object in memory and returns a (fresh) reference to that object. Since two objects have different locations in memory, their respective references must differ, even if the objects are identical.\nExample. Consider (a simplified version of) the class City that we saw earlier.\npublic class City { String name; int zipCode; public City(String name, int zipCode){ this.name = name; this.zipCode = zipcode; } } The following program will output false:\nCity city1 = new City(\u0026#34;Florence\u0026#34;, 50100); City city2 = new City(\u0026#34;Florence\u0026#34;, 50100); System.out.println(city1 == city2); However, in some scenarios, it may be useful to compare the objects themselves, rather than their references. Java provides a native method called equals for this purpose.\nLike the method toString that we saw earlier, the equals is an instance method of the native Java class Object, which is an (implicit) superclass of every other class. So every (user-defined of native) class inherits equals.\nHere is the source code of Object.equals:\npublic boolean equals(Object obj) { return (this == obj); } In other words, by default, this method behaves like the == operator. In order to use this method to check whether two objects are equal, it has to be overriden.\nFor instance, here is a prototypical implementation of the method equals within our class City:\n@Override public boolean equals(Object o) { if (this == o) { // same reference return true; } if (o == null || getClass() != o.getClass()) return false; // o is null or has a different type } City downcastObject = (City) o; return zipCode == downcastObject.zipCode \u0026amp;\u0026amp; name.equals(downcastObject.name); } Hint. Your IDE can generate such a method. Note in this example:\nthe (safe) downcast from Object to City, and the recursive call to equals (because String is not a primitive type). Recursion # Warning. Similarly to what we saw with the method toString, beware of naive (recursive) implementations of equals if your program can create an object that refers to itself (directly or indirectly). Built-in implementations # Several native Java classes have their own implementation of equals. We will encounter several of them during this course, notably for the class String and for the implementations of the interface Set.\nThe method hashCode # The method equals is usually overridden together with another method of the class Object, called hashCode. In particular, this is needed for the method equals of the class HashSet to behave correctly. We will explore this topic later in this course, when introducing the notion of hashmap.\n"},{"id":66,"href":"/docs/errors/","title":"Errors","section":"Docs","content":" Errors # We all make mistakes when writing code.\nDeveloping efficient strategies to identify mistakes is an essential part of programming.\nCompile time vs runtime errors # In (pre)compiled languages (like Java, C/C++, C#, Python, Rust, Go, etc.), a distinction is generally made between compile time errors and runtime errors.\nA compile time error prevents a program from compiling. It can be thought of as a syntactic error. A runtime error (a.k.a. bug) occurs during the execution of a program. It may depend on the input of the program. Hint. Compile time errors tend to be (much) easier to fix than bugs, especially in large projects. Besides, an IDE can identify some compile time errors (and highlight them) before the program is even compiled.\nSo it is often a good practice to write your code in such a way that a maximal number of errors can be identified at compile time.\nNote. For interpreted languages (like Javascript, Lua, etc.), the term \u0026ldquo;compile time error\u0026rdquo; is meaningless. However, a distinction can still be made between errors that can be detected at runtime only, and errors that can be preemptively identified (e.g. highlighted by an IDE). Error messages # A precise error message can significantly simplify debugging.\nAs a toy example, consider the following Java program:\npublic class City { String name; int zipCode; public City(String name, int zipCode) { this.name = name; this.zipCode = zipCode; } } 1 2 3 4 5 6 7 8 9 10 public class MyClass{ void myMethod(City[] cities){ City firstCity = cities[0]; if(firstCity.zipCode \u0026gt;= 20000) { System.out.println(firstCity.name.length()); } } } Exercise In this program, there are several reasons why the method MyClass.myMethod may fail at runtime. Can you identify them? Solution the input array may be null, the input array may be empty, the first city in this array may have a zip code $\\ge$ 20 000 and no name. In the above example, if we execute the following,\nmyMethod(null); then we obtain this error message:\njava.lang.NullPointerException: Cannot load from object array because \u0026#34;cities\u0026#34; is null at MyClass.myMethod(MyClass.java:5) Note that this message provides a clear indication of:\nthe file (MyClass.java), method in this file (MyClass.myMethod) and line of code (5) that caused the error, the type of error (NullPointerException), the cause of the error (the variable city has value null). Hint. A NullPointerException in Java often indicates an attempt to access an object (or array) via a pointer (e.g. a variable) whose value is null. Similarly, if the method is called with an empty array,\nmyMethod(new City[]{}); we get the following error message:\njava.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0 at MyClass.myMethod(MyClass.java:5) Exercise Which type of error will the following call to myMethod produce?\nmyMethod(new City[]{ new City(30100, null) }); Solution java.lang.NullPointerException: Cannot invoke \u0026#34;String.length()\u0026#34; because \u0026#34;firstCity.name\u0026#34; is null at MyClass.myMethod(MyClass.java:7) Invalid inputs # Consider the following method:\nint least(int x, int y){ return x \u0026lt;= y ? x : y; } Observe that:\nany arguments for this method (i.e. any pair of integers in this example) are a valid input, its execution only depends on its arguments, i.e. if the method is called twice with the same arguments, then it has the same behavior. However, this is not the case of all methods.\nIf one of these two condition does not hold, then it may be useful to write your own error messages, in anticipation. This may benefit:\nusers of the program, and collaborators (including your future self!) who will maintain (debug, extend, etc.) the program. Example. For instance, consider a method\nboolean isSolvable (int[][] grid); that takes as input a grid of sudoku, and returns true iff it is solvable, meaning that this grid admits a unique solution. A valid input for this problem may be a 9 x 9 array of integers with values between 0 and 9 (where 0 indicate the absence of value). However, Java does not provide such a precise data type.\nThe method could produce an (informative) error message if the input array:\nis not 9 x 9, or contains a value \u0026lt; 0 or \u0026gt; 9. Controlled environment # Anticipating all types of invalid inputs (and producing error messages for these) may induce a lot of boilerplate code. If you have control over the input a method, then this may not be necessary. In particular, this may be the case for some auxiliary methods (i.e. which are not visible to other classes or components).\nExample (continued). Consider the method boolean isSolvable (int[][] grid) described above. Let us assume that it is private, and called only by a method generateGrid that generates a grid pseudo-randomly.\nIt may be safe to assume that the implementation of generateGrid only produces 9 x 9 arrays with values between 0 and 9. In this scenario, there is probably no need to implement error messages in isSolvable.\n"},{"id":67,"href":"/docs/background/sections/regular/","title":"Regular languages","section":"Background","content":" Regular languages # Definitions # Alphabet # Definition.\nAn alphabet is a finite set of characters.\nExamples.\n{a} is a alphabet,\n{a,b} is another alphabet,\n{a, b, 3, 5,\\n} is yet another alphabet.\nWarning. A blank space is is a character. The letter $\\Sigma$ is often used to refer to an alphabet.\nWord # Definition. A word over an alphabet $\\Sigma$ is a (possibly empty) finite sequence of character in $\\Sigma$. The empty word (a.k.a. \u0026ldquo;empty string\u0026rdquo;) is traditionally denoted with $\\varepsilon$.\nExamples. Let $\\Sigma$ be the alphabet {a, b, 3, 5, \\n}. Then possible words over $\\Sigma$ are:\n$\\varepsilon$ a aa ba\\n \\n\\nba353\\n\\nb Language # Definition. A formal language over an alphabet $\\Sigma$ is a (possibly infinite) set of words over $\\Sigma$. Examples. Let $\\Sigma$ be the alphabet { a, b }.\nThen possible languages over $\\Sigma$ are:\n{ } { a } { a, aa, aaa, b, aba } { $\\varepsilon$, a, ba } the set of all words that contain only the character a the set of all words over $\\Sigma$ the set of all words over $\\Sigma$ that do not contain 2 consecutive b\u0026rsquo;s the set of all words over $\\Sigma$ that contain as many a\u0026rsquo;s as b\u0026rsquo;s Operations on languages # Element-wise concatenation # If $L_1$ and $L_2$ are languages, then we use $L_1 \\circ L_2$ for the language that consists of the element-wise concatenation of all words in $L_1$ and $L_2$ (in that order). Examples.\nIf $L_1$ = {ab, c} and $L_2$ = {d, ef}, then $L_1 \\circ L_2$ = { abd, abef, cd, cef}\nIf $L_3$ = {ab, b} and $L_4$ = { $\\varepsilon$, ac }, then $L_3 \\circ L_4$ = { ab, abac, b, bac }\nClosure # If $L$ is a language, then the closure (also called Kleene closure) $L^*$ of $L$ is the language\n$L^*$ = { $\\varepsilon$ } $\\cup\\ L \\cup\\ (L \\circ L) \\cup\\ (L \\circ L \\circ L) \\cup (L \\circ L \\circ L \\circ L) \\cup \u0026hellip;$\nEquivalently, $L^*$ can be defined as:\nthe set that consists of $L$, the empty word $\\varepsilon$, and all possible concatenations of words in $L$. the smallest superset of $L\\ \\cup$ { $\\varepsilon$ } that is closed under word concatenation (meaning that if $L^*$ contains two words $w_1$ and $w_2$, then it also contains the word $w_1 w_2$). Regular languages # Definition. A language is regular if it is:\nthe empty set, or the language { $\\varepsilon$ }, or the language { a } for some character a, or the union of two regular languages, or the element-wise concatenation of two regular languages, or the closure of a regular language. Examples\n$L_1$ = { a } is regular $L_2$ = { b } is regular $L_3$ = $L_1 \\cup L_2$ = { a, b } is regular $L_4 = L_1 \\circ L_3$ = { aa, ab } is regular $(L_4)^*$ = { $\\varepsilon$, aa, ab, aaaa, aaab, abaa, abab, aaaaaa, aaaaab, \u0026hellip; } is regular Observation. If $\\Sigma$ is an alphabet, then the language $\\Sigma^*$ of all possible words over $\\Sigma$ is regular. Counter-examples.\nIf $\\Sigma$ = { a,b }, then the set of all words over $\\Sigma$ that contain as many a\u0026rsquo;s as b\u0026rsquo;s is not regular.\nIf $\\Sigma$ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} $\\cup$ { +, -, ( , )} , then the set of well-formed algebraic expressions over $\\Sigma$ (in particular, where each opening parenthesis is closed) is not regular.\nMore generally, most programming languages are not regular.\nProperties # The intersection of two regular languages is a regular language. The difference between two regular languages is a regular language. Regular expressions # A language is regular iff it can be described by a regular expression.\nRegular expressions are covered in the dedicated chapter.\nFinite automata # Regular languages have a close connection to so-called finite automata.\nA finite automaton can be viewed as a simple program that recognizes a regular language $L$, meaning that the automaton takes as input a word $w$ and returns true iff $w$ belongs to $L$.\nFinite automata are one of the simplest (theoretical) models of computation. They (approximately) correspond to computers that cannot use memory.\nAutomata theory is beyond the scope of this course.\n"},{"id":68,"href":"/docs/env/sections/requirements/","title":"Requirements for this course","section":"Development environment","content":" Requirements for this course # For this course, you will need:\nGit Version 2.2 or higher A Java Development Kit (JDK) for Java 17 (e.g. openJDK) Maven Version 3.6 or higher In addition, if you choose the board game as project, you will need:\nGradle Version 7.2 or higher Again, we recommend using a package manager to install these programs if possible.\nFor Windows users. Maven is not available on the winget repository. But you can find it on the Chocolatey repository, or follow manual installation instructions. You will also need:\nan IDE a text editor (possibly your IDE) a terminal emulator (possibly your IDE) "},{"id":69,"href":"/docs/input/sections/serialize/","title":"Serialization","section":"I/O and serialization","content":" Serialization # Serializing an object (resp. data structure) means converting it into a form that can be stored or transmitted, and such that the object (resp. data structure) can be later reconstructed (a.k.a. deserialized). in Java # Java provides a native mechanism to serialize an object (including information about the type of the object). The serialization format is not (meant to be) human-readable.\nThe process is JVM independent, meaning that an object can be serialized on one platform and deserialized on another.\nTransient # In Java, an instance attribute can be marked with the keyword transient (a.k.a. \u0026ldquo;volatile\u0026rdquo;). For instance:\npublic class MyClass { String serializedAttribute; transient int transientAttribute; ... } Transient attributes are excluded from the serialization process (meaning that a serialized object contains no value for its transient attribute).\nWarning. When an object is deserialized (i.e. converted back to an object), default values are assigned to each of its transient attributes: null for a reference, 0 for an int, false for a boolean, etc. Serializable # In Java:\na value with primitive type (e.g. int) is serializable, an array is serializable if its elements are serializable, an object is serializable if: its class implements the interface Serializable, and each of its attributes is serializable or marked as transient. Note. Implementing the interface Serializable does not require implementing any method. Example. Instances of the following class are not serializable, because Country does not implement Serializable.\npublic class Country { String name; public Country(String name) { this.name = name; } } Instances of the following class are not serializable either, because the attribute country has type Country, which does not implement Serializable.\npublic class City implements Serializable { String name; int zipCode; Country country; public City(String name, int zipCode, Country country) { this.name = name; this.zipCode = zipCode; this.country = country; } } However, if we replace\nCountry country; with\ntransient Country country; then instances of the class City become serializable, because:\nthe attribute name has type String, which implements Serializable, and the attribute zipCode has a primitive type, and the attribute country is now declared as transient. Note. Most native implementations of the Java interfaces Collection (ArrayList, LinkedList, HashSet, TreeSet, etc.) and Map (HashMap, TreeMap, etc.) also implement Serializable. serialVersionUID # If a class implements the interface Serializable, it is recommended to add a field: private static final long serialVersionUID (annotated with @Serial) and initialize it. For instance:\npublic class City implements Serializable { @Serial private static final long serialVersionUID = 0; ... } The value is irrelevant, but is meant to be updated if the (instance) attributes of the class are modified.\nFor an explanation, we refer to this page.\nSerialization (and deserialization) methods # The class ObjectOutputStream allows serializing an object, with the method:\nvoid writeObject(Object x) throws IOException Similarly, the class ObjectInputStream allows deserializing an object (i.e. loading it back into memory), with the method:\nObject readObject() throws IOException, ClassNotFoundException Note. The return type of readObject is Object, so the returned object needs to be cast to its appropriate data type. Example. Let us continue with the example above (assuming that the attribute City.country is marked as transient).\nA instance of City can be serialized to a file as follows:\nString path = \u0026#34;path/to/file.ser\u0026#34;; Country italy = new Country(\u0026#34;Italy\u0026#34;); City bologna = new City(\u0026#34;Bologna\u0026#34;, 40100, italy); try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(path))) { out.writeObject(bologna); } catch (IOException e) { throw new RuntimeException(e); } And deserialized as follows:\nCity deserializedBologna; try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(path))) { deserializedBologna = (City) in.readObject(); } catch (IOException | ClassNotFoundException e ) { throw new RuntimeException(e); } // Ouputs \u0026#39;Deserialized city: { name: Bologna, zipCode: 40100, country: null }\u0026#39; System.out.printf( \u0026#34;Deserialized city: { name: %s, zipCode: %d, country: %s }\u0026#34;, deserializedBologna.name, deserializedBologna.zipCode, deserializedBologna.country ); Observe that the attribute country after deserialization has value null (because it is marked as transient).\n"},{"id":70,"href":"/docs/git/sections/branches/","title":"Branches","section":"git","content":" Branches # Listing branches # The command\ngit branch allows you to list all local branches (for the current repository).\nCreating a branch # To create a new branch, run\ngit branch \u0026lt;branchName\u0026gt; Then you can switch to this branch with\ngit checkout \u0026lt;branchName\u0026gt; Alternatively, you can perform both operations with a single command:\ngit checkout -b \u0026lt;branchName\u0026gt; Deleting a branch # You can delete a (local) branch other than the current branch with\ngit branch -d \u0026lt;branchName\u0026gt; Merging a branch # To merge a branch \u0026lt;branchToMerge\u0026gt; into a branch \u0026lt;receivingBranch\u0026gt;, switch first to the receiving branch:\ngit checkout \u0026lt;receivingBranch\u0026gt; Then run\ngit merge \u0026lt;branchToMerge\u0026gt; If possible, a fast-forward merge will be performed.\nOtherwise a regular merge will be attempted. If this cannot be done (due to merge conflicts), then you will be asked to fix the merge conflicts. After fixing the conflicts, you can finalize the merge with\ngit commit "},{"id":71,"href":"/docs/lambda/sections/captured/","title":"Captured variables","section":"Callback methods and lamda expressions","content":" Captured variables # In practice, lambda expressions are often used to represent pure functions.\nSome languages (like Java, JavaScript, C++, etc) restrict (or allow the user to restrict) the usage of lambda expressions, so that they lean towards pure functions.\nTerminology. Some programming languages allow a lambda expression to use variables that:\nare declared outside of the lambda expression\u0026rsquo;s body, and are not arguments of the lambda expression. In this case, the expression is called a capturing lambda expression, and these variable are said to be captured.\nExample. In the following Java program, the lambda expression x -\u0026gt; x == a is a capturing lambda, because it uses the variable a, which is defined outside of the lambda expression.\nboolean myMethod() { int a = 2; return execute( 3, x -\u0026gt; x == a ); } boolean execute(Integer x, Function\u0026lt;Integer, Boolean\u0026gt; function) { return function.apply(x); } Captured variables in Java # Restriction. A capture variable in Java must be effectively final, meaning that it cannot be modified after its initialization. Examples. The following Java program is nearly identical to the previous one, but does not compile, because the captured variable a is not effectively final.\nboolean myMethod() { int a = 2; a = a + 1; return execute( 3, x -\u0026gt; x == a ); } boolean execute(Integer x, Function\u0026lt;Integer, Boolean\u0026gt; function) { return function.apply(x); } The following program does not compile either, for the same reason.\nboolean myMethod() { int a = 2; return execute( 3, x -\u0026gt; { a = a + 1; return x == a; } ); } boolean execute(Integer x, Function\u0026lt;Integer, Boolean\u0026gt; function) { return function.apply(x); } Exception. An exception to the rule above is captured variables that are allocated on the heap, i.e (class or instance) attributes.\nFor instance, the following program is nearly identical to the (first) program above that does not compile. However, this new program compiles, because the captured variable a is now an instance attribute.\npublic class EnclosingClass { int a = 2; boolean myMethod() { a = a + 1; return execute( 3, x -\u0026gt; x == a ); } boolean execute(Integer x, Function\u0026lt;Integer, Boolean\u0026gt; function) { return function.apply(x); } } "},{"id":72,"href":"/docs/objects/sections/classesasobjects/","title":"Classes as objects","section":"Objects and classes","content":" Classes as objects # Some object-oriented languages (like Java, C# or C++) provide ways to access or manipulate classes (almost) as if they were objects.\nStatic attributes and methods # Static attributes # Java (as well as C# and C++) supports attributes that do not depend on a specific object, but on a class instead. These are often called static attributes (or sometimes class attributes or class variables), as opposed to the attributes that we have seen so far, called instance attributes (or member variables). Static attributes are marked with the keyword static.\nExample. Consider a version of our game where characteristics for each unit type (e.g. default health, etc.) can be declared manually, in a text file. The path to this file could be stored as a static attribute, as follows:\npublic class Unicorn { static String configFile = \u0026#34;units/unicorn.txt\u0026#34;; int health; public Unicorn(){ health = getHealthFromConfigFile(configFile); } public regen(){ health++; } } Each instance of Unicorn carries its own value for the attribute health. But the value of configFile is unique.\nFor instance, the following program creates in memory a unique string for configFile, which is carried by the class.\nUnicorn u1 = new Unicorn(); Unicorn u2 = new Unicorn(); Static methods # Similarly to a static attribute, a static method does not depend on a specific object, as opposed to an instance method. Example (continued).\nWe can add to our class Unicorn a static method that checks whether the configuration file exists:\npublic class Unicorn{ ... static boolean configFileExists() { return Files.exists(Paths.get(configFile)); } } (note that the method getHealthFromConfigFile also may also be static, if its execution is identical for all instances of Unicorn).\nRemember that an instance method can be called outside of the class where it is declared, using an instance of the class followed by .:\nUnicorn myUnicorn = new Unicorn(); myUnicorn.regen(); A static method can (syntactically) be called in the same way, for instance:\nUnicorn myUnicorn = new Unicorn(); boolean valid = myUnicorn.configFileExists(); However, this is often discouraged, because this syntax can be misleading (in this example, configFileExists can be mistaken for an instance method).\nAlternatively, since the method depends on the class (rather than an instance), the call can be prefixed with the class name. This syntax is often preferred, because it leaves no ambiguity. For instance:\nboolean valid = Unicorn.configFileExists(); Note that there may be several instances of a same class in memory during the execution of a program, or no instance at all. This is why a static method cannot reference an instance method or attribute. For instance, adding the following static method to our class would cause a compilation error, because health is an instance attribute.\npublic class Unicorn { static void reduceHealth(){ health--; } } Inheritance # Two static methods with the same name and signature can be declared in a class and a superclass. In Java\u0026rsquo;s terminology, this is not called method overriding, but instead method hiding. An important difference is that dynamic dispatch (a.k.a. runtime polymorphism) does not apply to this case (the method to be called is determined at compile time, rather than run time).\nExample (continued).\nLet us extend our example with a subclass of Unicorn that hides the static method configFileExists.\npublic class EvilUnicorn extends Unicorn { static boolean configFileExists(){ return false; } } Now consider the following program, where the method getUnicorns produces an array of unicorns that depend on the player\u0026rsquo;s input. The specific type of objects in this array (Unicorn or EvilUnicorn) cannot be determined at compile time.\nUnicorn[] unicorns = getUnicorns(); for (Unicorn unicorn: unicorns){ System.out.println(unicorn.configFileExists()); } } In this example, the method of the superclass (i.e. Unicorn.configFileExists) will be executed for each object in the array, regardless of its type.\nThis is another reason why calling a static method via an instance (rather than via a class name) is often discouraged. In this example, writing Unicorn.configFileExists() would make it clear that this loop serves no purpose (the same method is executed unicorns.length times).\nReflection # Java (as well as C#) offers a mechanism called reflection to intuitively treat classes analogously to objects. Precisely, each class of a program (e.g. the class Unicorn) is associated with an object that represents it. This object is itself an instance of the Java class called Class. It can be accessed either:\nvia an instance of the class: Unicorn myUnicorn = new Unicorn(); Class unicornClass = myUnicorn.getClass(); or via the qualified name of the class (assuming for instance that the file Unicorn.java is in the folder \u0026lt;workingDirectory\u0026gt;/src/main/java/org/units): Class unicornClass = Class.forName(\u0026#34;org.units.Unicorn\u0026#34;); The instance methods of the class Class are listed here. Among others, they allow:\nlisting the attributes of the class, retrieving its immediate superclass, or the interfaces that it implements, creating a new instance of this class, etc. Reflection is a powerful feature. It is rarely used in everyday code, but can be helpful in specific situations. Notably, it is used (internally) by numerous Java frameworks such as Spring, Jackson or JUnit.\n"},{"id":73,"href":"/docs/env/sections/ide/","title":"IDE","section":"Development environment","content":" Integrated development environment (IDE) # An IDE is an application that consists of a source code editor with additional functionalities such as a debugger or build automation.\nFor this course, you can use any IDE (or enhanced code editor) for Java with at least the following features:\na debugger navigation to variable/class/interface declaration and usage, variable/class/interface renaming, Maven integration, Gradle integration if you choose the board game as your project. We give a brief overview of the most popular choices (for Java).\nEclipse, Netbeans and Intellij IDEA # All three of these editors have similar functionalities, and any of these three can be used for this course. All three were designed with Java in mind, and thus offer advanced integration with a variety of Java frameworks. Each of them also supports other programming languages, but the list varies from one editor to the other.\nAs of today, Intellij IDEA (IntelliJ for short) is probably the most popular Java-centric editor. This is a closed-source project, thus offering more limited customization than the other two.\nEclipse is an open-source project with a large ecosystem. It is known for its community support and its advanced plugin system, which led to the development of a variety of extensions over the years (including support for C/C++, Python, etc.). Note that for performance reasons, Eclipse comes with its own Java Virtual Machine (JVM), which in some (rare) cases may not behave like other JVMs.\nNetbeans is also an open-source project. Notably, Netbeans provides a graphical tool to design Graphical User Interfaces (GUIs) for the Java Swing framework. However, we do not recommended using it for an advanced GUI (multiple windows, etc.), because the generated code can be very difficult to maintain or debug.\nVisual Studio Code (VSCode) # Warning. VSCode and Visual Studio are two independent programs, and serve different purposes. In particular, Visual Studio does not support Java (anymore). Note. VSCode is often categorized as a code editor rather than an IDE. For this course, VSCode (together with some plugins) can serve as a Java IDE, so we will refer to it as an IDE for simplicity. VSCode is a (mostly) open-source project developed by Microsoft. Precisely, Code-OSS is a (fully) open source editor, and VSCode is a distribution of Code-OSS with additional features.\nVSCode has probably become the most popular code editor among developers. For instance, VSCode is used by 74% of respondents of the 2023 StackOverflow developer survey.\nThe success of VSCode is often explained by its rich repository of (community-developed) plugins. This may in turn be explained by the fact that VScode is based on Electron, and thus allows writing plugins in Javascript.\nNote that VSCode was not developed as a Java code editor, but as a general-purpose editor with a focus on web development (Node.js/Javascript). However, VSCode can serve as a Java IDE (at least to some extent) thanks to some plugins. For this course, you may use the extension pack for Java. If you choose the board game as your project, you may also need a plugin for Gradle, such as this one.\nIn some cases, using VSCode may require a little bit more configuration than a Java-centric IDE.\n"},{"id":74,"href":"/docs/errors/sections/errors/","title":"Java errors","section":"Errors","content":" Java errors # Aside from exceptions, a Java program can throw a so-called Error.\nAccording to the Javadoc for the class Error:\nAn Error [\u0026hellip;] indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions.\nFor instance, some subclasses or Error are OutOfMemoryError and StackOverflowError.\n"},{"id":75,"href":"/docs/recursion/","title":"Recursion","section":"Docs","content":" Recursion # Warmup # Exercise In this exercise, we assume that a folder can only contain files or other folders.\nWrite (in pseudocode) a method void printFiles(String folder) that:\ntakes as input a path to an (existing) folder, and prints a path to each file contained recursively in this folder (in any order). For instance, in the following example,\n└── foo ├── fred.txt └── bar ├── thud.txt └── waldo.txt printFiles(\u0026quot;foo\u0026quot;) could print:\nfoo/fred.txt foo/bar/thud.txt foo/bar/waldo.txt printFiles(\u0026quot;foo/bar\u0026quot;) could print:\nfoo/bar/thud.txt foo/bar/waldo.txt You can assume that the following methods are available:\nvoid print(String string) prints the input string, boolean isFile(String path) returns true iff path is a path to a file, Set\u0026lt;String\u0026gt; content(String path) takes a path to a folder, and returns a path to each file or folder that it contains (non-recursively). E.g. content(\u0026quot;foo\u0026quot;) returns { \u0026quot;foo/fred.txt\u0026quot;, \u0026quot;foo/bar\u0026quot; }. Possible solution void printFiles(String folder){ foreach child in content(folder){ if(isFile(child)){ print(child) } else { printFiles(child) } } } Recursive method # Definition. A method is recursive if it calls itself, directly or indirectly. For instance (in pseudocode):\nthe following method is recursive: myMethod() { ... myMethod() ... } the following two methods are recursive: myMethod1() { ... myMethod2() ... } myMethod2() { ... myMethod1() ... } Usage # In theory, a recursive algorithm can be rewritten using loops only (and conversely).\nHowever, in practice, some problems are easier to solve recursively. In particular, this is the case of many problem that involve tree-like structures (e.g. a folder, a JSON or XML document, an algebraic expression, etc.), and more generally graphs.\nThe following methodology can be used to solve a variety of problems: Methodology. To solve a problem recursively:\n(Base case). If the input $I$ is minimal (e.g. of size 0 or size 1), then solve the problem directly. (Inductive case). Otherwise: Decompose $I$ into smaller inputs $I_1$, .., $I_k$. Solve the problem (recursively) for $I_1$, .., $I_k$. Combine the results (if needed). In other words, in the inductive case, solve the problem for $I$ under the assumption that it can be solved for $I_1$, .., $I_k$.\nExample: binary trees # Definition. An ordered tree is a tree where the children of each node are totally ordered. Definition. A binary tree is an ordered tree where each node has exactly two (possibly null) children. Example. This is a binary tree: Exercise Let us represent a node in a binary tree as an instance of the following class:\nWrite (in pseudocode) a method int sum(Node root) that takes as input the root of a binary tree, and returns the sum of all values in the tree.\nFor instance, for the following tree, the method should return 13:\nPossible solution int sum(Node root){ // base case if (root == null){ return 0 } // inductive case return root.value + sum(root.leftChild) + sum(root.rightChild) } Exercise Let us represent a binary tree as above, but where nodes have no label:\nWrite (in pseudocode) a method int height(Node root) that takes as input the root of such a tree, and returns the number of nodes in the longest branch of this tree.\nFor instance, for the following tree, the method should return 4:\nPossible solution int height(Node root){ //base case if (root == null){ return 0 } // inductive case return 1 + max( height(root.leftChild), height(root.rightChild) ) } Processing order # Exercise Let us represent a binary tree as above, but where nodes are labeled with a character.\nConsider the following recursive algorithm:\n1 2 3 4 5 6 7 8 traverse(Node root){ // inductive case only (do nothing in the base case) if (root != null){ print(root.label) traverse(root.leftChild) traverse(root.rightChild) } } What does this algorithm print for the following input tree?\nSolution A B D H E I J C F K L G M Exercise What about the following algorithm (for the same tree)?\n1 2 3 4 5 6 7 8 traverse(Node root){ // inductive case only (do nothing in the base case) if (root != null){ traverse(root.leftChild) print(root.label) traverse(root.rightChild) } } Solution D H B I E J A K F L C G M Exercise And this algorithm?\n1 2 3 4 5 6 7 8 traverse(Node root){ // inductive case only (do nothing in the base case) if (root != null){ traverse(root.leftChild) traverse(root.rightChild) print(root.label) } } Solution H D I J E B A K L F M G C Definition. In the above exercises, the three node processing orders are respectively called pre-order traversal, in-order traversal and post-order traversal. These three algorithms can be adapted to solve a variety of problems.\nHint. In-order traversal processes nodes in left-to-right order (when projected to a line). Exercise Let us consider once again a binary tree where nodes are labeled with a character.\nWrite (in pseudocode) a method Node leftMost(Node root, char label) that returns the leftmost node labeled with label in the tree rooted in root (or null if there is no such node).\nPossible solution We can adapt the in-order traversal algorithm (above), as follows:\nNode leftMost(Node root, char label){ // Base case. if(root == null){ return null } // Inductive case. // Explore the left subtree first. Node candidate = leftMost(root.leftChild, label) // If the call succeeded, then we found the leftmost occurrence in the tree. if(candidate != null){ return candidate } // Otherwise the next candidate (from left to right) is the current node. if (root.label == label) { return root } // If both attempts failed, then explore the right subtree. return leftMost(root.rightChild, label) } Syntax # A recursive method often has the following structure (in pseudocode):\nmyMethod(Type input) { // base case if(\u0026lt;input is minimal\u0026gt;) { ... // inductive case } else { ... myMethod(smallerInput_1) ... myMethod(smallerInput_2) ... ... myMethod(smallerInput_k) ... } } Observation. Termination is guaranteed if the input of each recursive call is strictly smaller than the current input. Besides, a recursive method is often an auxiliary method. For instance, some problems with an array as input can be solved recursively by dividing the array in sub-segments, as follows (in pseudocode):\nsolveProblem(Type[] array) { if(array.length != 0){ // the initial segment is the whole array solveProblemRec(array, 0, array.length - 1) } } solveProblemRec(Type[] array, int startIndex, int endIndex) // base case (segment of length 1) if(startIndex == endIndex) { ... // inductive case } else { // middle index (rounded down) int middleIndex = (startIndex + endIndex) / 2 ... // recursive call on the left subsegment solveProblemRec(array, startIndex, middleIndex) ... // recursive call on the right subsegment solveProblemRec(array, middleIndex + 1, endIndex) ... } } It is also frequent for a recursive method to return multiple values. For instance, in a binary tree, return the set of labels that appear in a tree as well as the number of nodes.\nIn Java 14 or later, this can be easily achieved by returning a record. For instance:\nrecord Result(Set\u0026lt;Character\u0026gt; labels, int numberOfNodes){}; Result myMethod(Node root) { // base case if(root == null) { return new Result(new HashSet\u0026lt;\u0026gt;(), 0); // inductive case } else { // recursive calls Result leftResult = myMethod(root.leftchild); Result rightResult = myMethod(root.rightchild); // build the union of all labels Set\u0026lt;Character\u0026gt; allLabels = leftResult.labels; allLabels.addAll(rightResult.labels); allLabels.add(root.label); return new Result( allLabels, leftResult.numberOfNodes + rightResult.numberOfNodes + 1 ); } } "},{"id":76,"href":"/docs/git/sections/sharing/","title":"Synchronization: remote, push, pull","section":"git","content":" Synchronization: remote, push, pull # List remotes # To list the remote(s) associated to your repository (name and address of each remote), you can run\ngit remote -v Upload # If the current branch is already shared with a remote, you can upload it with\ngit push Otherwise, you can share this branch (and its commits) with\ngit push -u \u0026lt;remoteName\u0026gt; \u0026lt;branchName\u0026gt; To delete a remote branch, run\ngit push \u0026lt;remoteName\u0026gt; -d \u0026lt;branchName\u0026gt; Alternatively, you can delete a remote branch using the web interface of your hosting service.\nDownload # If your current branch is shared with your remote, you can update your local copy with\ngit pull Warning. When pulling, git will try to perform a fast-forward merge of the remote branch into your local copy. If you follow the basic workflow presented earlier, then this fast-forward merge should succeed. If it does not, then git will suggest you a command to perform a classical merge instead. "},{"id":77,"href":"/docs/git/sections/backtracking/","title":"Backtracking","section":"git","content":" Backtracking # We already saw how a file can be unstaged (with git reset) before it is committed.\nIf the file was committed by mistake, then there are at least three scenarios.\nReset # If the commits that contain the file have not been shared yet with a remote, then these commits can be cancelled locally. The command\ngit reset \u0026lt;ID\u0026gt; moves the pointer for the current branch \u0026ldquo;back in time\u0026rdquo; to the commit \u0026lt;ID\u0026gt;. This has the effect of deleting all posterior commits.\nRevert # If the commits that contain the file have been shared with a remote, then git revert is often recommended by default.\nThis command does not affect the history of a branch (as opposed to git reset). Instead, if adds a commit to the history that reverts the k last commits on the current branch.\nFor instance\ngit revert HEAD adds a commit that reverts the latest one.\nAnd\ngit revert HEAD~3.. adds a commit that reverts the 3 latest ones.\nRewriting history # In some (rare) scenarios, one may need to rewrite the history of a branch that has already been shared.\nFor instance, sensitive information (passwords, etc.) or a large dataset may have been committed by mistake.\nDedicated tools may be used in such scenarios.\n"},{"id":78,"href":"/docs/objects/sections/clone/","title":"Duplicating objects","section":"Objects and classes","content":" Duplicating objects # In some scenarios, it may be useful to duplicate an object.\nIn Java, as we saw earlier, copying the value of a variable with reference type does not copy the object that it references. For instance, the following program outputs \u0026ldquo;yellow\u0026rdquo;:\nUnicorn unicorn = new Unicorn(\u0026#34;green\u0026#34;); Unicorn shallowCopy = unicorn; unicorn.color = \u0026#34;yellow\u0026#34;; System.out.println(shallowCopy.color); The need to duplicate objects may notably appear in a program that rely on concurrency.\nExercise In our game, the \u0026ldquo;view\u0026rdquo; component is in charge of rendering the game visually.\nThis component exposes a method called drawSnapshot that takes as input a game snapshot and draws this snapshot on screen. The backend calls this method whenever a snapshot must be drawn. However, the backend may send these snapshots faster than they can be displayed (due to the duration of on-screen animations).\nTo deal with this scenario, the \u0026ldquo;view\u0026rdquo; buffers the snapshots that it receives (displaying a new snapshot only after all previously submitted ones have been displayed). For the sake of this exercise, you can think of this buffer as an array with type Snapshot[].\nNow consider the following method deleteUnit(int x, int y), executed by our backend each time it receives the instruction to delete a unit:\npublic class Backend implements EventHandler { Snapshot currentSnapshot; ... public void deleteUnit(int x, int y){ if(\u0026lt;\u0026#34;there is a unit on the tile x, y\u0026#34;\u0026gt;){ removeUnitFromTile(x, y); drawSnapshot(currentSnapshot); shiftUnitsInColumn(x); drawSnapshot(currentSnapshot); performUnitMerges(); drawSnapshot(currentSnapshot); ... } } } where the auxiliary methods removeUnitFromTile, shiftUnitsInColumn and performUnitMerges may modify the object currentSnapshot.\nObserve that the method deleteUnit calls drawSnapshot three times.\nNow let us assume that the buffer of the \u0026ldquo;view\u0026rdquo; is nonempty when this method is executed, so that the 3 snapshots are added to the buffer, before any of them can be rendered on screen.\nHow many of these 3 snapshots will be drawn on screen?\nSolution Only the third snapshot will be drawn (three times), because the buffer contains three references to the same object. Shallow, deep and hybrid copy # Copying a reference to an object can be viewed as the shallowest possible form of copy. As we saw already, this is what happens in Java when a variable with reference type is passed as argument.\nAt the other end of the spectrum is a so-called deep copy, where all attributes of the copied object are duplicated, recursively. In this case, the copy or any object that it references (recursively) can be modified without affecting their original counterparts.\nBetween these two extremes:\na shallow copy creates a new object (with fresh attributes), but does not copy referenced objects recursively, a hybrid copy is anything between a shallow copy and a deep copy. in Java # Copy constructor # A copy can be performed in Java with a so-called copy constructor. This is an additional constructor that takes an instance of the class as input, and returns a copy of this instance. For example:\npublic class Hero { int health; // standard constructor public Hero(){ this.health = 10; } // copy constructor public Hero(Hero original){ this.health = original.health; } } In order to perform a deep(er) copy, a copy constructor may call another copy constructor. For example:\npublic class Snapshot { Hero firstHero; Hero secondHero; Board board; int remainingActions; // standard constructor public Snapshot(Hero firstHero, Hero secondHero, Board board, int remainingActions){ // some code here ... } // copy constructor public Snapshot(Snapshot original){ this.firstHero = new Hero(original.firstHero); this.secondHero = new Hero(original.secondHero); this.board = new Board(original.board); this.remainingActions = original.remainingActions; } } Warning. Similarly to what we saw with the methods toString or equals, beware of recursive implementations of copy constructors, if your program can create an object that refers to itself (directly or indirectly). The method clone # Java also provides a native method called clone to duplicate objects. Like the methods toString and equals that we saw earlier, clone is an instance method of the native Java class Object, which is an (implicit) superclass of every other class.\nOverriding clone can be more concise than using a copy constructor (especially for a class with a large number of attributes).\nWarning. Overriding clone can be error-prone, especially in presence of a class hierarchy (see Effective Java, Item 13 for further insight). Notably, the overriding class must implement the Cloneable interface, and an implementation of clone usually calls super.clone recursively (even for a class whose only superclass is Object). For these reasons, overriding clone is sometimes discouraged, in favor of conceptually simpler solutions (like copy constructors). "},{"id":79,"href":"/docs/input/sections/json/","title":"JSON Serialization","section":"I/O and serialization","content":" JSON serialization # A number of (external) libraries allow transforming Java objects into JSON objects and conversely. For instance Jackson, Gson, JSON-java, JSON-B and JSON-P.\nIn this section, we focus on Jackson.\nNote. Jackson was initially designed for JSON, but extensions of Jackson allow manipulating other formats: XML, TOML, YAML, CSV and Java property files. Install # Jackson can be used within a Maven project, by declaring the following dependency\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.fasterxml.jackson.core\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jackson-databind\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.17.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; And similarly for Gradle:\nimplementation group: \u0026#39;com.fasterxml.jackson.core\u0026#39;, name: \u0026#39;jackson-databind\u0026#39;, version: 2.17.0 For the latest version, search Maven Central.\nInstalling this dependency will transitively install:\njackson-annotations jackson-core Basic syntax # Many tutorials can be found online about Jackson: for instance Jackson in N minutes on the GitHub page of the jackson-databind library.\nWe focus here on some simple features of the library.\nAn ObjectMapper can be used to map a Java object (or array or value) to some JSON string, and conversely.\nObjectMapper mapper = new ObjectMapper(); // Indent the output JSON strings when applicable mapper.enable(SerializationFeature.INDENT_OUTPUT); Convert a value # Serialize # // Outputs 15 System.out.println(mapper.writeValueAsString(15)); // Outputs \u0026#34;abcd\u0026#34; System.out.println(mapper.writeValueAsString(\u0026#34;abcd\u0026#34;)); Deserialize # Convert an array or collection # Serialize # // Outputs [2,3] System.out.println(mapper.writeValueAsString(new int[]{2, 3})); // Outputs either [2,3] or [3,2] System.out.println(mapper.writeValueAsString(Set.of(2, 3))); Map\u0026lt;String, Integer\u0026gt; studentToAge = Map.of( \u0026#34;Alice\u0026#34;, 20, \u0026#34;Bob\u0026#34;, 19 ); /* Outputs { \u0026#34;Alice\u0026#34; : 20, \u0026#34;Bob\u0026#34; : 19 } */ System.out.println(mapper.writeValueAsString(studentToAge)); Map\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt; studentToMarks = Map.of( \u0026#34;Alice\u0026#34;, List.of(8,9), \u0026#34;Bob\u0026#34;, List.of(6,10) ); /* Outputs { \u0026#34;Alice\u0026#34; : [ 8, 9 ], \u0026#34;Bob\u0026#34; : [ 6, 10 ] } */ System.out.println(mapper.writeValueAsString(studentToMarks)); Deserialize # // Creates an array with values [2,3,2] int[] integers = mapper.readValue(\u0026#34;[2,3,2]\u0026#34;, int[].class); // Creates an Arraylist with values [2,3,2] List\u0026lt;Integer\u0026gt; list = mapper.readValue(\u0026#34;[2,3,2]\u0026#34;, List.class); // Creates a HashSet with values {2,3} Set\u0026lt;Integer\u0026gt; set = mapper.readValue(\u0026#34;[2,3,2]\u0026#34;, Set.class); // Creates a LinkedHashMap with values {\u0026#34;Alice\u0026#34; -\u0026gt; 20, \u0026#34;Bob\u0026#34; -\u0026gt; 19} Map\u0026lt;String, Integer\u0026gt; map = mapper.readValue(\u0026#34;{\\\u0026#34;Alice\\\u0026#34;: 20, \\\u0026#34;Bob\\\u0026#34;: 19}\u0026#34;, Map.class); Convert an object # Serialize # public class City { public String name; public Country country; public City(String name, Country country) { this.name = name; this.country = country; } } public class Country { public String name; public City capital; public Country(String name, City capital) { this.name = name; this.capital = capital; } } Country italy = new Country(\u0026#34;Italy\u0026#34;, null); City rome = new City(\u0026#34;Rome\u0026#34;, italy); /* Outputs: { \u0026#34;name\u0026#34; : \u0026#34;Rome\u0026#34;, \u0026#34;country\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Italy\u0026#34;, \u0026#34;capital\u0026#34; : null } */ System.out.println(mapper.writeValueAsString(rome)); However, recall that a JSON object cannot contain a reference to another JSON object. As a consequence, some Java objects cannot be finitely represented in JSON:\nitaly.capital = rome; // Throws a JsonMappingException: Document nesting depth (1001) exceeds the maximum allowed mapper.writeValueAsString(rome); By default, Jackson serializes:\npublic (instance) attributes, non-public fields that have a getter method. However, it is also possible to force serialization of other attributes, either for all classes:\nmapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); or for a specific class:\n@JsonAutoDetect(fieldVisibility = Visibility.ANY) public class MyClass { ... } Warning. If a public attribute attribute and a getter getAttribute coexist, then the latter takes precedence. Some public attributes can also be explicitly ignored:\n@JsonIgnoreProperties(\u0026#34;name\u0026#34;) public class MyClass { public String name; ... } Deserialize # In order to create a Java object out of a JSON object, the attributes (a.k.a. \u0026ldquo;keys\u0026rdquo;) of the JSON object must be mapped to attributes of the targeted class.\nThis can be done by adding (Jackson-specific) annotations to a constructor for the class. For instance:\npublic class City { public String name; public int zipCode; @JsonCreator public City(@JsonProperty(\u0026#34;name\u0026#34;) String name, @JsonProperty(\u0026#34;code\u0026#34;) int zipCode) { this.name = name; this.zipCode = zipCode; } } String jsonCity = \u0026#34;{\\\u0026#34;name\\\u0026#34; : \\\u0026#34;Bologna\\\u0026#34;, \\\u0026#34;code\\\u0026#34; : 40100 }\u0026#34;; // Contains the object City{ name: \u0026#34;Bologna\u0026#34;, zipCode: 40100 } City bologna = mapper.readValue(jsonCity, City.class); In the example above, the annotations @JsonProperty(\u0026quot;name\u0026quot;) and @JsonProperty(\u0026quot;code\u0026quot;) indicate which JSON attributes are used to create an instance of Country. Note that the name of the JSON attribute and the name of the constructor argument can differ (e.g. \u0026ldquo;code\u0026rdquo; and zipCode in this example).\nThese annotations can also be used to populate more complex structures, such as nested objects, arrays, collections, etc. For instance:\npublic class Country { String name; @JsonCreator public Country(@JsonProperty(\u0026#34;name\u0026#34;) String name) { this.name = name; } } String jsonCountries = \u0026#34;[ \u0026#34; + \u0026#34;{\\\u0026#34;name\\\u0026#34; : \\\u0026#34;Italy\\\u0026#34;}, \u0026#34; + \u0026#34;{\\\u0026#34;name\\\u0026#34; : \\\u0026#34;Austria\\\u0026#34;} \u0026#34; + \u0026#34;]\u0026#34;; /* Contains the objects Country{ name: \u0026#34;Italy\u0026#34; } and Country{ name: \u0026#34;Austria\u0026#34; }, in this order. */ Country[] countries = mapper.readValue(jsonCountries, Country[].class); Exercise What does the following program print?\npublic class City { public String name; public Country country; @JsonCreator public City(@JsonProperty(\u0026#34;name\u0026#34;) String name, @JsonProperty(\u0026#34;country\u0026#34;) Country country) { this.name = name; this.country = country; } } public class Country { public String name; @JsonCreator public Country(@JsonProperty(\u0026#34;name\u0026#34;) String name){ this.name = name; } } Country italy = new Country(\u0026#34;Italy\u0026#34;); City rome = new City(\u0026#34;Rome\u0026#34;, italy); City bologna = new City(\u0026#34;Bologna\u0026#34;, italy); City[] cities = new City[]{rome, bologna}; // count countries System.out.println(countCountries(cities)); // serialize String serializedCities = mapper.writeValueAsString(cities); // deserialize City[] deserializedCities = mapper.readValue(serializedCities, City[].class); // count countries System.out.println(countCountries(deserializedCities)); // Counts the number of distinct countries that appear in the input array private int countCountries(City[] cities) { Set\u0026lt;Country\u0026gt; countries = new HashSet\u0026lt;\u0026gt;(); for(City city: cities){ countries.add(city.country); } return countries.size(); } Solution 1\n2\nWriting to or reading from a file # The ObjectMapper class provides utility methods to write (resp. read) the JSON output (resp. input) directly to (resp. from) a file. In particular, in the examples above:\nwriteValueAsString(o) can be replaced with writeValue(file, o), readValue(string, class) can be replaced with readValue(file, class). For instance:\n// Serialize try { mapper.writeValue(new File(\u0026#34;path/to/file.json\u0026#34;), rome); } catch (IOException e) { throw new RuntimeException(e); } // Deserialize City myCity; try { myCity = mapper.readValue(new File(\u0026#34;path/to/file.json\u0026#34;), City.class); } catch (IOException e) { throw new RuntimeException(e); } "},{"id":80,"href":"/docs/env/sections/text_editor/","title":"Text editor","section":"Development environment","content":" Text editor # A text editor allows you to edit plain (i.e. non-formatted) text. A text editor can open any file produced with a text editor (and more), regardless of the file\u0026rsquo;s extension.\nIn this sense, Microsoft Word is not a text editor (neither are Apple Pages or LibreOffice Writer).\nMost operating systems comes with one or several text editor(s) pre-installed, such as Notepad++ (Windows), TextEdit (macOS), gedit (default Ubuntu), etc.\nUsage # Your IDE is an (enhanced) text editor, so you can use it as such.\nBut it some scenarios, it can be useful to use a lighter program, for instance for:\nediting the configuration file of a program, modifying a small script (or even a single command-line instruction) copy-pasted from the web, etc. Among other reasons:\nopening an IDE can take time, if your IDE has autosave enabled, you may accidentally add unrelated files to your current project, etc. Advanced text editors # For most purposes, a basic text editor should be sufficient.\nBut depending on your workflow, you may want to try a more advanced one.\nVSCode # We already introduced VSCode in the section dedicated to IDEs.\nvi and emacs # We also bring to your attention two keyboard-centric editors called vi and emacs. Both were developed in the 70\u0026rsquo;s (before the mouse became a widespread peripheral) but are still commonly used today (in some form) by developers.\nWe do not recommend learning vi or emacs at this (early) stage of your studies, because it often requires time, and you arguably have more fundamental thing to learn. But you may give them a try at some point of your career, because they may significantly improve your productivity.\nvi/vim/neovim # vi was initially released 1978, as part of the first BSD distribution. The original program is rarely used today, but vim (for \u0026ldquo;vi improved\u0026rdquo;), released in 1991, and neovim, released in 2015 are still popular among developers. For instance, 22% (resp. 12%, non-exclusive) of respondents to the 2023 Stack Overflow developer survey use vim (resp. neovim) as a code editor.\nvi/vim/neovim is a so-called modal editor, meaning that users can switch between different modes. In one mode, pressing a standard key inserts the corresponding character on screen, whereas in another mode, pressing the same key has a different functionality (navigation, copy, paste, etc.). These functionalities are referred to as vi keybindings or vi motions, and allow performing a variety of text editing operations in an efficient way.\nvi keybindings are commonly used in applications other than vi/vim/neovim, with dedicated plugins. For instance, most code editors/IDEs (VSCode, IntelliJ IDEA, emacs, etc.), terminal emulators or even web browsers have plugins for vi keybindings.\nNote. Vim and neovim are very customizable, with comprehensive collections of (community-developed) plugins, which allows using them as IDEs. We do not recommend trying this at this stage of your studies, because configuration may require a very significant time investment (significantly more than VSCode for instance). The original vi still comes pre-installed on many operating systems (Windows, macOS, Linux, \u0026hellip;), and may be the default text editor opened by terminal-based applications (e.g. git) on your system. If this is the case (and if you do not know the vi keybindings), we recommend changing this setting. Emacs # Emacs was initially written in 1976. The most popular version is GNU Emacs, released in 91, was notably co-developed by Richard Stallman.\nEmacs is partly responsible for popularizing (sequences of) combinations of keys (e.g. Ctrl+\u0026lt;letter\u0026gt;), as opposed to modal editors like vi. GNU Emacs has more than 10 000 built-in commands, and also provides a (limited) mouse interface.\n5% of respondents to the 2023 Stack Overflow developer survey use emacs as a code editor.\nEmacs is also very customizable, with a comprehensive collections of (community-developed) plugins (probably more comprehensive than vim), and dedicated software repositories. Notably, Emacs tends to serve as a unique user interface for a variety of tasks (code editing, terminal emulation, email management, web browsing, playing music/videos, etc.). Note. Emacs can be used as an IDE, but for the same reason as for vim or neovim, we do not recommend trying this at this stage of your studies. "},{"id":81,"href":"/docs/env/sections/eval/","title":"Evaluation environment","section":"Development environment","content":" Evaluation environment # The evaluation environment for your project is a virtual machine (with Ubuntu 20) deployed on Microsoft Azure. You are not supposed to develop on this machine, but your project must run in this environment to be evaluated.\nEach student gets his or her own clone of the original machine. Maven, Gradle, git and a Java 17 JDK are already installed. You will also be granted administrator rights, so that you can install additional software (if any) needed to run your project.\nYou can log in to this machine via ssh (using a terminal), or via RDP (using an RDP client).\nHere is a (non-exhaustive) list of RDP clients:\nWindows:\nWindows Remote Desktop (built in), also called MSTSC Royal TS macOS:\nMicrosoft Remote Desktop Royal TS Linux:\nRemmina rdesktop The registration link is shared on the Microsoft Team for this course. After logging in (with your Unibz credentials), you should see the following:\nToggling the button (bottom-left) will start your own clone of the virtual machine (this may take a few minutes).\nOnce your machine is running, click on the 3 dots (bottom right) and select \u0026ldquo;show RDP information\u0026rdquo;. This will give you the string (host name and port) needed by your RDP client to connect to the machine.\nThe credentials for logging in to the machine are also shared on the Microsoft Team for this course.\nOnce connected:\nyou can select a keyboard layout (English, German or Italian) from the drop-down menu at the top right of the screen,\nyou can use the super key (a.k.a. \u0026ldquo;Windows key\u0026rdquo;) or click on \u0026ldquo;Activities\u0026rdquo; (top left) to display the application menu below. To launch a terminal, click on the terminal icon in this menu or press Ctrl + Alt + t.\n"},{"id":82,"href":"/docs/objects/sections/quasi-objects/","title":"Quasi-objects","section":"Objects and classes","content":" Quasi-objects # Enumerated types # Most imperative languages allow the creation of so-called enumerated types.\nAn enumerated type is a datatype for a finite set or enumerated values. For instance, if our game only allows \u0026ldquo;blue\u0026rdquo;, \u0026ldquo;green\u0026rdquo; and \u0026ldquo;red\u0026rdquo; as unit colors, then we may create a dedicated type that only allows these three values.\nIn Java # An enumerated type in Java is a set of constants. These constants are effectively static, meaning that they depends on the class or interface where the enumerated type is declared (similarly to a static attribute). The name of an enumerated type can generally be used like a regular reference type. For instance\npublic class Unit { enum UnitColor {BLUE, GREEN, RED} int health; UnitColor color; public Unit(int health, UnitColor color){ this.health = health; this.color = color; } ... } Note. In the above example, the enumerated type UnitColor could equivalently be represented with an integer. For instance, 0 for blue, 1 for green and 2 for red. However, with such an encoding, a conditional statement (e.g. if or switch) that checks the color of a unit would also need to handle the case of values \u0026lt; 0 or \u0026gt; 2. So (besides readability), a benefit of the enumerated type in this case is that it restricts possible inputs to valid ones. Hint. Enumerated types in Java are significantly more expressive than their counterparts in some other languages. Notably, a Java enum can have its own constructor and methods. Records # A record is an object whose attributes cannot be modified.\nin Java # Records were introduced in Java 14 (2020). They are a convenient way to avoid boilerplate code. Records provide a concise syntax for \u0026ldquo;lightweight\u0026rdquo; classes that are only meant to hold data.\nFor instance, here is the full implementation of a record City:\npublic record City(String name, int zipCode) {} This record has an implicit constructor, and implements equals, hashcode and toString in the expected way. For instance:\nCity florence = new City(\u0026#34;Florence\u0026#34;, 50100); City florenceAgain = new City(\u0026#34;Florence\u0026#34;, 50100); // Outputs true. System.out.println(florence.equals(florenceAgain)); The attributes of a record cannot be modified. For instance, the following program does not compile:\nCity florence = new City(\u0026#34;Florence\u0026#34;, 50100); florence.zipCode = 50121; A record is often declared inside a class or interface. For instance, in our game:\npublic class Board { public record TileCoordinates(int X, int Y){}; ... } Records are convenient for methods that need to return more than one value. For instance:\nTileCoordinates getOngoingMove(); Strings # Interning # Many modern languages (such as Java, C#, Python, Ruby, JavaScript, Go, etc.) support a technique called interning, in order to manage strings in memory. This consists in storing only one copy of each distinct string created during the execution of a program. These strings are stored in a shared pool, and each of them is an immutable object (meaning that it cannot be modified). Some benefits are faster string comparisons, lower memory footprint, etc.\nin Java # In Java, a string is an object. Like for regular objects, comparing two variables of type String with == compares their references:\nString myString = new String(\u0026#34;foo\u0026#34;); String sameString = new String(\u0026#34;foo\u0026#34;); // Outputs false, because the two variables hold different references. System.out.println(myString == sameString); A string can be explicitly interned (i.e. added to the shared pool) with the (instance) method intern. This method:\ntries to add the string to the pool, and then returns a reference to the (only) version of the string contained in the pool. For instance, consider the following program:\n// Creates a string \u0026#34;foo\u0026#34;, String myString = new String(\u0026#34;foo\u0026#34;) // adds it to the pool, myString = myString.intern(); // Creates another string \u0026#34;foo\u0026#34;, String sameString = new String(\u0026#34;foo\u0026#34;); // Outputs false. System.out.println(myString == sameString); // Tries to add \u0026#34;foo\u0026#34; to the pool once again. // Because the pool already contains a version of \u0026#34;foo\u0026#34;, returns a reference to it. sameString = sameString.intern(); // Outputs true, because the two variables now hold the same reference. System.out.println(myString == sameString); A string that is initialized without constructor (i.e. directly with \u0026quot; \u0026ldquo;) is interned. For instance\nString myString = \u0026#34;foo\u0026#34;; String sameString = \u0026#34;foo\u0026#34;; // Outputs true, because of (implicit) interning System.out.println(myString == sameString); In order to support interning, string in Java are immutable.\nIn particular, the instance methods of the class String (like substring, etc.) do not modify a string. Instead, some of them may return (a reference to) a different object. For instance:\nString foo = new String(\u0026#34;foo\u0026#34;); String copy = foo; // Outputs true, because the two variables hold the same object reference. System.out.println(copy == foo); foo = foo.replace(\u0026#39;o\u0026#39;,\u0026#39;O\u0026#39;); // Outputs false, because the method \u0026#39;replace\u0026#39; returns a reference // to another object. System.out.println(copy == foo); The class String overrides the method equals so that it implements string comparison in the expected way. For instance:\nString myString = new String(\u0026#34;foo\u0026#34;); String sameString = new String(\u0026#34;foo\u0026#34;); // Outputs false. System.out.println(myString == sameString); // Outputs true. System.out.println(myString.equals(sameString)); Hint. By default, you can always use equals to compare the values of two strings. This is less error-prone than == (albeit less efficient if the two strings differ). Java boxed types # Java has 8 primitive types: byte, short, int, long, float, double, boolean and char.\nFor each primitive type, Java has a so-called boxed or (wrapper) type: Byte, Short, Integer, Long, Float, Double, Boolean and Character.\nThese types can be used in Java collections (Set, List, etc.), whereas primitive types cannot. Some boxed types also offer additional functionalities, via instance methods (e.g. an Integer can represent a positive numbers up to \\(2^{32} - 1\\) ).\nConstructors for boxed types are deprecated. Instead, instances can be created via so-called autoboxing, for instance:\nInteger myInteger = 2; Character myCharacter = \u0026#39;a\u0026#39;; Several Java operators (like +, ==, \u0026lt;=, etc.) are also overloaded so that they behave with boxed types as they would with primitive types. For instance:\nInteger i = 1; i += 1; Integer j = 2; // Outputs true System.out.println(i == j); Like strings, instances of boxed types are immutable. This can affect performance. For instance:\nfor (Integer i = 0; i \u0026lt; 1000000 ; i++){ ... } may create up to 1 million objects in memory. This is one of the reasons why it is usually recommended to use primitive types whenever possible (see for instance Effective Java, Item 61). Some boxed types are (partially) interned, analogously to strings.\n"},{"id":83,"href":"/docs/abstractdatatypes/sections/sorting/","title":"Sorting","section":"Abstract data types","content":" Sorting # Sorting a collection (of values or objects) is needed in a variety of scenarios.\nSorting criterion # In order to sort a collection of values (resp. objects), we need a sorting criterion, i.e. a way to compare two values (resp. objects).\nSome data types come with a natural way to compare two values. For instance, two real numbers can be compared w.r.t. $\\le$.\nObservation. Some data type have several natural sorting criteria. For instance, strings may be sorted alphabetically from left to right (in English, Hindi, Russian, etc.) or from right to left (in Arabic, Hebrew, Persian, etc.). Question. What about objects, i.e. which sorting criterion can be used to sort a collection of people, cities, sets, lists, trees, etc.?\nAnswer. Any total preorder (i.e. a total, reflexive and transitive binary relation) can be used to sort a collection.\nExercise Which of the following are total preorders (i.e. can be used as a sorting criterion)?\nCompare two real numbers w.r.t. to their absolute value. Compare two people w.r.t. to their age. Compare two people w.r.t. to their age and size, i.e. $\\qquad \\qquad p_1 \\preceq p_2$ iff $\\big(p_1.{\\text{age}} \\le p_2.{\\text{age}}$ and $p_1.{\\text{size}} \\le p_2.{\\text{size}}\\big)$.\nCompare two people w.r.t. to their age or size, i.e. $\\qquad \\qquad p_1 \\preceq p_2$ iff $\\big(p_1.{\\text{age}} \\le p_2.{\\text{age}}$ or $p_1.{\\text{size}} \\le p_2.{\\text{size}}\\big)$.\nCompare two people w.r.t. to their age, and then their size (if they have the same age). Compare two points w.r.t. to their X coordinate, and then their Y coordinate (if they have the same X coordinate). Compare two trees w.r.t. to their number of nodes. Compare two sets w.r.t. to set inclusion. Compare two lists of integers by first sorting them, and then comparing them lexicographically. Solution is a partial preorder, is not transitive, and is a partial order. The others are total preorders.\nProperties of sorting algorithms # Sorting algorithms have been extensively studied. We will not cover them this semester (with one exception), because this is part of another course of the bachelor.\nWe only highlight some of their properties.\nStability # Definition. A sorting algorithm is stable if it preserves the initial order (in the input collection) of two elements that are equivalent w.r.t. to the sorting criterion. Example. Consider an array [u1, u2] of type Unit[], where (the objects referenced by) u1 and u2 both have health 2. And let us sort the elements of this array by health.\nA stable sorting algorithm outputs [u1, u2]. A non-stable sorting algorithm may output [u1, u2] or [u2, u1]. In place # Definition. A sorting algorithm is in place if it does not use additional data structures. in Java # Comparing # Java provides several native ways to define a total preorder. We highlight here two of them.\nComparable # A class T can implement the interface Comparable\u0026lt;T\u0026gt;.\nExample. We can create a class City that implements Comparable\u0026lt;City\u0026gt; as follows:\npublic class City implements Comparable\u0026lt;City\u0026gt; { ... } The interface Comparable\u0026lt;T\u0026gt; specifies a single method\nint compareTo (T otherObject); This method should define a total preorder $\\preceq$ over instances of T, as follows.\nLet $o_1$ be the current object (i.e. the instance used to call the method), and let $o_2$ be the other object (i.e. the argument of the method compareTo). Then this method should return:\na negative integer if $o_1 \\prec_o o_2$ (i.e. if $o_1 \\preceq_o o_2$ and $o_2 \\not\\preceq_o o_1$), 0 if $o_1 =_o o_2$ (i.e. if $o_1 \\preceq_o o_2$ and $o_2 \\preceq_o o_1$), a positive integer otherwise. Example (continued). Here is an implementation of the method compareTo where cities are compared by zip code:\npublic class City implements Comparable\u0026lt;City\u0026gt; { public String name; public int zipCode; public City(String name, int zipCode) { this.name = name; this.zipCode = zipCode; } @Override public int compareTo(City otherCity) { return zipCode \u0026lt; otherCity.zipCode ? -1 : zipCode == otherCity.zipCode ? 0 : 1; } } Hint. Some native Java classes already implement Comparable, in the expected way. For instance Integer, String (left to right alphabetical order), etc. Hint. Comparator methods are also available for primitive types (like int, or bool). For instance, Integer has a static method compare(int x, int y) that behaves like compareTo. So the method compareTo in the example above can be simplified as follows:\npublic class City implements Comparable\u0026lt;City\u0026gt; { ... @Override public int compareTo(City otherCity) { return Integer.compare(zipCode, otherCity.zipCode); } } Warning. The method compareTo is implicitly used by some of Java\u0026rsquo;s native data structures (e.g. TreeSet). So it is usually recommended to implement compareTo in such a way that it \u0026ldquo;complies\u0026rdquo; with equals (and hashCode). This means that\n$\\qquad \\qquad $o1.compareTo(o2) should return 0 iff o1.equals(o2) returns true.\nIf you want to use a sorting criterion that does not satisfy this constraint (or if you want to use alternative sorting criteria for the same class), then we recommend using a Comparator instead (explained below).\nComparator # A Comparator in Java is intuitively a total preorder.\nThe Java interface Comparator\u0026lt;T\u0026gt; specifies one method that must be implemented by each instance, with signature:\nint compare(T o1, T o2) The return value (negative integer, 0 or positive integer) has the same meaning as the one of Comparable.compareTo.\nExample (continued). We can create another comparator for our class City, which uses the city\u0026rsquo; name rather than zip code.\npublic class CityNameComparator implements Comparator\u0026lt;City\u0026gt; { @Override public int compare(City c1, City c2) { return c1.name.compareTo(c2.name); } } The interface Comparator also provides convenient (default) methods. For instance, the method thenComparing returns the lexicographic product of two comparators.\nSorting # Java provides several methods to sort an array or collection. We highlight here a few of them.\nSorting an array # For an array of type T[], the static method Arrays.sort(T[] array) can be called as follows:\nExample.\nint[] integers = new integer[]{2,1,3,2}; Arrays.sort(integers) // Outputs [1,2,2,3] System.out.println(Arrays.toString(array)); This method sorts the array using the so-called \u0026ldquo;natural ordering\u0026rdquo; for type T. The \u0026ldquo;natural ordering\u0026rdquo; is:\nthe one expected for primitive types (like int), boxed types (like Integer) and a few other native types (like String or Date); a list can be found here, the one defined by T.compareTo if T implements Comparable, underspecified if T is a class that does not implement Comparable. The method Arrays.sort(T[] array, Comparator\u0026lt;? super T\u0026gt; c) is similar, but it uses the input comparator to sort the array.\nExample(continued).\nCity trento = new City(\u0026#34;Trento\u0026#34;, 38121); City bologna = new City(\u0026#34;Bologna\u0026#34;, 40100); City[] cities = new City[]{trento, bologna}; // After this, the array \u0026#39;cities\u0026#39; contains [bologna, trento] Arrays.sort(cities, new CityNameComparator()); Property. Both methods guarantee stable sorting. For instance:\nCity trento1 = new City(\u0026#34;Trento\u0026#34;, 38122); City bologna = new City(\u0026#34;Bologna\u0026#34;, 40100); City trento2 = new City(\u0026#34;Trento\u0026#34;, 38121); City[] cities = new City[]{trento1, bologna, trento2}; // After this, the array \u0026#39;cities\u0026#39; contains [bologna, trento1, trento2] Arrays.sort(cities, new CityNameComparator()); Note. For an array with primitive type (like int[]), these two methods use (a version of) the Quicksort algorithm, even though Quicksort is not stable. Stability is irrelevant for these types: for instance, permuting the elements of the array [5,5] yields the same array.\nHowever, for an array with (arbitrary) reference type (like City[]), these methods use (a version of) the MergeSort algorithm, which is stable.\nSorting a list # The class Collections provides a method Collection.sort(List\u0026lt;T\u0026gt; list), whose behavior is analogous to Arrays.sort. In particular, it also guarantees stable sorting. Like Arrays.sort, it comes in two flavors (with and without comparator).\nExample(continued).\nCity bologna = new City(\u0026#34;Bologna\u0026#34;, 40100); City trento = new City(\u0026#34;Trento\u0026#34;, 38122); List\u0026lt;City\u0026gt; cities = new LinkedList(); cities.add(bologna); cities.add(trento); // After this, the list \u0026#39;cities\u0026#39; contains [trento, bologna], // due to the way \u0026#39;City\u0026#39; implements \u0026#39;compareTo\u0026#39;. Collections.sort(cities); // After this, the list \u0026#39;cities\u0026#39; contains [bologna, trento], Collections.sort(cities, new CitynameComparator()); The interface List also provides a default method sort that takes a comparator as argument. So in the above example, we could have used:\ncities.sort(new CitynameComparator()); instead of\nCollections.sort(cities, new CitynameComparator()); Usage # Exercise Consider the following class:\npublic class Hero { String name; int health; public Hero(String name, int health){ this.name = name; this.health = health; } } Write a Java method void printHeroesOcc(Hero[] heroes) that takes as input an array of type Hero[], and prints the number of occurrences of each hero in this array, where two heroes are considered identical if they have the same name and health.\nConstraint. For this exercise, you cannot use an associative array (a.k.a. Java Map).\nPossible solution Create a comparator (compare first by health, then by name):\npublic class HeroComparator implements Comparator\u0026lt;Hero\u0026gt; { @Override public int compare(Hero h1, Hero h2) { if(h1.health \u0026lt; h2.health) { return -1; } if(h1.health \u0026gt; h2.health) { return 1; } return h1.name.compareTo(h2.name); } Sort the array and iterate over it to count the number of occurrences of each hero:\nvoid printHeroesOcc(Hero[] heroes) { if (heroes.length == 0) { return; } Comparator\u0026lt;Hero\u0026gt; comparator = new HeroComparator(); // sort the input array w.r.t. to the comparator Arrays.sort(heroes, comparator); // keeps track of the last hero seen so far Hero previousHero = heroes[0]; // occurrences of the last hero seen so far int occ = 1; // iterate over the array, starting fom the second hero for (int i = 1; i \u0026lt; heroes.length; i++) { // if the current hero and the previous one have the same // name and amount of health if (comparator.compare(previousHero, heroes[i]) == 0) { occ++; } else { printHero(previousHero, occ); previousHero = heroes[i]; occ = 1; } } printHero(previousHero, occ); } private void printHero(Hero hero, int occ) { System.out.println(hero.name + \u0026#34;,\u0026#34; + hero.health + \u0026#34;: \u0026#34; + occ); } Note. The solution to the exercise above relies on sorting the input array. But the same problem could be solved with an associative array, as follows:\noverride equals and hashCode in the class Hero, compute a Map\u0026lt;Hero, Integer\u0026gt; that maps each hero to its number of occurrences in the input array, iterates over the entries of this map and print them. When it comes to running time, the latter solution is more efficient on average (assuming a hashmap), but less efficient in the worst case.\n"},{"id":84,"href":"/docs/input/","title":"I/O and serialization","section":"Docs","content":" I/O and serialization # This chapter mostly focuses on Java.\nIt provides (mostly syntactic) information about:\nnavigating or manipulating files and directories, reading from and writing to a test file, property files, serializing (and deserializing) a Java object, either natively, or as a JSON object (via Jackson). "},{"id":85,"href":"/docs/git/sections/ignore/","title":"Ignoring files","section":"git","content":" Ignoring files # You can add a file named .gitignore to the root folder of your repository.\nIt specifies files that cannot be staged.\nThis is commonly used to exclude from a repository:\ncompiled code (e.g. files with the extension .class in Java), dependencies (e.g. the content of the /node_modules folder in a Node.js project), IDE-generated files (e.g. the .idea/ folder for IntelliJ), OS-generated files (e.g. .DS_Store/ folders for macOS), etc. The .gitignore file uses a dedicated syntax to specify which files should be excluded.\nFor instance the pattern *.class excludes all files with the extension .class.\nHere is a quick tutorial about the syntax of .gitignore files.\nThis repository also contains a large collection of .gitignore patterns, for different programming languages, operating systems, programs, etc. For instance Java, VSCode, IntelliJ, Windows, macOS, Linux, etc.\n"},{"id":86,"href":"/docs/regex/","title":"Regular expressions","section":"Docs","content":" Regular expressions # The theory of regular expressions (a.k.a. regexes) was developed in the 1950\u0026rsquo;s (notably by Stephen Cole Kleene), and regexes have been used since the 1960\u0026rsquo;s for variety of computational tasks. Common applications include:\ninput string validation (e.g. checking whether a date is valid, or whether a password contains characters of certain types), searching and replacing strings (e.g. within an IDE), lexical analysis in a compiler. Definition # A regular expression is a (finite) expression that describes a (possibly infinite) regular language.\nSyntax. A regular expression is either:\n$\\emptyset$, or $\\varepsilon$, or a single character (e.g. a), or an expression of the form: $e_1 | e_2$, or $e_1e_2$, or $e*$ where $e, e_1, e_2$ are regular expressions.\nExamples.\nb is a regular expression\nb|c is another regular expression\n((b\\n)|c)* is yet another regular expression\nPrecedence. By convention:\n$*$ has precedence over concatenation, concatenation has precedence over $|$ Precedence allows omitting some parentheses. For instance:\na|bc is equivalent to a|(bc) ab*|c* is equivalent to (a(b*))|(c*) Semantics. If $e$ is a regular expression, we use $\\llbracket{e}\\rrbracket$ to denote the regular language described by $e$.\nLet a be a character, and let $e, e_1, e_2$ be regular expressions. Then:\n$\\emptyset$ describes the empty language: $\\llbracket{\\emptyset}\\rrbracket = $ { } $\\varepsilon$ describes the language that contains only the empty word: $\\llbracket \\varepsilon \\rrbracket$ = { $\\varepsilon$ } a describes the language that contains only the word a: $\\llbracket$a$\\rrbracket$ = { a } $e_1|e_2$ describes the union of the languages described by $e_1$ and $e_2$: $\\llbracket{ e_1 | e_2 }\\rrbracket = \\llbracket{e_1}\\rrbracket \\cup \\llbracket{e_2}\\rrbracket$ $e_1 e_2$ describes the element-wise concatenation of the languages described by $e_1$ and $e_2$: $\\llbracket{e_1e_2}\\rrbracket = \\llbracket{e_1}\\rrbracket \\circ \\llbracket{e_2}\\rrbracket$ $e*$ describes the closure of the language described by $e$: $\\llbracket e * \\rrbracket$ = $\\llbracket e \\rrbracket^*$ Illustrations # Example.\nThe expression a describes the language { a }\nThe expression b describes the language { b }\nThe expression ab describes the language { a } $\\circ$ { b } = { ab }\nThe expression a|b describes the language { a } $\\cup$ { b } = {a,b}\nThe expression (ab)* describes the language { $\\varepsilon$, ab, abab, ababab, \u0026hellip; }\nThe expression a(b|c|d)* describes the language of all words over the alphabet { a, b, c, d} that start with an a and contain no other a\nThe expression (b|c)(a|b|c)* describes the language of all nonempty words over the alphabet { a, b, c} where a cannot appear as the first character.\nExercise What is the language described by each of the following regexes?\nab|a a*a a*ba* a(a|b)*a (a|b)*|(a|b)*c(a|b)* (a|b)* (b*a*)* (b*a)* Solutions ab|a describes { a, ab } a*a describes the set of all nonempty words that contain only the character a a*ba* describes the set of words over the alphabet {a,b} that contain exactly one b a(a|b)*a describes the set of words over the alphabet {a,b} that start with an a and end with a different a (a|b)*|(a|b)*c(a|b)* describes the set of words over the alphabet {a,b,c} that contain at most one c (a|b)* describes the closure of {a,b} (b*a*)* also describes the closure of {a,b} (b*a)* describes the set of all words over the alphabet {a,b} that do not end with a b Exercise As we saw in the exercise above, two regular expressions can describe the same language. Can you find more examples? Exercise For each of the following regular languages, write a regex that describes this language.\nThe language of all words over the alphabet {a,b,c} whose characters (if any) are in alphabetical order (from left to right) The language of all words over the alphabet {a,b,c} such that every c is immediately followed by an a The language of all words over the alphabet {a,b} that start with an a, end with a b, and do not contain two identical consecutive characters The language of all words over the alphabet {a,b} that contain at least two consecutive b\u0026rsquo;s The language of all words over the alphabet {a,b} that do not contain two consecutive b\u0026rsquo;s The language of all words over the alphabet {a,b} that do not contain three consecutive b\u0026rsquo;s Possible Solutions a*b*c* (a|b|ca)* a(ba)*b (a|b)*bb(a|b)* (a|ba)*(a*|b) (a|ba|bba)*(a*|b|bb) "},{"id":87,"href":"/docs/env/sections/terminal/","title":"Terminal","section":"Development environment","content":" Terminal # Using a terminal can be necessary during development, in order to execute a program that does not have a graphical user interface (GUI).\nBut even when a GUI is available, a Command Line Interface (CLI) can still be the preferred way to interact with some programs. Possible benefits are:\nefficiency (thanks to autocompletion, there is very little to type), automation (via scripting), more transparency (a GUI may add a layer of obfuscation), stability over time (GUIs tend to change from one version of a program to another), reproducibility (the same command performs the same action, with a limited reliance on memory), customizability. Demonstration # The following demo is meant to (quickly) illustrate some benefits of a properly configured terminal, as well a few terminal-based applications.\nThis is not an introduction to bash or Linux core utilities.\nVirtual environment # For this demo, we deployed a virtual machine with a pre-configured terminal.\nThe instructions for connecting to this machine are identical to the one for the project evaluation environment.\nCreating a static website # As an exercise, we will create a static website, using a simple framework called Hugo.\nFirst, in our home folder, let us create a subfolder dedicated to our projects. For instance, we can call this subfolder workspace. To create this folder, open a terminal and run:\nmkdir workspace Then navigate to this folder with the command cd (you do not need to type the full name of the directory, just type cd w, and press the Tab key for autocompletion):\ncd workspace Next, we will (loosely) follow the quick start tutorial for Hugo. Explanations about some of the command below can be found here.\nCopy-paste the following instruction and press Enter:\nhugo new site mySite This will create a project in a fresh folder called mySite. Let us navigate to it (again, you can take advantage of autocompletion):\ncd mySite Now copy-paste the following commands to declare this folder as a git repository and download a graphical theme for our website:\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml Navigation # At any moment, you can run the command:\npwd to display the current directory. With this command, you can check that you are indeed in the folder mySite.\nTo get a overview of the content of the current folder, run:\nll To get a recursive overview of the content of this folder, run:\ntree In order to navigate to a certain subfolder in this tree, we can take advantage of the fuzzy finder. For instance, let us assume that we want to move to some folder called socials, but we forgot its exact path.\nRun:\nc This will display the paths to all directories in this tree. You can type characters to restrict your search, and use the up down arrow keys to select your destination. For instance, type the three character soc. The best matches are displayed at the bottom of the list. To select one of them, navigate up and down with the arrow keys and press Enter.\nNote. Thanks to fuzzy search, the characters that you type do not need to be contiguous in a path. For instance, when you typed soc, all paths containing these three letters (in that order, but not necessarily contiguous) were retained.\nNow let us navigate back to the mySite folder. Here we can use zoxide, which uses our path navigation history to guess our destination. Run:\nz mySite (or possibly fewer letters).\nSimilarly, to go back to the socials subfolder that we previously went to:\nz socials Alternatively, you can switch between your current location and the previous one (thanks to zoxide still) with:\nzz Starting the web server # Navigate (back) to the mySite folder (you should know how to do this by now), and run:\nhugo server This will start a local development server for our website. To visualize the site, open Firefox (from the app menu), and use the address displayed in the terminal (it should be http://localhost:1313/)\nTo stop the server (or any Linux process running in a terminal), go back to the terminal an press Ctrl+C.\nNext, we will add content to our website, while keeping the server running.\nTo restart the server, we can use our command history. Type the first letters of the command that we used above to start the serve (e.g. hu). By pressing the up and down arrow keys, you can scroll through the commands that you already typed and start with these letters. Scroll until you find the command hugo server, and press Enter to restart the server.\nIn order to keep the server running, we will execute our next command in another terminal. You can create a new one by clicking on the boxed \u0026ldquo;+\u0026rdquo; icon:\nAdding content # Navigate to the (immediate) subfolder content of mysite. Then create a subfolder named posts:\nmkdir posts Navigate to this new folder. Then create a new text file called myPost.md. You can for instance do this with the command:\ngedit myPost.md which will open the file with the test editor \u0026ldquo;gedit\u0026rdquo;.\nNote. If you only type ge followed by Tab, the shell will suggest you a list of programs whose name starts with these letters. You can scroll through them by pressing Tab again, or add a letter to disambiguate your search.\nIn the text editor, copy-paste the following content:\n+++ title = \u0026#39;My First Post\u0026#39; date = 2024-01-14T07:07:07+01:00 +++ ## Introduction This is **bold** text, and this is *emphasized* text. ### Subsection This is a [link](https://gohugo.io) to the Hugo website. In this file, everything below the header (title/date) is written in Markdown.\nSave the file, and check with Firefox that your first post has been added to your website (to see your changes, you may need to force Firefox to clear its cache: in \u0026ldquo;Settings | Privacy \u0026amp; Security | Cookiesand Site Data\u0026rdquo;, click on the \u0026ldquo;Clear Data\u0026rdquo; button).\nAliases # The command c that we used above is actually an alias for a more complex command, namely cd $(find * -type d | fzf)\nWe declared this alias in the file ~/.zshrc (remember that ~ is a shortcut for your home folder).\nLet us open this file to see the declaration of this alias. Navigate to your home folder, for instance with:\ncd And list its content:\nll The file .zshrc should be there. Open this file with gedit:\ngedit .zshrc Note. Again, you can take advantage of autocompletion here. For instance, press ged followed by Tab followed by .z followed by Tab.\nTowards the end of this file, you will see the declaration of the alias:\nalias c=\u0026#39;cd $(find * -type d | fzf)\u0026#39; Let us create another useful alias. Ubuntu has a convenient command called xdg-open that opens a file with the default application associated to this file\u0026rsquo;s extension (this is the equivalent of a double-click in a graphical file browser). Let us set a simpler name than xdg-open to execute this command. For instance o (like \u0026ldquo;open\u0026rdquo;).\nFirst, let us check that the name o is not used already for another command. Open a new terminal and run:\no You should get a \u0026ldquo;command not found\u0026rdquo; message, which confirms that this command is free.\nNow let us add the following line to the .zshrc file:\nalias o=\u0026#39;xdg-open\u0026#39; Save the file and open a new terminal.\nYou can now use the o command to open any file.\nTo see this, let us navigate back to the socials folder that we were previously in (e.g. type z so, then up arrow key and then Enter). If you list the files in this folder (with ll), you will see that they have the .svg extension. To open one of these files, you can type o and the first letters of the name of the file, then Tab for autocompletion. This will open the file with the default image viewer application on this machine.\nScripts # If you want to use an alias to execute a (possibly complex) sequence of commands, then the preferred way is to write a script.\nFor instance, we could write a script that navigates to the mySite folder and then starts the hugo server. And we may use the alias ws (like \u0026ldquo;website\u0026rdquo;) to call this script (you can check that it is free).\nNavigate to the ~/bin folder, and create a text file called ws (for instance with gedit, as we did above for the post).\nIn this file, copy-paste the following:\n#! /bin/bash cd ~/workspace/mySite hugo server start Observe that these are the two instructions for the two tasks that we want to execute. Save the file, and make it executable by running:\nsudo chmod u+x ws To test your script, close all running instances of hugo (if any), e.g. with Ctrl + C, as explained above.\nNow regardless of your location, you can type ws to start the web server.\nNote. Linux shells (such as bash or zsh) support the same language for commands and scripts. This is a full-fledged programming language (with conditional statements, loops, etc.), where an instruction can also be a command. Terminal-based applications # To conclude the demo, we introduce a few convenient applications that run in a terminal. These may save you time (compared to similar applications that rely on a GUI).\nripgrep # ripgrep allows you to search files that contain certain words or regular expressions (your IDE offers a similar functionality). For instance, let us assume that we want to search for all files under mySite that contain the string \u0026ldquo;Canada\u0026rdquo;.\nNavigate to the mySite folder. Then run:\nrg Canada This will display the path to each (text) file that contains this word (in this example, there is only one match), and the corresponding line numbers.\nranger # ranger is a popular terminal-based file browser.\nTo open it, type:\nranger You can navigate within the current directory with the up and down arrow keys, and in the directory tree (from child to parent and conversely) with the left and right arrow keys. Note that it also displays previews of text files.\nTo quit ranger, you can press the letter q.\nhtop # htop allows you to monitor processes running on your machine. To open it, type:\nhtop The upper part of the interface displays memory and CPU usage, whereas the lower part displays running process (sorted by CPU usage by default). You can kill a process with F9.\nTo quit htop, you can press the letter q.\nncdu # ncdu allows you to visualize the amount of disk space taken by your files and programs.\nTo open it, type:\nncdu The folders and files in the current folder are sorted by disk space, and you can navigate the directory tree using the arrow keys (like with ranger).\nTo quit ranger, you can press the letter q.\n"},{"id":88,"href":"/docs/lambda/","title":"Callback methods and lamda expressions","section":"Docs","content":" Callback methods and lambda expressions # Over the years, imperative languages (like Java, C/C++, C#, Python, etc.) incorporated features borrowed from functional programming.\nJava 8 (2014) was an important step in this direction, with the introduction of lambda expressions, which are largely used in combination with streams.\n"},{"id":89,"href":"/docs/objects/sections/encapsulation/","title":"Encapsulation","section":"Objects and classes","content":" Encapsulation # Encapsulation is a (vague) principle in object-oriented programming that refers to \u0026ldquo;bundling\u0026rdquo; data with the code that operates on it, and restrict visibility of this code and data to other components of a system. From Wikipedia: \u0026ldquo;Essentially, encapsulation prevents external code from being concerned [\u0026hellip;]\u0026rdquo;\nEach component hides its internal logic by exposing only data and methods that other components may need.\nExample. As we saw earlier, in our game, the \u0026ldquo;view\u0026rdquo; component (which is in charge of rendering the game on screen) may buffer the game snapshots that it receives from the backend, if these snapshots are received faster than they can be displayed.\nAs a buffer, this component uses a structure called a queue. This queue is not exposed to other components, because they do not need to see it, and (most importantly) should not modify it. In other words, this queue is an implementation detail, internal to the \u0026ldquo;view\u0026rdquo; component.\nEncapsulation can have many benefits. Among others:\nEasier debugging. If our queue is internal to the \u0026ldquo;view\u0026rdquo; component, then we know that it cannot be responsible for the malfunction of another component. Easier collaboration. Alice may refactor the implementation of the \u0026ldquo;view\u0026rdquo; component, knowing that this will not affect Bob, who is currently working on the backend. This is why a common practice in object-oriented programming consists in hiding all attributes and methods of a new class by default, and make accessible only the ones that need to be (in particular, this is likely to be the default behaviour of your IDE).\nEncapsulation also largely dictates how libraries are structured. For instance, when you create a String in Java, you do not have access to the internal representation of the string object.\nin Java # Each attribute or method of a class can have an access modifier, which specifies which other classes can access it. For instance, the keywords private and protected below are access modifiers.\nprivate int myAttribute; protected int myMethod(){ return 1; } Definition. There are four levels of access in Java:\nprivate restricts access to the current class, \u0026ldquo;package-private\u0026rdquo; relaxes private by also allowing access from the folder of the current class (in Java, a folder for source code is called a package), excluding subfolders, protected relaxes \u0026ldquo;package-private\u0026rdquo; by also allowing access from the subclasses of the current class, public does not restrict access. Warning. There is no keyword for the \u0026ldquo;package-private\u0026rdquo; level. Instead, this is the default level for an attribute or method without access modifier. For instance, in the example below, the attribute myAttribute is package-private: int myAttribute; Here is a recap table from the Oracle tutorials:\nkeyword class package subclasses world private yes no no no none yes yes no no protected yes yes yes no public yes yes yes yes Warning. A method declared in an interface is (implicitly) public. Warning. If a method m1 overrides (or implements) a method m2, then m1 must be at least as accessible as m2. Exercise The following program does not compile. Can you see why, and how to fix this?\n├── Run.java └── units ├── Unit.java └── impl └── Unicorn.java public abstract class Unit { static String configFolder = \u0026#34;path/to/config\u0026#34;; } public class Unicorn extends Unit { String name; public Unicorn (String name){ this.name = name; } public static String getConfigFilePath (){ return configFolder + \u0026#34;/unicorn.properties\u0026#34;; } } public class Run { void testUnicorn(){ Unicorn myUnicorn = new Unicorn(\u0026#34;Storm\u0026#34;); myUnicorn.name = \u0026#34;Tornado\u0026#34;; } } Solution Unicorn.getConfigFilePath tries to access the package-private attribute Unit.configFolder (it should be made protected of public), Run.getConfigFilePath, tries to access the package-private attribute name of myUnicorn (it should be made public). Hint. Your IDE may suggest how to fix such compilation errors.\nTo improve encapsulation, it is good practice to restrict access whenever possible (i.e. without compromising compilation).\nHint. As a rule of thumb, in Java:\nuse private by default for all attributes and methods that you create, and if the program does not compile, then use your IDE to relax access. Exercise Encapsulation in this program can be improved. Can you see how?\n├── Run.java └── units ├── Unit.java └── impl └── Unicorn.java public abstract class Unit { public int health; public Unit(int health) { this.health = health; } public void attack(Unit defender){ int copy = health; health -= defender.health; defender.health -= copy; } } public class Unicorn extends Unit { public Unicorn (){ super(1); } @Override public void attack(Unit defender){ regen(); super.attack(defender); } public void regen(){ health += 1; } } public class Run { void testUnicorn(){ Unicorn u1 = new Unicorn(); Unicorn u2 = new Unicorn(); u1.attack(u2); } } Solution Unit.health can be made protected, the constructor of Unit can be made protected, Unit.attack can be made protected, Unicorn.regen can be made private. Note. The constructor of an abstract class can always be made protected (since it can only be called in the constructor of a subclass). Getters and setters # For attributes, the notion of \u0026ldquo;access\u0026rdquo; can be refined. An attribute may be:\nneither visible nor modifiable, or only visible, or only modifiable, or both visible and modifiable. This can be achieved with private attributes and so-called \u0026ldquo;getter\u0026rdquo; and \u0026ldquo;setter\u0026rdquo; methods. For instance, in the following class, the attribute health has public visibility but is not modifiable.\npublic class Unicorn { private int health; public int getHealth(){ return health; } } Conversely, in the following class, the attribute health can be modified but is not visible.\npublic class Butterfly { private int health; public void setHealth(int health){ this.health = health; } } Hint. Getter and setter methods can be automatically generated by your IDE. To go further: inheritance violates encapsulation # Composition # Example (from Effective Java, Item 18).\nConsider a class MyHashSet that extends Java\u0026rsquo;s Hashset functionality by keeping track of the number of objects added to the set (as opposed to the output of HashSet.size(), which returns the numer of elements remaining in the set).\nThis class myHashSet may have an attribute int counter (initialized to 0) that keeps track of the number of elements added to the set so far. And it may be implemented by overriding add and addAll in the expected way, i.e.:\n@Override public boolean add(E e){ counter++; return super.add(e); } @Override public boolean addAll(Collection\u0026lt;? extends E\u0026gt; c){ counter += c.size(); return super.addAll(c); } However, this implementation of addAll would count every insertion twice, because the implementation of HashSet.addAll calls HashSet.add.\nA design pattern called composition can be used to avoid such unintended effects. Intuitively, instead of extending the original class, use an instance Hashset set of it as a (private) attribute of the new class. However, this requires re-implementing all methods of the original class (albeit in a straightforward way), for instance:\npublic boolean isEmpty(){ return set.isempty(); } Prevent overriding or inheritance # As show by the example above, in order to improve encapsulation, one may want in some scenarios to forbid overriding a method or extending a class. In Java, this can be enforced with the keyword final, for instance:\npublic final class NonExtensibleClass { ... } public class MyClass{ public final void nonOverridableMethod(){ ... } } "},{"id":90,"href":"/docs/stream/","title":"Streams in Java","section":"Docs","content":" Streams in Java # A Java stream is a sequence of objects. When it is finite, a stream may be viewed as a list with limitations: a stream can only be iterated over, from left to right, and only once (this is called consuming a stream).\n"},{"id":91,"href":"/docs/git/sections/resources/","title":"To go further","section":"git","content":" To go further # Here is a brief selection of resources about git (among many):\na (short) video that goes beyond the content of this chapter, the Atlassian git tutorials, the GitHub training material, guidelines about how to write an informative (yet readable) commit message. Misc # Here is a link to git\u0026rsquo;s very first commit.\n"},{"id":92,"href":"/docs/objects/sections/mutability/","title":"Mutability","section":"Objects and classes","content":" Mutability # Illustration # Exercise The Java method createUsers below is incorrect.\nCan you see why, and how to fix this?\npublic class User { int id; String name; } /* Input: - ids: a nonempty array of user identifiers - names: an array of the same length as \u0026#39;ids\u0026#39; that contains user names Ouput: an array of users of the same lenght as \u0026#39;ids\u0026#39;, such as the i-th user has identifier ids[i] and name names[i] */ User[] createUsers(int[] ids, String[] names){ User[] users = new User[names.length]; User currentUser = new User(); for(int i = 0; i \u0026lt; ids.length; i++){ currentUser.id = ids[i]; currentUser.name = names[i]; users[i] = currentUser; } return users; } Possible solution The output array contains $i$ times the same user (with the last id and name from the input arrays).\nOne way to fix this is:\nadd an explicit constructor to the class User: public class User { int id; String name; public User(int id, String name){ this.id = id; this.name = name; } } call this constructor for each new user: public User[] createUsers(int[] ids, String[] names) { User[] users = new User[names.length]; for(int i = 0; i \u0026lt; ids.length; i++){ users[i] = new User(ids[i], names[i]); } return users; } In this example, an instance of the class User is a mutable object, meaning that its attributes (id and name) can be modified after the object is created. However, these two values (or at least the value of the attribute id) are unlikely to change.\nIn Java (or C#, C++, etc.), it is possible to forbid these two values to be modified. This would have prevented compilation of the incorrect program above.\nImmutable object # Informally, an object is mutable if it can be modified after its creation.\nImmutability has many known benefits (but also drawbacks):\nBenefits # Easier debugging: as illustrated above, forcing an object to be immutable may prevent an incorrect program to compile. Compile-time errors are usually easier to fix that bugs. Readability: code that modifies or reuses objects can be harder to understand (and reason about) than code that creates (fresh) immutable objects. Thread-safety: multiple threads can access an immutable object concurrently without race condition. Easier collaboration and maintenance: Alice can safely pass an immutable object to Bob (i.e. make the object visible to Bob\u0026rsquo;s code). This will not affect the correctness of Alice\u0026rsquo;s code (because Bob\u0026rsquo;s code cannot modify this object). Reference. For a more in-depth analysis of the benefits of immutability, we refer to Effective Java, item 17:\n\u0026ldquo;Classes should be immutable unless there\u0026rsquo;s a very good reason to make them mutable.\u0026rdquo;\nObservation. Some programming language (like Haskell or Rust), enforce (a form of) immutability by default. Drawbacks # Performance: on a large scale (e.g. thousands of objects), reusing existing object may be more efficient that creating (fresh) immutable ones. Terminology # The term \u0026ldquo;immutable object\u0026rdquo; (or \u0026ldquo;immutable class\u0026rdquo;) is used with slightly different meanings. In particular:\na weaker notion of immutability only requires the attributes of an object to be non-modifiable, a stronger notion also requires the objects that are referred to (transitively) to be non-modifiable. By convention, we will use in what follows the term \u0026ldquo;final\u0026rdquo; for the weaker requirement, and \u0026ldquo;immutable\u0026rdquo; for the stronger requirement. More precisely:\nDefinition. An object is final if its attributes cannot be modified after the object\u0026rsquo;s creation. Definition. An object is immutable if it is final and the objects that it references are immutable. in Java # final # The Java keyword final ensures that a variable cannot change value after its initialization.\nExample. The following Java program does not compile.\nfinal int a = 2; a = 3; Warning. This meaning of the keyword final is different from that we already saw in the section on encapsulation. When the variable is an instance attribute, this also forces the attributes to be explicitly instantiated before the execution of the constructor terminates.\nExample. The following Java program does not compile.\npublic class User { final int id; final String name; public User(int id){ this.id = id; } } Example. The following Java program compiles, and the instances of User are immutable (because strings in Java are themselves immutable).\npublic class User { final int id; final String name; public User(int id){ this.id = id; this.name = name; } } Note. Alternatively, a final instance attribute can be instantiated immediately after it is declared (because this instruction is executed before the constructor). For instance, the following program compiles.\npublic class User { public final int id; public final String name = \u0026#34;Alice\u0026#34;; public User(int id){ this.id = id; } } In practice. Your IDE is likely to create final (and private) instance attributes by default. final vs immutable # Warning. The final keyword may not be sufficient to enforce immutability (at least as it is defined above), in particular when a final attribute refers to a mutable object. Example. Instances of the class User below are final, but not immutable, because instances of Address are not immutable.\npublic class User { final int id; final Address address; public User(int id, Address address){ this.id = id; this.address = address; } } public class Address { int streetNumber; String street; int zipCode; public Address(int streetNumber, String street, int zipCode){ this.streetNumber = streetNumber; this.street = street; this.zipCode = zipCode; } } For instance, the following code compiles.\nAddress myAddress = new Address(14, \u0026#34;via Goethe\u0026#34;, 39100); User myUser = new User(1, myAddress); myAddress.streetNumber = 12; Final and immutable types # We already encountered several types of Java object and quasi-objects that are:\nfinal: records, sets (resp. lists, maps) that are declared with Set.of() (resp. List.of(), Map.of()), immutable: strings, boxed types (like Integer or Boolean). Record # A record is final.\nExamples. Because strings are immutable, the following records are immutable:\nrecord User(int id, String name){}; However, the following records are only final (unless instance of Address are immutable):\nrecord User(int id, String name, Address address){}; Set, List, Map # If a set (resp. list, map) is created with Set.of() (resp. List.of(), Map.of()), then its content is final.\nExample. The following Java program throws an UnsupportedOperation exception.\nSet\u0026lt;Integer\u0026gt; mySet = Set.of(2, 3); mySet.add(5); However, if the set (resp. list, map) contains references, then the objects that are referred to may be mutable.\nExample. The following program compiles (assuming that the attribute streetNumber of the class Address does not have the final keyword).\nAddress myAddress = new Address(14, \u0026#34;via Goethe\u0026#34;, 39100); Set\u0026lt;Address\u0026gt; mySet = Set.of(myAddress); myAddress.streetNumber = 12; By design, most other implementations of List, Set and Map are not final (this is expected, for performance reasons).\nHowever, in some scenarios, a program may create a (small) list (resp. set, map) that is not meant to be modified. For instance, the list of all files in a folder. In this case, the list (resp. set, map) can be made final. A common way to achieve this is the class ImmutableList (resp. ImmutableSet, ImmutableMap) of the Guava library.\nTo use Guava in a Maven project, declare this dependency:\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;33.1.0-jre\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; or in a Gradle project:\nimplementation group: \u0026#39;com.google.guava\u0026#39;, name: \u0026#39;guava\u0026#39;, version: \u0026#39;33.1.0-jre\u0026#39; String # Java\u0026rsquo;s strings are immutable.\nHowever, the class StringBuilder implements a mutable string. It provides instance methods like append, insert, delete (a substring), etc.\nBoxed types # Java\u0026rsquo;s boxed types (like Integer or Boolean) are immutable.\nHowever, each boxed types has a mutable \u0026ldquo;atomic\u0026rdquo; counterpart, e.g. AtomicInteger for Integer and AtomicBoolean for Boolean.\nThe main purpose of these classes is to offer build-in thread safety for common sequences of operations. For instance, AtomicInteger provides a method equivalent to i++, but thread-safe (note that i++ is a shortcut for three operations: read the value, increment it and write it back).\nExercise What does the following program output?\nBoolean b = true; // Create an atomic boolean with value true AtomicBoolean ab = new AtomicBoolean(true); List\u0026lt;Boolean\u0026gt; booleans = new LinkedList\u0026lt;\u0026gt;(); List\u0026lt;AtomicBoolean\u0026gt; aBooleans = new LinkedList\u0026lt;\u0026gt;(); booleans.add(b); aBooleans.add(ab); b = false; // Set the value of the atomic boolean to false ab.set(false); booleans.add(b); aBooleans.add(ab); System.out.println(booleans); System.out.println(aBooleans); Solution [true, false] [false, false] "},{"id":93,"href":"/docs/objects/sections/quiz/","title":"Quiz","section":"Objects and classes","content":" Quiz # To answer the quiz (and check your answers), click here or scan this code:\nBoxed type # public class City { int population; public City (int population){ this.population = population; } } int myInteger = 1; Integer myBoxedInteger = 1; Integer myBoxedCopy = myInteger; City myCity = new City(5000); myMethod(myInteger, myBoxedInteger, myBoxedCopy, myCity); System.out.println( myInteger + \u0026#34;, \u0026#34;+ myBoxedInteger + \u0026#34;, \u0026#34;+ myBoxedCopy + \u0026#34;,\u0026#34; + myCity.population); void myMethod(int integer, Integer boxedInteger, Integer boxedCopy, City city) { integer += 1; boxedInteger += 1; boxedCopy += 1; city.population += 1; } This Java program outputs:\n1, 1, 1, 5000 1, 1, 1, 5001 1, 2, 1, 5000 1, 2, 1, 5001 1, 2, 2, 5000 1, 2, 2, 5001 2, 2, 2, 5000 2, 2, 2, 5001 I do not know the answer Objects and references # public class City { String name; Country country; public City(String name, Country country) { this.name = name; this.country = country; } } public class Country { String name; City capital; public Country(String name, City capital) { this.name = name; this.capital = capital; } } Country italy = new Country(\u0026#34;Italy\u0026#34;, null); City florence = new City(\u0026#34;Florence\u0026#34;, italy); City rome = new City(\u0026#34;Rome\u0026#34;, italy); italy.capital = rome; System.out.print(italy.capital.name + \u0026#34;, \u0026#34;); System.out.print(florence.country.capital.name + \u0026#34;, \u0026#34;); System.out.print(rome.country.capital.name + \u0026#34;, \u0026#34;); System.out.print(rome.country.capital.country.capital.name); This Java program:\ndoes not terminate outputs null, null, null, null outputs null, null, Rome, null outputs null, null, Rome, Rome outputs Rome, null, null, null outputs Rome, null, Rome, null outputs Rome, null, Rome, Rome outputs Rome, Rome, Rome, Rome I do not know the answer Copy constructor # public class City { String name; Country country; public City(String name, Country country) { this.name = name; this.country = country; } public City (City original) { this.name = original.name; this.country = original.country; } } public class Country { String name; City capital; public Country(String name, City capital) { this.name = name; this.capital = capital; } public Country(Country original){ this.name = original.name; this.capital = new City(original.capital); } } Country italy = new Country(\u0026#34;Italy\u0026#34;, null); City rome = new City(\u0026#34;Rome\u0026#34;, italy); italy.capital = rome; Country littleItaly = new Country(italy); littleItaly.name = \u0026#34;littleItaly\u0026#34;; littleItaly.capital.name = \u0026#34;littleRome\u0026#34;; System.out.print(littleItaly.capital.name+ \u0026#34;, \u0026#34;); System.out.print(littleItaly.capital.country.name+ \u0026#34;, \u0026#34;); System.out.print(littleItaly.capital.country.capital.name); This Java program:\ndoes not terminate outputs Rome, Italy, Rome outputs Rome, littleItaly, Rome outputs littleRome, Italy, Rome outputs littleRome, littleItaly, Rome outputs littleRome, littleItaly, littleRome I do not know the answer toString # public class City { String name; Country country; public City(String name, Country country) { this.name = name; this.country = country; } @Override public String toString() { return \u0026#34;City{\u0026#34;+ \u0026#34;name=\u0026#34; + name + \u0026#34;, \u0026#34;+ \u0026#34;country=\u0026#34; + country + \u0026#34;}\u0026#34;; } } public class Country { String name; City capital; public Country(String name, City capital) { this.name = name; this.capital = capital; } @Override public String toString() { return \u0026#34;Country{\u0026#34;+ \u0026#34;name=\u0026#34; + name + \u0026#34;, \u0026#34;+ \u0026#34;capital=\u0026#34; + capital + \u0026#34;}\u0026#34;; } } In this program, the method City.toString():\ncan output the empty string always outputs the empty string never outputs the empty string is recursive is not recursive may not terminate always terminates never terminates Static attribute # public class MyClass { static int value; boolean flag; public MyClass(int value, boolean flag){ this.value = value; this.flag = flag; } void print(){ System.out.print(\u0026#34;[\u0026#34;+value+\u0026#34; \u0026#34;+flag+\u0026#34;]\u0026#34;); } void incrementValue(){ value++; } void setFlag(boolean flag){ this.flag = flag; } } MyClass o1 = new MyClass(2, true); MyClass o2 = new MyClass(3, false); o1.print(); myMethod(o1); o1.print(); void myMethod(MyClass object) { object.setFlag(false); object.incrementValue(); object.print(); } This (strange) Java program outputs:\n[2 true][3 false ][3 false] [3 true][4 false ][4 false] [2 true][3 false ][2 true] [3 true][4 false ][3 true] [2 false][3 false ][3 false] [3 false][4 false ][4 false] [2 false][3 false ][2 true] [3 false][4 false ][3 true] I do not know the answer. "},{"id":94,"href":"/docs/unittests/","title":"Unit tests","section":"Docs","content":" Unit tests # Testing software # Testing is an integral part of software development.\nDifferent terminologies coexists to categorize software tests (more or less precise, an with overlapping meanings). Common categories are:\nfunctional vs non-functional test unit vs integration test security test performance test regression test etc. A side benefit of many tests is that they help clarifying what a program (resp. component, method) is expected to do. So in a sense, tests are part of the documentation or specification of a system, because they provide precise examples of the expected behavior of the program (resp. component, method).\nThis is why tests are often part of the development process itself. Notably, test-driven development consists in developing tests cases before software is fully developed.\nUnit tests # A unit test is usually understood as:\ntesting the behavior of a small piece of code (typically a method), automated (typically integrated to the build process), fast. Besides, most unit tests are concerned with correctness (rather than performance for instance).\nWarning. The tests used to evaluate assignments in this course are implemented via libraries for unit testing. However, many of them do not qualify as unit tests. In its simplest form, a unit test can be viewed as a pair\n$\\qquad$ (input, expected output)\nfor a given computational problem.\nExample. Consider the following problem:\nInput: a (finite) array of positive integers, representing the successive values of a stock, one value per day.\nOutput: the maximal gain that can be made by buying on a certain day, and selling the same day or later on.\nPossible unit tests for this problem are:\n( [0, 3], 3 ) ( [4, 3, 6, 8, 6], 5 ) ( [2, 4, 9, 1, 3], 7 ) ( [3, 2], 0 ) etc. Exercise Consider the following problem:\nInput: a (finite) array of characters, with possibly duplicated characters (and no restriction on the size of the array).\nOutput: the size of the longest (left-to-right) sequence in this array that respects alphabetical order.\nFor instance, for the input\n$\\qquad$ [m, q, b, e, e, z, m, e],\nthe expected output is 4.\nQuestion. Does there exist a (finite) set of unit tests for this problem that guarantees that an implementation is correct?\nSolution No.\nA unit tests for this problem is a pair $(a, i)$, where\n$a$ is an array of characters, and $i$ is a natural number. Take any finite set\n$\\qquad (a_1, i_1), (a_2, i_2),\\ ..,\\ (a_n, i_n)$\nof such unit tests.\nBecause this set if finite, there exists an array of characters $a_0$ that does not appear in this set of tests.\nLet $i_0$ be the expected output for $a_0$, and let $j$ be any positive integer different from $i_0$.\nNow consider the method (in pseudocode):\nint sizeOfLongestNonDecreasingSequence(char[] characters) { if(characters == a_1) { return i_1 } if(characters == a_2) { return i_2 } ... if(characters == a_n) { return i_n } return j; } This algorithm will pass the unit tests, but is incorrect for the input $a_0$.\nSo given any set of unit tests (for this problem), there exists an incorrect algorithm that passes these tests.\nThis (artificial) exercise was only meant to illustrate the following: Warning. In general, no (reasonably small) set of unit tests can ensure that a (non-trivial) method is correct. Unit test design # Here are a few simple rules of thumb to design unit tests.\nThe input for a unit test is usually small (this makes debugging easier when the test fails).\nTwo tests for the same method should illustrate different types of inputs/scenarios (writing similar tests is a waste of time).\nTrivial methods do not need unit tests.\nPriority is often given to so-called \u0026ldquo;happy path\u0026rdquo; tests (a.k.a \u0026ldquo;normal\u0026rdquo; scenarios). These are representative of what the tested method is likely to receive as input.\nIn addition to \u0026ldquo;happy path\u0026rdquo; tests, one may implement tests that deal with corner cases (e.g. empty array, value 0, etc.). However, an exhaustive coverage of corner cases is often unnecessary, because the methods that call the tested method cannot produce such inputs.\nA unit test should be reproducible. In particular, it should not depend on:\n(pseudo)-random values, external services (web API, etc.) whose behavior cannot be controlled. Implementation # Requirement. A unit test should itself be free of bugs. For this reason, unit tests usually:\nrely of widely used libraries for test execution, mostly consist of simple, declarative code otherwise. In particular, unit tests are a (rare) case where code factorization is not a priority (i.e. unit tests may contain redundant code).\nUnit tests and build automation # Unit tests are usually integrated to the standard build automation process of a project.\nFor instance, the test-compile and test phases of Maven\u0026rsquo;s default lifecycle are in charge of compiling and executing unit tests respectively. This effectively prevents further phases to be executed if a test fails.\nRegression tests # A regression test is meant to verify that modifications brought to the code base (e.g. a new feature, code optimization, reorganization, etc. ) do not compromise correctness of functionalities that were already implemented. Some unit tests may act in practice as regression tests.\nIn particular, before sharing code with co-developers (e.g. via the main branch of a git repository), it is good practice to verify that all unit tests as successful.\nExercise (reminder) Consider a basic collaboration scheme via git, where:\nAlice, Bob and Carol collaborate on the same project, they share code via the main branch, each of them has a personal branch (named alice, bob and carol respectively) where they write code that is not yet ready to be shared with the others. Alice just finished implementing a method, on the branch alice. Her code compiles and passes all unit tests. Now she wants to share her code with the other two.\nWhich sequence of git commands should Alice execute?\nSolution Commit her changes (locally, to the branch alice): git add . git commit -m \u0026quot;commit message\u0026quot; Update the remote copy of the branch alice (for backup only): git push Synchronize the local copy of the branch main (because Bob and Carol may have added content to it): git checkout main git pull Merge (locally) the content of main into alice (and fix the merge conflicts, if any): git checkout alice git merge main Merge (locally) the content of alice into main (there should be no more conflict). After this step, the local copies of alice and main will be identical. git checkout main git merge alice Upload the changes: git push Go back to work: git checkout alice "},{"id":95,"href":"/docs/env/","title":"Development environment","section":"Docs","content":" Development environment # This chapter gives an overview of the tools and environment needed for the assignments and your project.\nBuilding automation tools (such as Maven or Gradle) have their dedicated chapter, and so does git.\n"},{"id":96,"href":"/docs/git/","title":"git","section":"Docs","content":" Git # Git is a so-called distributed version control system, originally co-authored by Linus Torvalds to facilitate the development of the Linux kernel.\nIt was first released in 2005, and has become ubiquitous in software development. For instance, 93.87% of respondents to the 2022 Stack overflow survey declared using it.\nGit allows synchronizing the content of a directory (called a repository) across several machines. Notably:\neach machine contains a copy of the repository and its full history, git allows parallel histories to coexist (in so-called branches), and provides ways to reconcile them. Warning. Git is not suited to large datasets (more than 1 GB). Scope of this chapter # Git has almost 150 commands, each of which may be called with multiple options. But in practice, most users use a handful of these commands on a regular basis.\nThis chapter only provides a basic introduction and a minimal set of commands, which you are likely to need during the development of you project. Additional resources can be found here.\nTerminology # A difficulty when discovering with git may be it terminology. Here is a very approximative map from git concepts to terms that you are familiar with:\nGlossary.\na repository: a directory (more exactly, the root directory of a project) a remote: a server to clone: to copy (a repository) to commit: to save to push: to upload (to a remote) to fetch: to download (from a remote) a branch: an alternative history (in your favorite time-travel novel/series/movie) to merge: to reconcile two branches CLI or GUI # Many Graphical User Interfaces (GUI) are available for git, and many programs (e.g. probably your IDE) provide some form of git integration.\nHowever, git is mostly used (and almost exclusively taught) via its Command Line Interface (CLI). In addition, the documentation and help that you may find online overwhelmingly relies on its CLI.\nPossible explanations are efficiency (autocompletion, aliases, scripts, etc.), transparency, reproducibility, stability over time, etc.\nIf you you use git via CLI, then we recommend using a modern shell for command autocompletion. In particular, if you are using Windows, consider using git bash or the posh-git extension for Powershell.\nIf you want a flavor of how a terminal can be configured (for git and other purposes), then you can follow the demo in the dedicated chapter.\nHosting service # To collaborate via git and/or back up your repositories, you need to use a git hosting service.\nPopular options are GitHub, Gitlab or Bitbucket.\nThe Unibz also offers a self-hosted Gitlab service.\n"},{"id":97,"href":"/docs/build/","title":"Build automation","section":"Docs","content":" Build automation # Building a piece of software means converting source code into a program that can be executed. Building a program may consists of many subtasks:\ngenerating code, compilation, linking, unit tests, file compression, generating documentation, creating an executable or an installer, integration tests, deployment, etc. Each of these subtasks may be performed numerous times during the development of a program. So it is natural to automate the build.\nA build automation tool is meant to facilitate the configuration of these tasks, and execute them automatically, typically as (one or several) \u0026ldquo;pipeline(s)\u0026rdquo;.\nFor instance, Maven is a build automation tool for Java. A Maven project is often build with a single command:\nmvn package Other popular build automation tools include:\nMake, CMake or Ninja for C/C++, MSBuild for C#, Grunt or Gulp for Javascript, Gradle (multi-language), sbt for scala etc. Note. Some subtasks of a build may be performed on a server (e.g. each time a developer pushes a git branch), as part of a process called continuous integration (CI). Popular frameworks to set up a CI server include Jenkins and Travis CI. CI is beyond the scope of this course. in Java: Maven vs Gradle # The two most popular build automation tools for Java are Maven and Gradle.\nBoth also act as package managers for Java libraries.\nMaven is slightly older (2004 vs 2008), and influenced the design of Gradle.\nMaven # Maven is (still?) more widely used than Gradle. It also has a gentler learning curve.\nIn particular, Maven relies on a number of implicit conventions (e.g. for directory layout). For a simple project, this often results in a quicker set up than with Gradle (but makes advanced customization more involved).\nDue to the popularity of Maven, some of these conventions (e.g. directory layout and artifact naming) have also been adopted in other contexts.\nAdditional strengths of Maven are:\nexcellent integration with IDEs, a vast ecosystem of plugins. A common criticism of Maven is the use of XML files to specify a project\u0026rsquo;s build, which can be verbose and difficult to parse (for a human being).\nIn this course. For simplicity, this chapter (mostly) focuses on Maven. In addition, the content is restricted to the bare minimum (i.e. what you are likely to need for your project).\nFor a more thorough introduction to Maven, a good entry point is the official getting started guide.\nGradle # Gradle is a multi-language build automation tool. Among others, it offers support for project written in Java and its main derivatives (Groovy, Kotlin and Scala), C/C++ and Javascript. Gradle has been selected by Google as the official build automation tool for Android applications.\nGradle has a more concise syntax than Maven (precisely two: one is a Groovy Domain Specific Language (DSL), the other is a Kotlin DSL). Re-building a project can also be faster with Gradle than than with Maven, thanks to more advanced caching strategies. Another strength of Gradle is its flexibility : a build can be easily customized, whereas Maven relies on conventions that can be hard to bypass.\nGradle is often considered more difficult to learn than Maven, especially for new programmers. Its syntax is also less stable (older project configurations need to be updated to comply with more recent releases).\nNote. If you chose the board game as your project, then you will use Gradle (at least by default).\nThe build is already configured. By default, you do not need to modify it, except maybe to declare dependencies.\n"},{"id":98,"href":"/docs/background/","title":"Background","section":"Docs","content":" Background # This chapter gathers basic notions that are used throughout other chapters.\n"}]