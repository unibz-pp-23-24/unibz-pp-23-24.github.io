[{"id":0,"href":"/docs/background/sections/problem/","title":"Computational problem","section":"Background","content":" Computational problem # A computational problem is (usually) specified as:\na set of possible inputs, and the expected outputs (for these inputs). Problem vs algorithm # For instance, here is a problem that you may have encountered already:\nInput: a sorted array A of integers, an integer a Output: true if a appears in A, false otherwise There are (infinitely) many algorithms that can solve this problem. But some of them are more efficient than others. Efficiency (a.k.a. computational cost) refers to the time and/or memory needed to execute an algorithm, expressed as a function of the size of the input (more on this later).\nExercise Can you think of (or do you already know) an algorithm that can solve this problem efficiently? Why is it efficient? Solution Algorithm. Let n be the size of A, and let us assume for simplicity that arrays are 1-indexed and that A is nonempty.\nIf n = 1, then check whether A[1] = a. Otherwise: check whether A[n/2] = a (where \u0026ldquo;/\u0026rdquo; is integer division, rounded up or down if n is odd), depending on the result, repeat on either left or the right of the half of A. Cost. If A has length n, then the number of iterations of the procedure is (in the order of) log2 _n in the worst case (e.g. if a does not appear in A).\nHere is another problem that you may know:\nInput: an array of integers Output: an array with the same values, but sorted in ascending order And yet another:\nInput: a solvable grid of sudoku Output: the same grid, solved Note. A problem specifies what a program should do, not how to do it. In other words, a computational problem is not an algorithm. For instance, the following is not a computational problem:\nInput: an array of integers. Algorithm: initialize a counter to 1. Then iterate through the array, and: increment the counter each time 2 consecutive numbers are encountered, and reset the counter to 1 otherwise. Exercise Which problem does this algorithm solve? Solution Input: an array A of integers Output: the length of the longest suffix of A that consists of consecutive numbers Formulating a problem # When developing a project, it can be helpful to express some sub(tasks) as computational problems. This is also a common way to document your code.\nFor instance the Javadoc of a class may consist of computational problems (e.g. the Javadoc for the method indexOf of the class String in Java).\nWhen formulating a problem, make sure that:\nthe output is specified for all inputs, and the formulation is non-ambiguous, meaning that it should clearly specify whether any given pair (input, output) is correct. Exercise Consider the class Unit (and its subclasses), as defined in Section XXX. The following problem is not properly defined. Can you see why?\nInput: a nonempty array A of instances of the class Unit Output: the unicorn with highest health in A Solution There may no unicorn in A, or several healthiest unicorns. Exercise The following problem is not properly defined. Can you see why?\nInput: a (finite) family of (finite) sets Output: the smallest set that has a nonempty intersection with each of the input sets (where \u0026ldquo;smallest\u0026rdquo; here refers to the size of a set) For instance, for the input\n{ {a,c,k}, {a,b}, {a,m}, {c,d,f}, {c,e} } the expected output is\n{a,c} Solution Some inputs admit more than one solution (the simplest example is the input {a,b}). Note. A problem may admit several outputs for the same input without being ambiguous. For instance:\nInput. a graph G, two nodes s and t in G, Output: one of the shortest paths from s to t in G if any, and null otherwise. A problem may be undecidable, meaning that for any algorithm attempting to solve this problem, there (provably) exist (infinitely many) inputs for which the algorithm either produces an incorrect output or does not terminate. A problem may be decidable but intractable, meaning that (provably) no efficient algorithm can solve it (where cost is once again measured as a function of the size of the input), "},{"id":1,"href":"/docs/objects/sections/objects/","title":"Objects","section":"Objects and classes","content":" Objects # An object is a way to group data in a meaningful way.\nA simple example: JSON objects # Here is a JSON object (in Javascript syntax) that describes the city of Florence:\n{ name: \u0026#34;Florence\u0026#34;, zipcode: 50100, region: \u0026#34;Tuscany\u0026#34; } A JSON object may contain other objects, as well as arrays (of values, objects or arrays). For instance:\n{ name: \u0026#34;Alice\u0026#34;, age: 26, birthPlace: { name: \u0026#34;Florence\u0026#34;, zipcode: 50100, region: \u0026#34;Tuscany\u0026#34; }, jobs: [ { employer: \u0026#34;Kolping\u0026#34;, start: 2021, end: 2022 }, { employer : \u0026#34;Eurac\u0026#34;, start: 2023 } ] } More formally:\nDefinition. In JSON:\nan element can be either: a scalar (e.g. an integer), or an array of elements, or an object, an object is a finite set of key-value pairs, where keys are distinct, and each value is an element. Equivalently, a JSON object can be viewed as a function (with finite domain) that maps keys to JSON elements.\nObjects and programming languages # JSON objects do not exactly correspond to the objects that can be created in Java (and many other programming languages). We highlight here two important differences.\nTypes # Exercise Find a JSON object that satisfies the above definition but cannot be represented as an object in a (strongly) typed language such as Java, C/C++, C#, etc. Possible solution { key: [1, \u0026#34;a\u0026#34;]; } In a typed language (like Java), the elements of an array must be of the same type. This is not required in Javascript, Python, etc.\nReferences # A Java (or Python, C#, etc.) object does not contain objects or arrays, but references to objects or arrays. For instance, the equivalent in Java of the above object may be pictured as follows (abusing notation):\n_1: { name: \u0026#34;Alice\u0026#34;, age: 26, birthPlace: _2 jobs: _3 } _2: { name: \u0026#34;Florence\u0026#34;, zipcode: 50100, region: \u0026#34;Tuscany\u0026#34; } _3: [ _4, _5 ] _4: { employer: \u0026#34;Kolping\u0026#34;, start: 2021, end: 2022 } _5: { employer: \u0026#34;Eurac\u0026#34;, start: 2023 } Each object or array has an ID (e.g. _1 in this example), which can be used to refer to it (you can think of this ID as an address in memory).\nAs a consequence, some objects can be created in Java that have no finite representation in JSON. Exercise Find one of these objects. Possible solution _1: { name: \u0026#34;Alice\u0026#34;, friends: _3 } _2: { name: \u0026#34;Bob\u0026#34;, friends: _4 } _3: [ _2, _5 ] _4: [ _1, _6 ] If we try to represent this object in JSON, we get (assuming that we start with Alice):\n{ name: \u0026#34;Alice\u0026#34;, friends: [ { name: \u0026#34;Bob\u0026#34;, friends: [ { name: \u0026#34;Alice\u0026#34;, friends: [ ... ]}]}]} Cyclic references (like in this exercise) naturally occur in object-oriented code. Identifying them may be essential to debug a program that does not terminate or runs out of memory (stack overflow, \u0026hellip;).\n"},{"id":2,"href":"/docs/project/sections/free_project/","title":"Option 1: free project","section":"Project","content":" Option 1: free project # The first project option available to you consists in developing a Java application of your choice.\nThis application is only a prototype, so it does not need a comprehensive list of features or functionalities.\nThe evaluation of your project will be mostly based on its backend (rather than the frontend). This means that your application:\ndoes not necessarily need a graphical user interface (but you may choose to develop one), should perform non-trivial backend task(s) (e.g. writing and/or reading to/from files is not sufficient). Guidelines # Motivation # A good projects is driven by an idea.\nFeel free to design your application so that it matches your own interests. For instance:\nrelate it to a hobby (music, cinema, fashion, sport, games, social media, astronomy, etc.), use the project as an opportunity to explore a topic that you are curious about (natural language processing, computer vision, recommender systems, robotics, etc.), develop a functionality that one of your favorite applications is missing. Do not hesitate to be ambitious at first. You can restrict the scope of your project (to certain features or components) later on.\nSpecification # A frequent source of failure for this course is students focusing on tools (e.g. following tutorials) without having a precise objective. The short deadline (June 2024) does not give you this flexibility. Besides, without a precise objective, the amount of libraries that are available to you (especially in Java) can be overwhelming.\nSo we recommend you to clarify what your application should do, before thinking about how you could implement it. In other words, specify which problem(s) (i.e. input and expected output) your program and/or components should solve. Then only think about algorithms, libraries, tools and/or tutorials that can help you solve this/these problem(s).\nIn order to determine whether your specification is precise enough, you may check whether it leaves some doubt as to whether an output is correct or not.\nUser interface # Developing a Graphical User Interface (GUI) requires familiarity with a graphical framework. Learning the details of such a framework (terminology, syntax, setup, etc.) can be an important time investment, and this knowledge may not transfer to other graphical frameworks.\nBesides, GUIs technologies are still rapidly evolving, and recent innovation has largely been driven by web development. Even desktop and mobile applications are increasingly relying on web technologies for their GUIs, thanks to frameworks like Electron or React Native. So learning a web framework (such as React or Angular) may be a more strategic investment of your time than learning Java-based graphical framework.\nThis is why we recommend you to think carefully before committing to a Java GUI, and to keep it minimal if you do. Note also that we will _not evaluate your project based on aesthetic criteria.\nSo in order to design your interface, you may follow the following guidelines:\nAsk yourself whether your application really needs a GUI. A command-line interface may be sufficient, because: your program is (primarily) meant to be used by other programs (rather than human beings), or your program is meant to be used by other developers, or external programs with GUIs (such as IDEs) can call your application, or you leave the GUI for future work (again, your application is just a prototype), etc. If you really need a GUI, then: decouple frontend and backend (whenever possible), so that the backend could be used with another frontend, and conversely.\nExample. Consider a program that plays chess against a human opponent. The backend:\nkeeps track of the current state of the board, takes as input the next move from the player, outputs the next state of the board. These input and output do not depend on a specific GUI (they can for instance be encoded using algebraic notation). So the backend can be implemented without any reference to graphical elements.\ndevelop the backend first (and write unit tests for it),\ndevelop the frontend afterwards (if you have time for it).\nIf you really need a GUI, then try to keep it minimal. In particular, restrict the input to what is essential for your application. The more freedom the user is given, the more likely he/she is to input a sequence of actions that your program cannot handle. Examples # Here are some examples of (past and imaginary) possible projects:\nA program that detects texts generated by a large language model, A program that takes as input a dataset of Tweets and identifies communities and/or influencers based on the network formed by re-tweets, A program that retrieves news articles about an input topic (using web APIs), and analyses their polarity (via sentiment analysis) together with their provenance (news outlet, country, etc.), A (toy) recommender system, A program that generates (solvable) sudoku grids with different sizes and/or level of difficulty, A game to help people improve their typing speed, A web crawler that retrieves sport-related statistics from various websites and exposes them via a web API, A room reservation system for the Unibz that can computes a default schedule for a whole semester, satisfying a set of constraints (room capacity, etc.) and/or preferences (minimize days of presence per week of a same group, etc.) A flashcard app that incorporates answers produced by a chatbot, An (Obsidian-like) note management application, A program to organize and manage coding contests (similar to this one), A password manager (with encryption), for instance similar to pass, where password update and synchronization are performed via git, A program that analyzes the commit and/or branching history of a git repository (e.g. contributions of the different users, frequency of commits, percentage of preserved code, etc.). "},{"id":3,"href":"/docs/intro/sections/schedule/","title":"Schedule","section":"This course","content":" Schedule # The course consists of 60 hours of lectures and 30 hours of labs.\nLectures # By default, lectures are scheduled:\nTuesday 10:00 - 12:00 Wednesday 08:00 - 10:00 Thursday 10:00 - 12:00 All students attend the same lectures.\nOne lecture (to be determined) will be dedicated to a visit to Raiffeisen Information Service in Bolzano.\nLabs # By default, labs are scheduled:\nTuesday 16:00 - 18:00 Friday 14:00 - 16:00 Students are split in two groups (to be determined) for the labs, with identical content. Students who collaborate on the same group project are expected to attend the same lab.\nMost labs will be dedicated to the assignments for this course. Two or three labs will be dedicated to a presentation and discussion of the advancement of the different group projects.\nTimetable # Some weeks will see fewer lectures/labs, and schedules or room numbers may vary from one week to the other. So make sure to check the timetable regularly.\n"},{"id":4,"href":"/docs/interfaces/sections/specification/","title":"Specification and programming interface","section":"Interfaces","content":" Specification and programming interface # Specification # The specification of a method usually consists of:\nthe computational problem that the method solves (if any), and (if needed,) a description of the format of the input and expected output, and (if applicable,) a description of the behavior of the program for invalid inputs (e.g. errors thrown by the method), and (if useful,) information about the implementation (e.g. if this may have an impact on performance for certain inputs). Example.\nboolean isSolvable(int[][] grid) Input: a 9 x 9 array of integers with numbers between 0 and 9 Output: true is this arrays represents a sudoku grid with a unique solution (where 0 stands for the absence of value) Errors: if the array\u0026rsquo;s size is not 9 x 9 if the array contains a number smaller that 0 or greater than 9 If a method has no return type or is not a pure function, then the specification may indicate the effect the method on its environment.\nThe specification of a command (for a program with a command line interface) is similar, but may include additional information about the syntax of the command (options, arguments, etc.)\nProgramming interface # In its simplest form, a programming interface is a set of method/command specifications. "},{"id":5,"href":"/docs/intro/","title":"This course","section":"Docs","content":" Structure and organization of the course # This chapter explains how the course is structured and briefly summarizes its content.\n"},{"id":6,"href":"/docs/objects/sections/classes/","title":"Class and instance","section":"Objects and classes","content":" Class and instance # A class can be viewed as a blueprint for a set of similar objects.\nFor instance, consider the two objects:\n{ name: \u0026#34;Florence\u0026#34;, zipCode: 50100, region: \u0026#34;Tuscany\u0026#34; } { name: \u0026#34;Rome\u0026#34;, zipCode: 00100, region: \u0026#34;Lazio\u0026#34; } Each of these objects describes a city, and they share the same keys (name, zipCode and region). A possible class for these two objects may enforce this structure, and it could be named City. An object that follows this blueprint is called an instance of this class.\nDeclaration # In a typed language (like Java), a class must specifies not only the \u0026ldquo;keys\u0026rdquo; of its instances, but also their types. For instance, the class City could be declared as follows in Java:\npublic class City { String name; int zipCode; String region; ... } In Java, a class is often declared in a dedicated file. This file must have the same name as the class (e.g. City.java in this example). The three variables (name, zipCode and region) are called attributes (or sometimes member variables).\nConstructor # A class also needs a special method called a constructor. The constructor is in charge of creating a (fresh) instance of the class. In Java (as in Python, C#, etc.), the constructor does not return the instance itself, but a reference (sometimes called \u0026ldquo;pointer\u0026rdquo;) to this instance.\nNote. A class may have several constructors (with different signatures). Writing a constructor in Java # The constructor of a Java class must have the same name as the class. For instance:\npublic class City { String name; int zipCode; String region; public City(String n, int z, String r){ name = n; zipCode = z; region = r; } ... } Note. In this example, the variable names n, z and r are not very explicit. However, using name, zipCode and region would be ambiguous (because these names are already used for the attributes of the class). In Java, we can use the prefix this. to refer to attribute names, thus eliminating the ambiguity.\nFor instance:\npublic class City { String name; int zipCode; String region; public City(String name, int zipCode, String region){ this.name = name; this.zipCode = zipcode; this.region = region; } ... } Creating an object in Java # A Java constructor is called with the keyword new. For instance:\nCity myCity = new City(\u0026#34;Florence\u0026#34;, 50100, \u0026#34;Tuscany\u0026#34;); City yourCity = new City(\u0026#34;Rome\u0026#34;, 00100, \u0026#34;Lazio\u0026#34;); Note. The object that is created in memory contains extra information, in particular a reference to its class. This allows type checking, casts, etc. (more on this later). Reference type VS primitive type # Recall that a Java constructor returns a reference to the object that it creates. So in the example above, the value of each variable (myCity and yourCity) is a reference, not the object itself. This is why the type City is called a reference type.\nSyntax. In Java, reference types usually start with a capital letter (like City or Array\u0026lt;Integer\u0026gt;), as opposed to primitive types (like int or char). Accessing an object in Java # The attributes of an object can be accessed like regular variables, using ., followed by the name of the attribute. For instance,\nCity thatCity = new City(\u0026#34;Siena\u0026#34;, 53100, \u0026#34;Lazio\u0026#34;); System.out.println(\u0026#34;Wrong region: \u0026#34; + thatCity.region); thatCity.region = \u0026#34;Tuscany\u0026#34;; System.out.println(\u0026#34;Better now: \u0026#34; + thatCity.region); will output\nWrong region: Lazio Better now: Tuscany The value of a reference cannot be output (printed, displayed, etc.) by a program. But this value can be modified or compared to another.\nExercise What is the output of the following program?\nCity aCity = new City(\u0026#34;Matera\u0026#34;, 75100, \u0026#34;Basilicata\u0026#34;); City theSameCity = new City(\u0026#34;Matera\u0026#34;, 75100, \u0026#34;Basilicata\u0026#34;); System.out.println(aCity == theSameCity); System.out.println(aCity.zipCode == theSameCity.zipCode); Solution false true Exercise What is the output of the following program?\nCity anotherCity = new City(\u0026#34;Bologna\u0026#34;, 40100, \u0026#34;Emilia-Romagna\u0026#34;); City yetAnotherCity = new City(\u0026#34;Mantua\u0026#34;, 46100, \u0026#34;Emilia-Romagna\u0026#34;); yetAnotherCity.name = anotherCity.name; System.out.println(yetAnotherCity.name); anotherCity = yetAnotherCity; System.out.println(anotherCity.zipCode); System.out.println(anotherCity == yetAnotherCity); Solution Exercise 2.\n\u0026#34;Bologna\u0026#34; 46100 true Java passes by value # Programming languages differ in the way arguments are passed to methods. Two common strategies are:\npassing by value: the method receives as input a copy of each argument, passing by reference: the method receives as input a reference to each argument. Consider for instance the following program (in pseudocode):\nint myInteger = 0 myMethod(myInteger) print(myInteger) void myMethod(int argument){ argument += 1 } If the argument is passed by value, then the program will print 0 If the argument is passed by reference, then the program will print 1. In Java (and many other programming languages, like C, Python, Javascript, etc.), arguments are passed by value. So the above program translated in Java will print 0.\nWarning. Consider a method with a reference type argument. Because Java passes by value, this method will receive a copy of this argument. But this is a copy of the reference, not a copy of the object itself. Exercise What does the following Java program print?\nint myInteger = 0; City myFirstCity = new City(\u0026#34;Florence\u0026#34;, 50100, \u0026#34;Tuscany\u0026#34;); City mySecondCity = new City(\u0026#34;Mantua\u0026#34;, 46100, \u0026#34;Emilia-Romagna\u0026#34;); myMethod(myInteger, myFirstCity, mySecondCity); System.out.println(myInteger); System.out.println(myFirstCity.zipCode); System.out.println(mySecondCity.zipCode); public void myMethod(int integer, City firstCity, City secondCity){ integer += 1; System.out.println(integer); firstCity.zipCode = 20590; System.out.println(firstCity.zipCode); secondCity = new City(\u0026#34;Rome\u0026#34;, 00100, \u0026#34;Lazio\u0026#34;); System.out.println(secondCity.zipCode); } Solution 1 20590 00100 0 20590 46100 "},{"id":7,"href":"/docs/env/sections/files/","title":"Hierarchical file systems","section":"Development environment","content":" Hierarchical file systems # Tree # Most operating system expose files as a tree (or possibly several trees for Windows).\nDefinition. A (nonempty) tree is either:\na single node (called a leaf), or a node (called a root) with one or several children that are trees. In this tree, non-leaf nodes are directories, and the leaves can be files, executables, links, empty directories, etc. For instance:\n├── bin │ ├── echo │ └── ... ├── home │ ├── alice │ │ ├── .bashrc │ │ ├── Desktop │ │ │ └── ... │ │ ├── music │ │ │ └── thatSong.mp3 │ │ └── workspace │ │ └── pp │ │ ├── assignments │ │ │ └── ... │ │ └── project │ │ ├── .git │ │ │ └── ... │ │ ├── src │ │ │ └── HelloWorld.java │ │ └── test │ │ └── testHelloWorld.java │ └── bob │ ├── .bashrc │ ├── Desktop │ │ └── ... │ └── music │ ├── thatSong.mp3 │ └── anotherSong.mp3 └── ... Terminology. In this course, we will use the terms \u0026ldquo;folder\u0026rdquo; and \u0026ldquo;directory\u0026rdquo; interchangeably. Terminology. \u0026ldquo;File\u0026rdquo; is sometimes used (e.g. in the Linux documentation) as a generic term for all nodes in this tree (in combination with \u0026ldquo;directory file\u0026rdquo;, \u0026ldquo;executable file\u0026rdquo;, \u0026ldquo;regular file\u0026rdquo;, etc.) We will not follow this terminology. Windows may expose several trees, one per physical device.\nPath # Definition. In such a tree, a path from a non-leaf node s to a node t is either:\n. if s and t are the same node, or .. if s is a child of t, or the name of t if t is a child of s, or a path from s to some node i, followed by / (or \\on Windows), followed by a path from i to t. For instance (on macOS, Linux, etc.), in the tree above:\nhome/alice/workspace/pp/project/src/HelloWorld.java is a path from the root to the file HelloWorld.java, workspace/pp/project/src/HelloWorld.java is a path from the directory alice to the file HelloWorld.java, ../../bob/Desktop is a path from Alice\u0026rsquo;s Desktop to Bob\u0026rsquo;s Desktop, ./../../bob/Desktop is another path from Alice\u0026rsquo;s Desktop to Bob\u0026rsquo;s Desktop. Exercise How many paths are there between two nodes? Solution (Countably) infinitely many. Convention. In what follows (unless explicitly stated), we will adopt by default the conventions for path names adopted on Linux. In particular, we will use / as a separator, and case-sensitive file and folder names. Absolute path # Definition. An absolute path is a path prefixed with:\n/ on macOS, Linux, Android, IOs, etc. a capital letter followed by :\\ on Windows, where the letter identifies a physical device, disk partition, etc. In particular, the identifier of the main partition is often the letter C, in which case absolute paths (within this partition) are prefixed with C:\\. An absolute path is always a path from the root of the tree.\nFor instance (on macOS, Linux, etc.), /home/alice/workspace/pp/project/src/HelloWorld.java is an absolute path to the file HelloWorld.java\nA few simple observations:\ntwo different files may share the same name (but cannot share an absolute path), and two files with the same name may or may not be identical. E.g. in the above example, the two files named thatSong.mp3 may or may not be identical. Relative path # Definition. A relative path is a path that is not absolute. For instance (on macOS, Linux, etc.), ../../bob/Desktop is a path to to Bob\u0026rsquo;s Desktop relative to Alice\u0026rsquo;s Desktop.\nNote that if p is a relative path, then p prefixed with ./ (or .\\ on Windows) is a path equivalent to p. This prefix is often used to emphasize that a path is relative.\nWorking directory # Each process (e.g. a process that executes a Java program) has a working directory, which is a directory of the hierarchical file system. This directory may vary depending on the program and/or how it was started.\nMany programs (implicitly) interpret a relative path as relative to their working directory, regardless of whether the path is prefixed with ./ (or .\\ on Windows).\nIn particular, this is the case of:\nJava programs, file browsers, shells. Home directory # Each user of a system has its own home directory. E.g. in this example:\n/home/alice/ for Alice /home/bob/ for Bob Warning. The home directory is usually not the root of the tree (even if there is a single user on the machine). Path to the home directory # The home directory (of a regular user) is normally:\n/home/\u0026lt;userId\u0026gt; on Linux/BSD, /Users/\u0026lt;userId\u0026gt; on MacOS, /User/\u0026lt;userId\u0026gt; on iOS, /data/media/⟨userId⟩ on Android, \u0026lt;mainHardDriveId\u0026gt;:\\Users\\\u0026lt;userId\u0026gt; on Windows (e.g. C:\\Users\\\u0026lt;userId\u0026gt;). On Linux and MacOS, the alias ~ can be used as an absolute path to the current user\u0026rsquo;s home directory. For instance, in the above example, if Alice is logged in, then ~/music/thatSong.mp3 and /home/alice/music/thatSong.mp3 are two absolute paths to the same file.\nAccess restriction # Files and programs within the home directory of a user can only be accessed by this user (or a system admin).\nTherefore programs that can be executed by all users are located in other directories (e.g. the program /bin/echo in the example above). Access restrictions (read, write and/or execute) may apply to the content of such directories. Notably, on Linux systems, the content of these directories can only be modified by a system admin.\nHidden files and directories # The home directory often contains files (resp. directories) whose names are preceded with a . (e.g. the file /home/alice/.bashrc in the above example). These are sometimes called \u0026ldquo;dot files\u0026rdquo; (resp. \u0026ldquo;dot folders\u0026rdquo;). On Linux and macOS, dot files and dot folder are hidden by default in a terminal or a file browser. On Windows, a (dot or not) file or folder can also be hidden, via a dedicated \u0026ldquo;hidden\u0026rdquo; attribute.\nHidden files and directories may be used to store (user-specific) parameters or options for a program. For instance, the configuration file ~/.gitconfig can be used to declare parameters (e.g. user identifier, etc.) or options (e.g. fast-forward by default, etc.) to be used with git.\nHint. Configuration files are a convenient way to save your personal preferences and use them on several machines. For instance, you may need to logging to a remote server via ssh to perform some tasks (e.g. deploy a database or run costly computations). In such a scenario, you can upload dot files to your home directory on this server. Hidden files may serve other purposes. For instance, the hidden directory ~/.m2/ is used by Maven to store (in one place) the Java libraries that are required (as dependencies) by any Java project present in the home directory.\nHidden files or directories may also contain information specific to a subdirectory. For instance, every git repository (a.k.a. project) contains a dot folder .git/ that stores the full history of modification made to the repository.\nUsage and layout # Your home directory is where you generally want to store your projects, documents, scripts, etc.\nYou are free to structure it as you like (using sub-directories). Make sure that this structure allows you to retrieve your own work easily. You may also create dedicated (sub)directories for content that requires no back up (such as generated files, downloadable data, etc.).\nWarning. When you download or create a project/document in your home directory, choose its location. Do not:\nlet an application decide this location for you, rely exclusively on the \u0026ldquo;recently opened\u0026rdquo; feature of an app to locate your files, store files and project directly at the root of your home directory. Warning. Aside from a few exceptional cases, your home directory should not contain multiple copies of a project or document. Hint. It can be difficult for a new developer to figure out when to accept the default directory or layout suggested by a program, and when to overwrite it. As a (soft) rule of thumb, you generally want to choose the location of:\na file downloaded from your browser (or mail client), a project created with your IDE, a cloned git repository, a file created with an app, etc. Conversely, it is generally recommended to follow suggestions in the following cases:\ninternal structure of a project (typically the one generated by an IDE): e.g. the standard directory layout for a Maven project, or the standard directory structure of a Node JS project. software installed outside of your home directory, location of dot files and folders, etc. "},{"id":8,"href":"/docs/interfaces/sections/java_interfaces/","title":"Java interfaces","section":"Interfaces","content":" Java interfaces # A Java interface is a programming interface with additional (object-oriented) features.\nSyntactically, a Java interface is similar to a class. But (in its simplest form), it contains no code. Instead, it specifies the behavior of some methods (which are implemented in some classes).\nExamples # The implementation of our game contains an interface called Snapshot, which describes what a game snapshot is. This interface specifies (among others) a method called getSizeOfReinforcement, as follows:\npublic interface Snapshot { ... /** * Returns the number of units that will enter the board if reinforcement * is called for the input player. */ int getSizeOfReinforcement(Player player); ... } Note that this description contains no code.\nA Java interface acts not only as documentation, but also as a contract : any class that implements this interface must implement all methods declared in the interface (otherwise the program will not compile).\nA Java interface can be used to specify how two components of a system communicate (before the interface is even implemented!). For instance, the Snapshot interface specifies which information must be provided by our backend to the component in charge of displaying the game on screen.\nThe name of an interface can be used as a reference type (similarly to the name of a class). For instance, the Snapshot interface also specifies a method getBoard, which must return an object of type Board. And Board is itself an interface, which specifies the information needed to draw the game board (units, position, etc).\nHere is for instance a fragment of the Board interface:\n/** * Board for an ongoing game. * This is a two-dimensional grid. * * Tile coordinates are natural numbers and start at 0. * The top left tile has coordinates (0,0). */ public interface Board { ... /** * Returns true if the input coordinates are within the board\u0026#39;s boundaries */ boolean areValidCoordinates(int rowIndex, int columnIndex); /** * Removes the unit standing at the input coordinates, and does nothing * if there is none. */ void removeUnit(int rowIndex, int columnIndex) throws CoordinatesOutOfBoardException; ... } Finally, the interface DisplayManager specifies a method that can be called (e.g. from the backend) to draw a Snapshot on screen (together with a message):\npublic interface DisplayManager { ... /** * Displays the input snapshot on screen, as well as the input message. */ void drawSnapshot(Snapshot snapshot, String message); ... } Observe that these interfaces only specify what classes should implement, not how. In other words, these interfaces specify how components can communicate without exposing unnecessary implementation details.\nWhen to use a Java interface? # Technically, Java interfaces are not needed in a project. But they can make collaboration within a team of developers significantly easier. In particular:\nAn interface is a convenient way to expose what is needed to interact with your code, while hiding the details of your implementation. For instance, the method drawSnapshot (mentioned above) can be called to draw a snapshot on screen, without knowing how this method is implemented.\nAs a contract, an interface allows two programmers to work independently, ensuring interoperability between the methods and/or components that they are respectively developing.\nInheritance # An interface in Java can extend another interface, like a class can extend another class, with the same keyword extends.\nHowever, Java interfaces support multiple inheritance (whereas java classes do not). This means that an interface A can extend two interfaces B and C even if B and C do not extend each other.\nImplementation # In Java, the keyword implements is used to indicate that a class implements an interface. For instance:\npublic class SnapshotImpl implements Snapshot { ... } Note. It is good practice to avoid a class and an interface with the same name (even if they describe the same objects). To differentiate them, you may for instance use the suffix Impl, as illustrated above. Consider a class C that implements an interface I :\nif C is abstract, then it can implement some of the methods declared in I if C is not abstract, then each method declared in I must be implemented in C (or some superclass of C ), otherwise the program will not compile. Exercise The program represented by the following diagram does not compile. Can you see why?\nSolution The class Butterfly does not implement the method sleep.\nNote. In this example, the class Butterfly inherits an implementation of boost (from AbstractUnit), and overwrites it. This is not an error.\nSince Java interfaces support multiple inheritance, a Java class can implement several interface that do not extend each other.\nFor instance, the class Unicorn could implement an interface Animal and another interface ImaginaryCreature, even though none of these two interfaces extends the other (not all animals are imaginary, and not all imaginary creatures are animals). This would be declared as follows:\npublic class Unicorn extends MobileUnit implements Animal, ImaginaryCreature { ... } Exercise The program represented by the following diagram does not compile. Can you see why?\nSolution The class Unicorn does not implement the method hide. Interfaces vs abstract classes # In theory, Java\u0026rsquo;s interfaces and abstract classes serve different purposes:\nabstract classes are meant to factorize code (i.e. avoid redundant code), whereas interfaces are meant to document code and act as a contract. However, in practice, they have have partially overlapping features, which may be confusing.\nIn particular:\nan abstract class can have abstract methods, which behave similarly to interface methods (with the additional constraint that an abstract method must be implemented by at least one subclass). Since Java 8 (2014), interfaces can carry code, in so-called default methods. This feature was introduced for backward compatibility reasons, but arguably contradicts the meaning of the term \u0026ldquo;interface\u0026rdquo;. An benefit of default methods (i.e. methods implemented in interfaces) is that they allow multiple inheritance of implemented methods (since interfaces allow multiple inheritance), which is not possible with classes. For this reason, some authors (like Joshua Bloch) recommend using default methods instead of abstract methods. However, a program where interfaces play the role of abstract classes may be confusing for less experienced Java developers.\nFor this course, we chose to present Java interfaces from a more traditional (pre-Java 8) perspective, because this perspective is arguably easier to understand, and because this is still the dominant usage of Java interfaces. However, for your project, feel free to deviate from this model if you think that this is appropriate (in particular if you need multiple inheritance).\n"},{"id":9,"href":"/docs/project/sections/board_game/","title":"Option 2: board game","section":"Project","content":" Option 2: board game # The second project option available to consists in developing a video game with mechanics analogous to the ones of Might \u0026amp; Magic: Clash of Heroes or Legend of Solgard.\nIf you choose this option, you will be provided:\na basic graphical user interface (GUI) that you can reuse and/or customize, examples during lectures that you may adapt to your project. Requirements # The minimal requirement to submit your project is a player VS player game playable on a single machine.\nBut of course, you are free to go further and add your own features. Among other possibilities, you could for instance:\nimplement new mechanics (e.g. a rock-paper-scissor logic for unit encounters, events that may affect the board, etc.), make the game deterministic (i.e. eliminate randomness), create units with specific behaviors, implements scripted encounters (\u0026ldquo;boss fights\u0026rdquo;), implement a story, character progression, etc., develop a player VS bot mode, etc, Note. If you choose the last options in the list above (player VS bot), then you may benefit from an algorithm seen in the chapter on recursion. Besides, if several groups choose this option, we may organize a competition between bots (provided that they play by the same rules). Guidelines # GUI # The source code for the GUI can be downloaded from GitHub. The project is designed so that:\nyou can develop a fully functional game (player VS player or player VS bot) by focusing exclusively on the backend (i.e. the mechanics of the game), without modifying the GUI. backend and frontend are decoupled. Communication between frontend and backend is specified via Java interfaces. It revolves around the notion of a game snapshot, which contains all the information needed to describe a state of the game (equivalently, you can think of a snapshot as a save state). In particular, snapshots are independent of a specific GUI.\nFor instance, a method is available that allows you to pass a snapshot to the GUI component. When you call this method, the snapshot will be drawn on screen, replacing the previous one (if any).\nAs input, your code receives the next action of the active player (for instance, delete the unit present on a specific tile). These are again specified by an interface. Your code should react accordingly: modify the current snapshot, and then send it the GUI component for display.\nThe README.md file (at the root of the project) contains a description of the different components and interfaces, as well as building instructions, and explains where your code could fit. Read it carefully before you start working on your project!\nNote. You are of course free to modify the interfaces that come with the project. But this may require modifying the implementation of the GUI. Disclaimer. By design, the project compromises performance for simplicity and modularity. This is not how a resource intensive game would be implemented.\nMore generally, this exercise is not meant to teach you game development, but general-purpose programming and problem solving.\n"},{"id":10,"href":"/docs/project/","title":"Project","section":"Docs","content":" Project # Students enrolled in this course are expected to deliver a group project.\nTwo alternative options # You can develop either:\nA project of your choice, or A board game with rules analogous to Might \u0026amp; Magic: Clash of Heroes or Legend of Solgard. If you choose the second option (board game), then:\nyou will be provided a graphical user interface (so that you only need to implement the mechanics of the game), additional content will be provided during the lectures (as illustrations) that you can incorporate to your project. Requirements # Here are some requirements common to both options (project of your choice or board game).\nSource code # The source code for the project must be written in Java 17 or lower.\nThe code should be yours (or mostly yours). If you incorporate external code, make sure to reference it clearly in the README.md file of your project. If you took inspiration from a tutorial or the source code of another project, then reference it as well.\nThe source code must be submitted as a GitHub repository. The commit history must reflect the individual contribution of each member of the group. Once again, make sure that:\neach student uses a different (and only one) Github account, and each student commits his/her own code. The repository should contain at its root a .gitignore file hat indicates files that should not be tracked. As a result, your repository should not contain compiled classes, jars, logs, run-time files, IDE-generated files (e.g. .idea/), OS-generated files (e.g. .DS_Store), etc.\nDependencies, build and packaging # You are free to use any additional Java library in your project.\nThe project shoud be build with either Maven or Gradle. It should run on the evaluation environment via command line instructions.\nFor instance (depending on how you designed your project), the instructions to build the executable may be:\nmvn compile mvn package and the instruction to run the executable may be (assuming that the executable is called myJar.jar and that your program takes two strings as input):\njava -jar myJar.jar \u0026#34;firstInput\u0026#34; \u0026#34;secondInput\u0026#34; If the executable cannot be built in the evaluation environment, then you should at least provide an uber-jar that can run in this environment (via command line still). In this case, you may use a Github release to share this uber-jar.\nDocumentation # Your git reposiroy should contain at its root a README.md file (written in Markdown). This file should contain at least the following information:\nmembers of the group and their respective Github identifiers, clear instructions for building and running the project, a description of the project, a user\u0026rsquo;s guide for the project (either a written guide, or a link to a video), a brief overview of the implementation of your project. This should include information on: the different (high-level) components and interfaces between components, which third-party libraries you used (if any), and some programming techniques (seen in the course or not) that were particularly relevant for this project. a description of your human experience in this project. This should include information on: how the workload was distributed between the members of the project, how you used git, and challenges that each member faced (at least one per person). For further information about what a README.md file usually contains, you may look at this web page.\n"},{"id":11,"href":"/docs/intro/sections/lecturers/","title":"Teaching staff","section":"This course","content":" Teaching staff # Julien Corman will teach the lectures and one lab.\nAlbulen Pano will teach the other lab.\nOffice hours # If you need additional help with the content of the course, the assignments and/or your project, you can ask for office hours with any (or both) of us.\nThese appointments must be scheduled via email (follow the links above for our email addresses).\n"},{"id":12,"href":"/docs/env/sections/backup/","title":"Backup","section":"Development environment","content":" Backup # Make sure that your work does not depend on your laptop. You should be able to resume your work easily on another computer if your laptop gets lost, damaged, etc.\nYou should also be able to recover your data if you accidentally delete it from your hard drive.\nWhich information to back up # As a priority, make sure that there exist copies (outside of your hard drive) of:\nyour passwords (and possibly identifiers), and your own work (code, reports, slides, notes, CV, etc.). These copies may be stored on the cloud, an external disk, another computer, etc.\nOptionally, you may also back up:\nconfiguration files present in your home folder. For development purposes, you generally do not need to back up:\ngenerated content (back up the code that generates it instead), large datasets (these should not be present on your laptop to start with), programs (they can be reinstalled). How to back up # Password managers # For passwords, your password manager may provide an online backup option. Other password managers (like pass) may let you synchronize your passwords via git.\nGit # For your own work and/or configuration files, git can be an option.\nA git repository is (roughly speaking) a directory that can be synchronized across different machines (see the dedicated chapter of this course for an introduction to git). For instance, you may create a (private) git repository for each course that you follow and/or each project that you start. Several providers (Github, Gitlab, Bitbucket, etc.) can host copies of your (public or private) repositories on the cloud for free.\nThe benefits are:\nthe possibility to recover any previous state of your work (a git repository stores the whole history of modifications made to it), fine-grained control over your backup: for instance, you can use a \u0026quot;.gitignore\u0026quot; file to exclude files or subfolder that do not need to be backed up. Note. If a git repository is a subfolder of another git repository, then the inner repository is not included in the history of the outer one. Git is not suited to large volumes of data (more than 1 GB in the same repository). This is usually not an issue for your own work (code, notes, reports, etc.) as a student in computer science. However, git should not be used to back up large collections of images, audio files, videos, etc. Other solutions # Numerous programs allow you to back up (part of) the content of your hard drive. One of them may be pre-installed on your operating system.\nYou can back up content on a device that you own (e.g. on an external hard drive), or on the cloud. In the latter case, some fee may apply (depending on the volume of data).\nRestore points # Programs such as System restore (Windows), macOS Recovery (macOS) or Timeshift (Linux) allow you to create snapshots of your system (typically for what lives outside of your home folder), and revert your system\u0026rsquo;s state to one of these snapshots.\nThis can be useful in case of a corrupted system. However, it may be difficult to determine at which point in time the system was \u0026ldquo;healthy\u0026rdquo;. Note also that in such scenarios, a fresh re-install may be a simpler to restart on a sane basis.\n"},{"id":13,"href":"/docs/intro/sections/evaluation/","title":"Evaluation","section":"This course","content":" Evaluation # Evaluation for this course is based on:\nassignments: up to 30 points, a group project: up to 60 points, and an oral exam: up to 10 points. Your final grade is the sum of the above, multiplied by 0.3.\nAssignments # There will be 8 or 9 assignments for this course. These are standard programming exercises, related to notions seen during the lectures. The labs are (mostly) dedicated to these assignments.\nThe release of each assignment is announced via Teams. You will also find a link to the released assignments on the home page of this site.\nAssignments are submitted via GitHub classroom. You can submit an assignment multiple times (but only before its deadline).\nNote. In order to submit your assignments (and your project), you will need a GitHub account. If you do not have one already, please create one and communicate it to to the lecturer. Make sure that you use a single GitHub account for all your assignments and your project. Group project # Guidelines for the content of the project are in the dedicated chapter. We focus here on organization and evaluation:\nEach group must consist of 3 to 4 students. Groups should be decided by March 20, and communicated via mail to the lecturer.\nProjects are delivered via GitHub.\nGrades for a project are awarded individually, based on each student\u0026rsquo;s contribution. Students are expected to work on different computers. Make sure that:\neach student uses a different (and only one) GitHub account, and each student commits (via git) his/her own code. The project\u0026rsquo;s code is expected to apply techniques seen during the lectures, but only if relevant. Please do not add artificial functionalities to your project for the sole purpose of illustrating a certain technique.\nOral exam # The oral exam is individual.\nNo revision is needed.\nWe will ask you questions about your code and/or involvement in the project. For instance:\nwhich design choices you made, which difficulties you encountered, the expected behavior of a certain method, how some portions of the code may be improved, etc. "},{"id":14,"href":"/docs/objects/sections/inheritance/","title":"Inheritance","section":"Objects and classes","content":" Inheritance # Subclass # In most (class-based) object-oriented languages, a class A can extend another class B. In this case, A is called a subclass of B. The intuitive meaning is inclusion between their respective sets of instances, i.e. every instance of A is also an instance of B (but the converse may not hold).\nThis can be paraphrased in English by \u0026ldquo;every A is a B \u0026ldquo;. For instance:\nevery banana is a fruit every square is a rectangle every rectangle is a geometric shape, etc. Transitivity # The \u0026ldquo;extend\u0026rdquo; relation is transitive, meaning that if A extends B and B extends C, then A extends C (for any classes A, B and C ). For instance, from the above examples, one can infer that \u0026ldquo;every square is a geometric shape\u0026rdquo;.\nInheritance # Naturally, if A is a subclass of B then it inherits the properties of B. For instance, a rectangle has four right angles. Since every square is a rectangle, a square has four right angles as well.\nFactorizing code with a (possibly abstract) superclass # Inheritance can be used to avoid redundant code.\nDirect inheritance: illustration # Let us model the units of our game as objects.\nEach unit has:\na type (e.g. mage, unicorn, etc.), a color (at least in the original game), and a certain amount of health. The behavior and stats of a unit (e.g number of turns before attacking when combined, default health, etc.) are dictated by its type. So it makes sense to group units by type.\nFor instance, one can create a class Unicorn whose instances are all units of type unicorn. In Java:\npublic class Unicorn { String color; int health; int attackCountdown; public Unicorn(String color) { this.color = color; health = 1; attackCountdown = -1; } } Note. We used the keyword attackCountdown in this example to indicate the number of turns before the unit attacks (and a special value of -1 when it is not set to attack). But there are of course other ways to model this. Note. In this example, we used the prefix this. for the attribute color only, because there is no ambiguity for the three other attributes. We can also create a class Butterfly on the same model\npublic class Butterfly { String color; int health; int attackCountdown; public Butterfly(String color) { this.color = color; health = 2; int attackCountdown = -1; } } Now consider a method encounter that manages an encounter between two units. Without inheritance, one would need to implement four versions of this method:\nunicorn vs unicorn, unicorn vs butterfly, butterfly vs unicorn, and butterfly vs butterfly. For instance, the first of these four methods could be implemented as follows:\nvoid encounter(Unicorn u1, Unicorn u2) { // save the initial value of the first unit\u0026#39;s health int copy = u1.health; u1.health -= u2.health; u2.health -= copy; } More generally, if the game has \\(n\\) types of units, then the code will contain \\(n^2\\) nearly identical encounter methods.\nQuestion. Can we use inheritance in this example to avoid duplicate code (and how)? Observe that a unicorn and a butterfly (viewed as object) have identical attributes (a.k.a. \u0026ldquo;keys\u0026rdquo;), namely String color, int health, and int attackCountdown. So we can create a superclass of UnicornandButterflythat carries these attributes, and let the two subclasses inherit it. For instance, this superclass may be called Unit.\nHowever, we may also want every unit in the game to have a concrete type (like \u0026ldquo;unicorn\u0026rdquo; or \u0026ldquo;butterfly\u0026rdquo;), rather than being a generic \u0026ldquo;unit\u0026rdquo;. In Java, this can be achieved with the abstract keyword. This keyword ensures that our superclass cannot be directly instantiated (even though it can still have a constructor). For instance:\npublic abstract class Unit { String color; int health; int attackCountdown; public Unit(String color, int health) { this.color = color; this.health = health; int attackCountdown = -1; } } Because this class is abstract, the following code will not compile:\nUnit myUnit = new Unit(\u0026#34;green\u0026#34;, 30, 10, -1); Next, we can declare that Unicorn extends Unit, by using the Java keyword extends. We can also use the constructor of Unit within the constructor of Unicorn, with the Java keyword super.\nNote. In Java (as opposed to C++ for instance), a class can only have one immediate superclass, so the keyword super is never ambiguous. This yields:\npublic class Unicorn extends Unit { public Unicorn(String color) { super(color, 1); } } And we can proceed similarly for the class Butterfly.\nObserve that all the attributes are now carried by the superclass Unit. However, because they are inherited, these attributes can be accessed as if they were regular attributes of the subclass. For instance,\nUnicorn myUnit = new Unicorn(\u0026#34;green\u0026#34;); System.out.println(myUnit.health); } outputs\n1 This allows us to write a generic encounter method, as follows:\nvoid encounter(Unit u1, Unit u2) { // save the initial value of the first unit\u0026#39;s health int copy = u1.health; u1.health -= u2.health; u2.health -= copy; } And this method can be used with unicorns and/or butterflies. For instance:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;yellow\u0026#34;); encounter(myUnicorn, myButterfly); } Transitive inheritance # In the example above, we assumed that all units have a color and can attack. What if we also want to create a type of unit called Wall that has no color and cannot attack? An instance of this class does not need the attributes color and attackCountdown.\nA quick solution here consists is setting attackCountdown to -1, and color to null. However, unnecessary attributes make code harder to understand, and such a design may not scale well if the game is extended with more units types.\nExercise Modify our model to accommodate for the class Wall, so that an instance of Wall only has the health attribute. Possible solution One solution (among others) is the following:\nmodify the class Unit so that it only carries the attribute health, Wall extends Unit, create an (abstract) subclass of Unit (for instance MobileUnit) that carries the other two attributes, Butterfly and Unicorn extend MobileUnit (therefore they also extend Unit, by transitivity). Or in Java:\npublic abstract class Unit { int health; public Unit(int heath) { this.heath = health; } } public class Wall extends Unit { public Wall() { super(5); } } public abstract class MobileUnit extends Unit { String color; int attackCountdown; public OffensiveUnit(String color, int health) { super(health); this.attackCountdown = =1; } } public class Unicorn extends MobileUnit { public Unicorn(String color) { super(color, 1); } } and similarly for Butterfy.\n"},{"id":15,"href":"/docs/encapsulation/sections/visibility/","title":"Visibility","section":"Encapsulation","content":" Visibility # "},{"id":16,"href":"/docs/intro/sections/content/","title":"Content","section":"This course","content":" Content of the course # This is a beginner\u0026rsquo;s course on imperative and (class-based) object oriented programming, with an emphasis on practice and collaboration.\nThe course relies on Java as main programming language. However, concepts seen in this course are for the most part also relevant to other (imperative and/or object-oriented) programming languages, such as C/C++, C#, Javascript, Go, Kotlin, Lua, Perl, PHP, Python, Rust, Ruby, Typescript, Visual Basic, etc.\nPrerequisites # Students are expected to have completed the Computer Programming course (INF/01 76258).\nTherefore the following topics are not covered in this course:\nvariables, assignments, variable scope, basic data types, conditional statements (\u0026ldquo;if/then/else\u0026rdquo;) and loops, expression evaluation, methods/functions, arrays, etc. Students are also expected to have played the board game used as a running example throughout this course.\nOutcomes # After completing this course, students should be able to:\ndevelop a prototype application in Java, write structured, documented and easily maintainable code, collaborate with other developers. Focus # Foundations # Most lectures put an emphasis on problem solving rather than syntax. For conciseness, pseudocode may be used in some sections rather than Java code.\nSome lectures also focus on relatively abstract (albeit simple) notions. These includes elementary mathematical objects or structures (set, tuple, map, relation, preorder, graph, tree, etc.), recursion, boolean logic, regular languages, etc.\nThe purpose is twofold:\nease the application of techniques seen in this course to programming languages other than Java, provide a widely accepted vocabulary to document/explain your code. Collaboration # The course introduces basic coding practices that facilitate development within a team. In particular:\nstructuring a project (components, interfaces, encapsulation, etc.), factorizing code (inheritance, reuse of methods, etc.), test-driven development, collaboration via git, documentation. Note. What is considered good communication in computer science may differ from other disciplines. Emphasis is put on clarity, precision and conciseness. Exercise Here is a (caricature of) a poorly documented method. Can you improve the method\u0026rsquo;s description and/or signature?\n/** The algorithm looks at the first collection, and is only guaranteed to * work if no number is present twice in this collection, in which case it * loops over the numbers contained in this collection (in no specific order) * and checks for each number whether it is also present in the second * collection (which is also expected to have distinct numbers). The code * written in this loop adds the current number (from the first collection) * to the output collection if this number is also present in the second * collection, and does nothing otherwise. */ Collection\u0026lt;Integer\u0026gt; filterNumbersThatAreShared(Collection\u0026lt;Integer\u0026gt; c1, Collection\u0026lt;Integer\u0026gt; c2); Solution A simpler signature and description could be:\n/** * Returns the intersection of sets s1 and s2. */ Set\u0026lt;Integer\u0026gt; intersection(Set\u0026lt;Integer\u0026gt; s1, Set\u0026lt;Integer\u0026gt; s2); However, the following topics are beyond the scope of this course:\ncontinuous integration, project management (agile methodology, bug tracking, etc.), advanced git workflows, advanced design patterns, dependency injection, etc. Quizzes # Some lectures will include quizzes. These are anonymous, and therefore are not part of your evaluation. The purpose is to:\nmake lectures more interactive and adapt the pace of the lectures based on students\u0026rsquo; answers. It is in your own interest to answer them without external resources (web, chatbots, IDE, etc.). Here is a link to the first quiz: https://forms.gle/7Y2MpzE7v5xzUJFy7.\nTopics covered # Due to limited time, many notions (such as asymptotic cost, regular languages, hashmaps or multi-threading) are only briefly introduced in this course. However, some of them will be further discussed in other courses of the bachelor.\nProgramming concepts and techniques # An important part of the lectures is dedicated to the following core topics:\nobjects, classes and interfaces, (abstract and concrete) data structures, recursion. In addition, the following will be (briefly) introduced:\nregular expressions, generics, lambda expressions and streams, multi-threading. Note. Some of these topics pertain to functional programming, but have been incorporated (in some form) to several imperative languages over the years. Software engineering # unit tests, exceptions, code factorization, object-oriented design (basic design patterns). Java # compilation/interpretation, bytecode, JVM and JDK, memory (stack VS heap), garbage collection, input/output, object serialization, JSON/XML serialization. Tools and tutorials # git, build automation (Maven and Gradle), using an IDE efficiently (navigation and debugging) using a terminal efficiently (introduction). "},{"id":17,"href":"/docs/objects/sections/methods/","title":"Instance methods","section":"Objects and classes","content":" Instance methods # In most object-oriented languages (like Java), methods are implemented within class declarations.\nAn instance method requires an object of its class to be created before it can be called.\nIn Java, an instance method of MyClass can be called by appending . to a variable of type MyClass. The object referenced by the variable is accessible in the method, as well as its attributes.\nThis intuitively allows us to write methods with one less argument. For instance, consider the following method, which verifies whether two instance of MobileUnit have the same color:\npublic boolean sameColor(MobileUnit firstUnit, MobileUnit secondUnit){ return firstUnit.color.equals(secondUnit.color); } This method may be called as follows:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;green\u0026#34;); boolean sameColor = sameColor(myUnicorn, myButterfly); Instead, one may write an equivalent method inside our class MobileUnit, with one less argument:\npublic abstract class MobileUnit extends Unit { String color; ... public boolean sameColorAs(MobileUnit otherUnit){ return color.equals(otherUnit.color); } } and we can call this method as follows:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); Butterfly myButterfly = new Butterfly(\u0026#34;green\u0026#34;); boolean sameColor = myUnicorn.sameColorAs(myButterfly); } In this example, observe that:\nthe implementation of sameColorAs is in the superclass MobileUnit, in this method , we used the attribute color. Overriding # A same instance method can be declared in a class C and a subclass S or C. In this case, we say that S overrides the method.\nWhen such a method is called, the most specific applicable version is executed. For instance, consider an instance method whoAmI, declared in both Unit and MobileUnit, as follows:\npublic abstract class Unit { public void whoAmI(){ System.out.print(\u0026#34;I am a unit\u0026#34;); } } public abstract class MobileUnit extends Unit { ... public void whoAmI(){ System.out.print(\u0026#34;I am a unit and I can move\u0026#34;); } } Now consider this program:\nUnicorn myUnicorn = new Unicorn(\u0026#34;green\u0026#34;); myUnicorn.whoAmI(); This program will outputs I am a unit and I can move, because Unicorn is a subclass of MobileUnit. However, the following program simply outputs I am a unit, because Wall is not a subclass of OffensiveUnit.\nWall myWall = new Wall(); myWall.whoAmI(); Code factorization # An overriding method often extends the functionality of the overridden one. This is a frequent source of duplicate code. For instance, in the example above, both implementations of whoAmI print output the substring \u0026ldquo;I am a unit\u0026rdquo;.\nA common way to factorize this consists in calling the overridden method inside the overriding one. In Java, the keyword super allows us to distinguish the two methods (since they have the same name). For instance, in the above example, the overriding method may be better written as follows:\npublic class OffensiveUnit extends Unit { int attack; ... public boost() { super.boost(); attack += 5; } } Question: in this example, what would be the effect of replacing super.boost() with boost()? Answer: the method would not terminate.\nExercise: consider the method encounter of the previous section. Rewrite it as an instance method so that no cast or type check is needed.\nPossible solution: the trick here consists in viewing an encounter from the point of view of the defender:\npublic class Unit { int health; ... public void defend(OffensiveUnit attacker) { health -= attacker.attack; } } public class OffensiveUnit extends Unit { int attack; ... public void defend(OffensiveUnit attacker) { super.defend(attacker); attacker.health -= attack; } } "},{"id":18,"href":"/docs/env/sections/install/","title":"Software management","section":"Development environment","content":" Software management # Dependency hell # As a developer, you frequently need to download, install and/or update:\nlibraries used in your projects (called dependencies), core programming utilities, such as a compiler or interpreter for a given programming language, a package manager, etc. tools for software development: editor, debugger, visualization tool, etc. These programs have their own dependencies, that have their own dependencies, etc. And two programs may depend on different versions of a same third program.\nDependency management is a frequent source of complications during software development. Dependency patterns that may occur include:\nco-dependencies:\nFor instance, consider the following configuration:\nProject \\(P\\) depends on a certain version of Library \\(L_1\\) , \\(P\\) also depends on Library \\(L_2\\) , which depends on an older version of \\(L_1\\) (and the two versions are not compatible), The build of project \\(P\\) may fail because it can contain only one version of \\(L_1\\) .\ncyclic dependencies:\nLibrary \\(L_1\\) depends on a specific version of Library \\(L_2\\) , and\n\\(L_2\\) depends on a specific version of \\(L_1\\) .\nUpgrading one of these two libraries independently may prevent the other one to run. But it may be possible to upgrade both at the same time.\netc.\nNote that in these two examples, dependencies may be direct or transitive. As a result, it can be very difficult to diagnose such problems.\nThe term dependency hell is sometimes used to refer to such situations.\nTwo (non-exclusive) broad approaches are commonly adopted to avoid such issues:\nautomated dependency management, and self-containment: avoid shared libraries, each program having a copy (some of) its own dependencies. Automated dependency management # Definitions # A package is a program together with some metadata. These metadata include the program\u0026rsquo;s name, version, release date, authors, licence and dependencies (together with their versions).\nA software repository is a collection of packages that comply to the same format of metadata. A software repository (precisely, multiple copies of it) is generally hosted on the cloud.\nA package manager automates the installation (as well as configuration, update and removal) of packages from a software repository (or several) to a user\u0026rsquo;s machine.\nExamples # Many programming languages have dedicated package managers. For instance:\nMaven for Java, npm for Node.js (Javascript) pip for Python, NuGet for .NET (C#, F#, and Visual Basic) RubyGems for Ruby, sbt for Scala, CPAN for Perl CRAN for R, etc. Some applications also have dedicated software repositories for plugins (and plugin managers to handle these plugins). For instance.\nThe VSCode market place, CTAN for LateX, MELPA for Emacs, etc. Other applications (such as zsh, vim or neovim) only have plugin managers, without a centralized software repository. These managers install plugins directly from hosts (e.g. a Github repository) specified by the plugins\u0026rsquo; authors.\nLast (but not least), an operating system (OS) may use a package manager and software repositories. Notably, this is the preferred way of installing software on most Linux distribution. Widely used OS package managers include:\napt for Debian and derivatives, dnf for Fedora and derivatives, pacman for Arch and derivatives, homebrew for macOS, Chocolatey (since 2011) and winget (since May 2021) for Windows Usage # Installing, updating and removing software via a package manager is highly recommended in most scenarios. In particular:\ndependencies of a package are also installed or updated (or it some cases removed) transitively, some package managers can install and manage several versions of the same package (when needed), the installation process often uses a default configuration and directory layout (environment variables, etc.) that facilitates interaction with other programs. The installation (or update or removal) procedure is also significantly simpler, thus leaving less room for manual errors. As an illustration, here is the full procedure to install Maven with the apt package manager:\napt install maven and similarly with homebrew:\nbrew install maven or with Chocolatey (note that Maven cannot yet be installed via winget):\nchoco install maven In comparison, the procedure to install Maven manually on Windows is more involved, thus more likely to introduce errors (trough inadvertence, or by following outdated instructions).\nHowever, in some (rare) scenarios, a manual installation may be preferred. In particular when the latest version of a program is needed, but not available yet on the software repository.\nSelf-containment # A variety of strategies can be adopted to build a program so that it runs in partial isolation from the rest of the system that it is deployed on (i.e. in its own environment, and with its own dependencies, that cannot be used by other programs).\nFor instance, a Node.js project often includes a copy of all the Javascript libraries that it depends on (transitively). Further self-containment strategies may involve different levels of virtualization (e.g. via Docker).\nThis is one way of avoiding shared dependencies. Other benefits are increased portability, and ease of installation by end-users. Drawbacks include and increased workload on the developer\u0026rsquo;s side (e.g. for maintenance), and limited opportunities for integration with other programs.\nSelf-containment in Java # In Java, self-containment is usually less pronounced during development. Java libraries are typically managed via Maven:\non a per-user basis (which can be viewed as a compromise between per-project and system-wise): each user has a hidden folder \u0026lt;homeDir\u0026gt;/.m2/ that contains all Java libraries used in his/her projects, and allowing multiple versions of the same library to coexist. However, a Java application that targets non-developers can be released together with its Java dependencies, as a so-called über jar (a.k.a. fat jar).\n"},{"id":19,"href":"/docs/intro/sections/board-game/","title":"Board game","section":"This course","content":" Board game # In order to follow this course, you will need to play one of the two following video games:\nMight \u0026amp; Magic: Clash of Heroes, or Legend of Solgard. These two games have very similar mechanics. So by default, we will refer to them as a unique game (e.g. when we write \u0026ldquo;this game\u0026rdquo; or \u0026ldquo;our board game\u0026rdquo;).\nWhy this game # Turn-based board games (like chess, go, checkers, etc.) are traditionally a good playground to learn the basics of algorithmic thinking.\nDisclaimer. This is not a course video game development, but about general-purpose programming. This game will only serve as didactic support. Precisely, this game will serve two purposes:\nwe will use it as a running example throughout the lectures, and you can choose to implement (your own version of) it as your project. By default, we will focus on the two player variant, where both players play by the same rules. These two players may be humans and/or bots.\nHow long do I need to play # You only need to play long enough to get a reasonable understanding of the mechanics of the game.\n1.5 to 2 hours should be sufficient.\nWarning. In both games, mechanics are introduced gradually, so you are unlikely to get a full overview by playing less than an hour. Which game to choose # Might and Magic clash of heroes (MMCoH) # This game was initially released in 2009 for Nintendo DS. It was then ported to PC and several consoles, as well as Android and IOS.\nA free demo was available on Steam until July 2023. Unfortunately, the game has been re-released since, by another editor (as a so-called \u0026ldquo;definitive edition\u0026rdquo;). As a result, the demo is not available on Steam anymore.\nThe Android and IOS versions have also been removed from the Google Play store and App store respectively.\nAdvantages.\nThe mechanics of this game may be easier to understand (in a short amount of time). The default mode is the (symmetric) 2 player mode (player vs bot or player vs player) that we will work on. Drawbacks.\nThe touch-screen interface on Android and IOS is arguably dated. Legend of Solgard # This game was released in 2016 for Android and IOS. It is still available on the Google Play store and the App store.\nIt is free to play, with optional microtransactions (via so-called loot boxes).\nWarning. For this course, you do not need to perform any transaction. Advantages.\nAnimations can be sped up. The touch-screen interface is more moderns than the one of MMCH for Android and IOS. Drawbacks.\nProgression is based on a (complex) system of virtual currencies, which may add noise to the interface. The game can only be played (for free) a limited amount of time per day (approximately 45 min). The default mode is not the (symmetric) 2 players mode that we will work on (it requires more playtime to be unlocked). So you will need an extra effort of imagination. "},{"id":20,"href":"/docs/objects/sections/mutability/","title":"Mutability","section":"Objects and classes","content":" Mutability # "},{"id":21,"href":"/docs/env/sections/os/","title":"Operating system","section":"Development environment","content":" Operating system (OS) # Your computer does not bind you to one OS. You can run multiple OSs on the same computer by:\npartitioning your disk, or booting from an external drive, or using virtualisation. Depending on what you are developing, one operating system may be more convenient than another.\nWe review below some of the benefits and drawbacks of developing under Windows, macOS and Linux.\nWindows # Benefits and drawbacks # Here are some benefits of using Windows as your OS for software development:\nit comes pre-installed on most PCs, it is compatible out-of-the-box with most hardware, it provides a fully integrated development suite for the .NET framework (C#, F#, Visual Basic), and to a lesser extent C/C++. And some drawbacks:\nfor general-purpose development, Windows is not friendly to new programmers (compared to Linux or macOS), the usage of an (OS-wise) package manager is (still) not the norm, it sometimes favors backwards compatibility over compliance with modern standards. When to use Windows (and when not) # Windows is the OS of choice for developing software meant to run on Windows only, or cross-platform software written in one of the .NET languages (mostly C#). C# is notably used for game development (e.g. for Unity) and graphical interfaces (although Javascript-based graphical frameworks may have become more popular lately). Another interesting feature of C# (compared to Java) is the Language Integrated Query framework, which provides a tight integration with database engines.\nVisual studio (not VSCode!) offers a fully integrated development suite for the .NET languages, and is also commonly used for C/C++.\nFor other programming languages, using Windows may require extra efforts or precautions (compared to Linux or macOS), especially for new developers.\nIn particular, manual software installation/upgrade/removal can be complex and error-prone. Writing scripts (e.g. for two programs to interact) can also be more involved, especially given the fact that Windows has three shells (the Windows shell, the Windows Power Shell and Power Shell), or four if counting WSL.\nBesides, additional care must be taken to write platform-independent code. Here are for instance two frequent sources of errors made by students:\nPath names: Windows uses \\ as a path separator, as opposed to the / used by other OSs (or in web URIs). In Java, a path can be safely written with /. At run time (i.e. when the program is executed), this symbol will be interpreted based on the underlying OS (i.e. as \\ on Windows, and as / on other OSs). However, a path written with \\ will be interpreted as such (therefore the program will throw an exception on OSs other than Windows). Line breaks: many text editors for Windows encode a line break as two ascii characters (\\r\\n), against a single character (\\n) on most modern systems. This is often transparent for regular users, because many text editors (or even git) use detection and normalization procedures for line breaks. However, this may be a source of bugs for developers, for instance when generating code, or when writing a script to configure a virtual environment (e.g. a Docker image). For this course # You should be able to complete all assignments and write your project using Windows (even if your collaborators use other OSs).\nHowever, you may need to pay extra attention, for instance to path names (as explained above). Installing and configuring the necessary software may also be more complex (again, we recommend using a package manager when possible).\nIf you do not manage to set up your working environment for this course (see the requirements) in a short amount of time, then consider using a Linux distribution instead (see the dedicated section below for using Linux alongside Windows).\nmacOS # Here are some benefits of using macOS as your OS for software development:\nit comes pre-installed with an Apple computer, it is POSIX-compliant (since 2001), thus offering easier interoperability with Linux/BSD/Android/IOS the Homebrew package manager is relatively mature. And some drawbacks:\nsome software may not be available, your working environment is not easily customizable. When to use macOS (and when not) # MacOS is rarely used on hardware other than Apple computers.\nIt is often a good choice for new developers. In particular, Homebrew offers an easy way to install programs needed for general-purpose development (compilers, interpreters, other package managers, etc.), and its software repository is reasonably comprehensive in that regard (albeit smaller than repositories used by Linux distributions).\nA number of more experienced developers also work with macOS, notably for web development (Node.js/Javascript) or data science related projects (Python).\nA Linux distribution may be more convenient in some situations, e.g. when developing a program meant to run on a server, or when working with Docker containers.\nAnother drawback is the lack of customization of your working environment (largely bound to Apple proprietary software), which can a limitation for more experienced programmers.\nFor this course # If you have a Apple laptop, then you should not need an OS other than macOS for this course (even if your collaborators use other OSs).\nLinux # Here are some benefits of using Linux as your OS for software development:\nit is used by most servers, it is relatively lightweight, for developers, it has an important (and high-quality) online community support, (OS) package managers are mature and easy to use, your working environment can be easily customized and/or configured. And some drawbacks:\nLinux rarely comes pre-installed on a computer, there is sometimes too much choice of programs or distributions, Linux distributions are (still) not as friendly to desktop users as Windows or macOS, Hardware support (e.g. for peripherals) is (still) more limited than for Windows. When to use Linux (and when not) # Linux is often the OS of choice for developing programs meant to run on servers. It is also a good choice for writing cross-platform software.\nLinux (together with macOS) is also a good environment to learn the basics of programming, due to native compatibility with a wide range of technologies for general-purpose development (e.g. Docker). Software installation, configuration, upgrade and removal is also made easier by mature package managers. Besides, the Linux shell is a versatile yet relatively simple tool that can ease process management or interaction between programs.\nLinux is arguably not the best choice for developing Desktop applications that target a specific OS (such as Windows or macOS), or in some specific domains such as game development.\nFor this course # You should be able to complete all assignments and write your project using a Linux distribution (even if your collaborators use other OSs).\nIn particular, if you face important issues when setting up your working environment (git, JDK, Maven, Gradle, etc. ) on Windows, we recommend using a Linux distribution instead, because it may save you time. Keep in mind however that this will not solve issues related to the configuration of your IDE.\nNot that you can use Linux (for development) and Windows (for other purposes) on the same computer.\nWhich distribution to choose # You can use any (reasonably mainstream) all-purposes Linux distribution for this course (and other courses).\nThe choice may seem overwhelming at first sight, but most distributions are forks of a few popular ones (Debian, Fedora, Arch, \u0026hellip;), and are relatively similar to each other. Besides, Linux environments are highly customizable: for instance, the choice of a distribution does not bind you to its default desktop environment. Available software is also very similar from one distribution to another: regardless of the distribution, you will have access to openJDK, git, Maven, etc. via a package manager.\nDistributions that are more desktop-oriented can be more friendly to newcomers (especially non-developers), but also come with unnecessary software. Two popular distributions in this category (for new users) are Linux Mint and Zorin OS. Both are forks of Ubuntu, which is itself a fork of Debian.\nFor a (slightly) more lightweight distribution, MX Linux is currently a popular choice. It is also based on Debian.\nHow to install a Linux distribution # Most distributions provide detailed instructions on their web page.\nRegardless of the distribution, you have are (at least) three possible options:\nVirtual machine (such as VirtualBox). This is the simplest option in terms of installation. But also the most expensive computationally, so only suited to a relatively powerful computer. Performance is also suboptimal.\nA virtual machine is often good way to test a distribution before properly installing it.\nBootable drive. You can store your Linux distribution on an external hard drive, and boot on Linux when the hard drive is connected to your computer Compared to the third options below, this may affect the performance of disk access.\nPartition (with dual boot). You can dedicate a certain amount of space to a Linux distribution your hard drive. A minimum of 30 GB is often recommended, but this can be adjusted later on. When starting your computer, it will let you choose which OS to boot on. This is the best option in terms of performance.\nFor the third option, the installation procedure has become more involved on some recent computers due to encrypted disks or so-called \u0026ldquo;secure boot\u0026rdquo;. So make sure that the instructions that you follow are up-to-date "},{"id":22,"href":"/docs/intro/sections/bibliography/","title":"Bibliography","section":"This course","content":" Bibliography # Java\u0026rsquo;s syntax # In each chapter of this course, you will find Java code snippets that illustrate how to perform certain operations. However, this documentation is far from exhaustive (on purpose).\nSo when it comes to syntax, the first two sources of complementary material for this course are:\nthe Javadoc of the libraries (standard and auxiliary) used in your project/assignments. Your IDE is often the fastest way to navigate through it, the web. Books # You will find a reading list for this course in the catalogue of the Unibz\u0026rsquo;s library. All books can be accessed via the library (either physically or digitally).\nAmong these books, we highlight the following two:\nMain textbook # Java: How to Program, Early Objects (11th edition)\nby Paul Deitel and Harvey Deitel\nPearson, 2018\nThis is a general introductory book to Java and object oriented programming. It covers most of the topics seen in this course.\nGood practices # Effective Java (3rd edition)\nby Joshua Bloch\nAddison-Wesley Professional, 2017\nThis is a reference book for best practices and common pitfalls when programming in Java.\n"},{"id":23,"href":"/docs/objects/sections/comparison/","title":"Comparing objects","section":"Objects and classes","content":" Comparing objects # "},{"id":24,"href":"/docs/objects/sections/encapsulation/","title":"Encapsulation","section":"Objects and classes","content":" Encapsulation # Encapsulation is a (vague) principle in object-oriented programming that refers to \u0026ldquo;bundling\u0026rdquo; data with the code that operates on it, and restrict visibility of this code and data to other components of a system.\nFrom Wikipedia: \u0026ldquo;Essentially, encapsulation prevents external code from being concerned [\u0026hellip;]\u0026rdquo;\nEach component hides its internal logic by exposing only data (objects, attributes) and methods that other components may need.\nExample. In our game, consider the component that is in charge of rendering the game visually, and let us call it the \u0026ldquo;renderer\u0026rdquo; for the sake of this example.\nThe renderer exposes a method that takes as input a game snapshot, and draws this snapshot on screen, as fast as possible. However, the renderer may receive snapshots faster than it can display them (due to the duration of on-screen animations). As a workaround, the renderer buffers the snapshots that it receives, displaying a new snapshot only after all previously submitted ones have been displayed. As a buffer, it uses a data structure called a queue. But this queue is not exposed to other components, because they should not need to access it. In other words, this queue is an implementation detail, internal to the renderer.\nSimilarly, the implementation of this exposed method relies on subroutines that are only useful to the renderer. These auxiliary methods do not need to be exposed.\nEncapsulation also largely dictates how libraries are structured. For instance, when you create a String in Java, you do not have access to the internal representation of the string object.\nEncapsulation can have many benefits. Among others:\nModular code. For instance, in order to change the aspect of our game, the \u0026ldquo;renderer\u0026rdquo; could be replaced wit another one. As long as the new renderer implements (in some way) the methods that were exposed by its predecessor, this will not affect the rest of the system. Code that is easier to understand (and thus to debug). For instance, if the queue is internal to our renderer, then we know that it cannot be responsible for the malfunction of another component. Easier collaboration. For instance, Alice may refactor the internal structure of the renderer, knowing that this will not affect Bob, who is currently working on the backend. This is why a common practice in object-oriented programming consists in hiding all attributes and methods of a new class by default, and make only visible the ones that needs to be accessed from external code. In particular, this is likely to be the default behaviour of your IDE.\nin Java # Encapsulation can be enforced in Java by restricting access to certain attributes and/or methods of a class.\nEach attribute or method can have a visibility modifier, which indicates the classes that can access it:\nprivate restricts visibility to the current class. protected restricts visibility to the current class and its subclasses package-private restricts visibility to the folder of the current class (and its subfolders), called a package in Java. public does not restrict visibility. An attribute or method without visibility modifier is considered package-private.\n"},{"id":25,"href":"/docs/env/sections/requirements/","title":"Requirements for this course","section":"Development environment","content":" Requirements for this course # For this course, you will need:\nGit Version 2.2 or higher A Java Development Kit (JDK) for Java 17 (e.g. openJDK) Maven Version 3.6 or higher In addition, if you choose the board game as project, you will need:\nGradle Version 7.2 or higher Again, we recommend using a package manager to install these programs if possible.\nFor Windows users. Maven is not available on the winget repository. But you can find it on the Chocolatey repository, or follow manual installation instructions. You will also need:\nan IDE a text editor (possibly your IDE) a terminal emulator (possibly your IDE) "},{"id":26,"href":"/docs/objects/sections/clone/","title":"Copying objects","section":"Objects and classes","content":" Copying objects # "},{"id":27,"href":"/docs/env/sections/ide/","title":"IDE","section":"Development environment","content":" Integrated development environment (IDE) # An IDE is an application that consists of a source code editor with additional functionalities such as a debugger or build automation.\nFor this course, you can use any IDE (or enhanced code editor) for Java with at least the following features:\na debugger navigation to variable/class/interface declaration and usage, variable/class/interface renaming, Maven integration, Gradle integration if you choose the board game as your project. We give a brief overview of the most popular choices (for Java).\nEclipse, Netbeans and Intellij IDEA # All three of these editors have similar functionalities, and any of these three can be used for this course. All three were designed with Java in mind, and thus offer advanced integration with a variety of Java frameworks. Each of them also supports other programming languages, but the list varies from one editor to the other.\nAs of today, Intellij IDEA (IntelliJ for short) is probably the most popular Java-centric editor. This is a closed-source project, thus offering more limited customization than the other two.\nEclipse is an open-source project with a large ecosystem. It is known for its community support and its advanced plugin system, which led to the development of a variety of extensions over the years (including support for C/C++, Python, etc.) Note that for performance reasons, Eclipse comes with its own Java Virtual Machine (JVM), which in some (rare) cases may not behave like other JVMs.\nNetbeans is also an open-source project. Notably, Netbeans provides a graphical tool to design Graphical User Interfaces (GUIs) for the Java Swing framework. However, we do not recommended using it for an advanced GUI (multiple windows, etc.), because the generated code can be very difficult to maintain or debug.\nVisual Studio Code (VSCode) # VSCode and Visual Studio are two independent programs, and serve different purposes. In particular, Visual Studio does not support Java (anymore). Note. VSCode is often categorized as a code editor rather than an IDE. For this course, VSCode (together with some plugins) can serve as a Java IDE, so we will refer to it as an IDE for simplicity. VSCode is a (mostly) open-source project developed by Microsoft. Precisely, Code-OSS is a (fully) open source editor, and VSCode is a distribution of Code-OSS with additional features.\nVSCode has probably become the most popular code editor among developers. For instance, VSCode is used by 74% of respondents of the 2023 StackOverflow developer survey.\nThe success of VSCode is often explained by its rich repository of (community-developed) plugins. This may in turn be explained by the fact that VScode is based on Electron, and thus allows writing plugins in Javascript, which has become the most popular language for developing GUIs.\nNote that VSCode was not developed as a Java code editor, but as a general-purpose editor with a focus on web development (Node.js/Javascript). However, VSCode can serve as a Java IDE (at least to some extent) thanks to some plugins. For this course, you may use the extension pack for Java. If you choose the board game as your project, you may also need a plugin for Gradle, such as this one.\nIn some cases, using VSCode may require a little bit more configuration than a Java-centric IDE.\n"},{"id":28,"href":"/docs/objects/sections/quasi-objects/","title":"Quasi-objects","section":"Objects and classes","content":" Quasi-objects # Enumerated type # Record # "},{"id":29,"href":"/docs/env/sections/text_editor/","title":"Text editor","section":"Development environment","content":" Text editor # A text editor allows you to edit plain (i.e. non-formatted) text. A text editor can open any file produced with a text editor (and more), regardless of the file\u0026rsquo;s extension.\nIn this sense, Microsoft Word is not a text editor (neither are Apple Pages or LibreOffice Writer).\nMost operating systems comes with one or several text editor(s) pre-installed, such as Notepad++ (Windows), TextEdit (macOS), gedit (default Ubuntu), etc.\nUsage # Your IDE is an (enhanced) text editor, so you can use it as such.\nBut it some scenarios, it can be useful to use a lighter program, for instance for:\nediting the configuration file of a program, modifying a small script (or even single command line instruction) copy-pasted from the web, etc. Among other reasons:\nopening an IDE can take time, if your IDE has autosave enabled, you may accidentally add unrelated files to your current project, etc. Advanced text editors # For most purposes, a basic text editor should be sufficient.\nBut depending on your workflow, you may want to try a more advanced one.\nVSCode # We already introduced VSCode in the section dedicated to IDEs.\nvi and emacs # We also bring to your attention two keyboard-centric editors called vi and emacs. Both were developed in the 70\u0026rsquo;s (before the mouse became a widespread peripheral) but are still commonly used today (in some form) by developers.\nWe do not recommend learning vi or emacs at this (early) stage of your studies, because it often requires time, and you arguably have more fundamental thing to learn. But you may give them a try at some point of your career, because they may significantly improve your productivity.\nvi/vim/neovim # vi was initially released 1978, as part of the first BSD distribution. The original program is rarely used today, but vim (for \u0026ldquo;vi improved\u0026rdquo;), released in 1991, and neovim, released in 2015 are still popular among developers. For instance, 22% (resp. 12%, non-exclusive) of respondents to the 2023 Stack Overflow developer survey use vim (resp. neovim) as a code editor.\nvi/vim/neovim is a so-called modal editor, meaning that users can switch between different modes. In one mode, pressing a standard key inserts the corresponding character on screen, whereas in another mode, pressing the same key has a different functionality (navigation, copy/paste, etc.). These key functionalities are referred to as vi keybindings or vi motions, and allow performing a variety of text editing operations in an efficient way.\nvi keybindings are commonly used in applications other than vi/vim/neovim, with dedicated plugins. For instance, most code editors/IDES (VSCode, IntelliJ IDEA, emacs, etc.), terminal emulators, and even web browsers have plugins for vi keybindings.\nVim and neovim are very customizable, with comprehensive collections of (community-developed) plugins, which allows using them as IDEs. We do not recommend trying this at this stage of your studies, because configuration may require a very significant time investment (a lot more than VSCode for instance). The original vi still comes pre-installed on many operating systems (Windows, macOS, Linux, \u0026hellip;), and may be the default text editor opened by terminal-based applications (e.g. git) on your system. If this is the case (and if you do not know the vi keybindings), we recommend changing this setting. Emacs # Emacs was initially written in 1976. The most popular version is GNU Emacs, released in 91, notably co-developed by Richard Stallman.\nEmacs is partly responsible for popularizing (sequences of) combinations of keys (e.g. Ctrl+\u0026lt;letter\u0026gt;), as opposed to modal editors like vi. GNU Emacs has more than 10 000 built-in commands, and also provides a (limited) mouse interface.\n5% of respondents to the 2023 Stack Overflow developer survey use emacs as a code editor.\nEmacs is also very customizable, with a comprehensive collections of (community-developed) plugins (probably more comprehensive than vim), and dedicated software repositories. Notably, Emacs tends to serve as a unique user interface for a variety of tasks (code editing, terminal emulation, email management, web browsing, playing music/videos, etc.). Emacs can be used as an IDE, but for the same reason as for vim or neovim, we do not recommend trying this at this stage of your studies. "},{"id":30,"href":"/docs/env/sections/eval/","title":"Evaluation environment","section":"Development environment","content":" Evaluation environment # The evaluation environment for your project is a virtual machine (with Ubuntu 20) deployed on Microsoft Azure. You are not supposed to develop on this machine, but your project must run in this environment to be evaluated.\nEach student gets his or her own clone of the original machine. Maven, Gradle, git and a Java 17 JDK are already installed. You will also be granted administrator rights, so that you can install additional software (if any) needed to run your project.\nYou can log to this machine via ssh (using a terminal), or via RDP (using an RDP client).\nHere is a (non-exhaustive) list of RDP clients:\nWindows:\nWindows Remote Desktop (built in), also called MSTSC Royal TS OSX:\nMicrosoft Remote Desktop Royal TS Linux:\nRemmina rdesktop The registration link is shared on the Microsoft Team for this course. After logging in (with your Unibz credentials), you should see the following:\nToggling the button (bottom-left) will start your own clone of the virtual machine (this may take a few minutes).\nOnce your machine is running, click on the 3 dots (bottom right) and select \u0026ldquo;show RDP information\u0026rdquo;. This will give you the string (host name and port) needed by your RDP client to connect to the machine.\nThe credentials for logging in to the machine are also shared on the Microsoft Team for this course.\nOnce connected, you can use the super key (or click on \u0026ldquo;Activities\u0026rdquo;) to display a menu with some applications. To open a terminal, click on the terminal in this menu.\n"},{"id":31,"href":"/docs/env/sections/terminal/","title":"Terminal","section":"Development environment","content":" Terminal # Using a terminal can be necessary during development, in order to execute a program that does not have a graphical user interface (GUI).\nBut even when a GUI is available, a Command Line Interface (CLI) can still be the preferred way to interact with some programs. Possible benefits are:\nefficiency (thanks to autocompletion, there is very little to type), automation (via scripting), more transparency (a GUI may add a layer of obfuscation), stability over time (GUIs tend to change from one version of a program to another), reproducibility (the same command performs the same action, with a limited reliance on memory), customizability. Demonstration # The following demo is meant to (quickly) illustrate some benefits of a properly configured terminal, as well a few terminal-based applications.\nThis is not an introduction to bash or Linux core utilities.\nVirtual environment # For this demo, we deployed a virtual machine with a pre-configured terminal.\nThe instructions for connecting to this machine are identical to the one for the project evaluation environment.\nCreating a static website # As an exercise, we will create a static website, using a simple framework called Hugo.\nFirst, let us create a folder dedicated to our projects. For instance\nmkdir workspace Then navigate to this folder with the command cd (you do not need to type the full name of the directory, just type cd w, and press the Tab key for autocompletion):\ncd workspace Next, we will (loosely) follow the quick start tutorial for Hugo. Explanations about some of the command below can be found here.\nCopy-paste the following instruction and press Enter:\nhugo new site mySite This will create a project in a fresh folder called mySite. Let us navigate to it (again, you can take advantage of autocompletion):\ncd mySite Now copy-paste the following commands to declare this folder as a git repository and download a graphical theme for our website:\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml Navigation # At any moment, you can run the command\npwd to display the current directory. With this command, you can check that you are indeed in the folder mySite.\nTo get a overview of the content of the current folder, run:\nll To get a recursive overview of the content of this folder, run\ntree In order to navigate to a certain subfolder in this tree, we can take advantage of the fuzzy finder. For instance, let us assume that we want to move to some folder called socials, but we forgot its exact path.\nRun:\nc This will display the paths to all directories in this tree. You can type characters to restrict your search, and use the up down arrow keys to select your destination. For instance, type the three character soc. The best matches are displayed at the bottom of the list. To select one of them, navigate up and down with the arrow keys and press Enter.\nNote. Thanks to fuzzy search, the characters that you type do not need to be contiguous in a path. For instance, when you typed soc, all paths containing these three letters (in that order, but not necessarily contiguous) were retained.\nNow let us navigate back to the mySite folder. Here we can use zoxide, which uses our path navigation history to guess our destination. Run:\nz mySite (or possibly fewer letters).\nSimilarly, to go back to the socials subfolder that we previously went to:\nz socials Alternatively, you can switch between your current location and the previous one (thanks to zoxide still) with\nzz Starting the web server # Navigate (back) to the mySite folder (you should know how to do this by now), and run\nhugo server This will start a local development server for our website. To visualize the site, open Firefox (from the app menu), and use the address displayed in the terminal (it should be http://localhost:1313/)\nTo stop the server (or any Linux process running in a terminal), go back to the terminal an press Ctrl+C.\nNext, we will add content to our website, while keeping the server running.\nTo restart the server, we can use our command history. Type the first letters of the command that we used above to start the serve (e.g. hu). By pressing the up and down arrow keys, you can scroll through the commands that you already typed and start with these letters. Scroll until you fin the command hugo server, and press Enter to restart the server.\nIn order to keep the server running, we will execute our next command in another terminal. You can create a new one by clicking on the boxed \u0026ldquo;+\u0026rdquo; icon:\nDo not forget to activate zsh in this new terminal:\nzsh Adding content # Navigate to the (immediate) subfolder content of mysite. Then create a subfolder named posts:\nmkdir posts Navigate to this new folder. Then create a new text file called myPost.md. You can for instance do this with the command:\ngedit myPost.md which will open the file with the test editor \u0026ldquo;gedit\u0026rdquo;.\nNote. If you only type ge followed by Tab, zsh will suggest you a list of programs whose name starts with these letters. You can scroll through them by pressing Tab again, or add a letter to disambiguate your search.\nIn the text editor, copy-paste the following content:\n+++ title = \u0026#39;My First Post\u0026#39; date = 2024-01-14T07:07:07+01:00 +++ ## Introduction This is **bold** text, and this is *emphasized* text. ### Subsection This is a [link](https://gohugo.io) to the Hugo website. In this file, everything below the header (title/date) is written in Markdown.\nSave the file, and check with Firefox that your first post has been added to your website.\nAliases # The command c that we used above is actually an alias for a more complex command, namely cd $(find * -type d | fzf)\nWe declared this alias in the file ~/.zshrc (remember that ~ is a shortcut for your home folder).\nLet us open this file to see the declaration of this alias. Navigate to your home folder, for instance with:\ncd And list its content:\nll The file .zshrc should be there. Open this file with gedit:\ngedit .zshrc Note. Again, you can take advantage of autocompletion here. For instance, press ged followed by Tab followed by .z followed by Tab.\nTowards the end of this file, you will see the declaration of the alias:\nalias c=\u0026#39;cd $(find * -type d | fzf)\u0026#39; Let us create another useful alias. Ubuntu has a convenient command called xdg-open that opens a file with the default application associated to this file\u0026rsquo;s extension (this is the equivalent of a double-click in a graphical file browser). Let us set a simpler name than xdg-open to execute this command. For instance o (like \u0026ldquo;open\u0026rdquo;).\nFirst, let us check that the name o is not used already for another command. Open a new terminal and run:\no You should get a \u0026ldquo;command not found\u0026rdquo; message, which confirms that this command is free.\nNow let us add the following line to the .zshrc file:\nalias o=\u0026#39;xdg-open\u0026#39; Save the file, open a new terminal and switch to zsh. You can now use your o command to open any file.\nTo see this, let us navigate back to the socials folder that we were previously in (e.g. type z so, then up arrow key and then Enter). If you list the files in this folder (with ll), you will see that they have the .svg extension. To open one of these files, you can type o and the first letters of the name of the file, then Tab for autocompletion. This will open the file with the default image viewer application on this machine.\nScripts # If you want to use an alias to execute a (possibly complex) sequence of commands, then the preferred way is to write a script.\nFor instance, we could write a script that navigates to the mySite folder and then starts the hugo server. And we may use the alias ws (like \u0026ldquo;website\u0026rdquo;) to call this script (you can check that it is free).\nNavigate to the ~/bin folder, and create a text file called ws (for instance with gedit, as we did above for the post).\nIn this file, copy-paste the following:\n#! /bin/bash cd ~/workspace/mySite hugo server start Observe that these are the two instructions for the three tasks that we want to execute. Save the file, and make it executable by running:\nsudo chmod u+x ws To test your script, close all running instances of hugo (if any), e.g. with Ctrl + C, as explained above.\nNow regardless of location, you can type ws to (re)start the web server.\nNote. bash and zsh support the same language for commands and scripts. This is a full-fledged programming language (with conditional statements, loops, etc.), where an instruction can also be a command.\nTerminal-based applications # To conclude the demo, we introduce a few convenient applications that run in a terminal. These may save you time (compared to similar applications that rely on a GUI),\nripgrep # ripgrep allows you to search files that contain certain words or regular expressions (your IDE offers a similar functionality). For instance, let us assume that we want to search for all files under mySite that contain the string \u0026ldquo;Canada\u0026rdquo;.\nNavigate to the mySite folder. Then run:\nrg Canada This will display the path to each (text) file that contains this word (in this example, there is only one match), and the corresponding line numbers.\nranger # ranger is a popular terminal-based file browser.\nTo open it, type:\nranger You can navigate within the current directory with the up and down arrow keys, and in the directory tree (from child to parent and conversely) with the left and right arrow keys. Note that it also displays previews of text files.\nTo quit ranger, you can press the letter q.\nhtop # htop allows you to monitor processes running on your machine. To open it, type:\nhtop The upper part of the interface displays memory and CPU usage, whereas the lower part displays running process (sorted by CPU usage by default). You can kill a process with F9.\nTo quit htop, you can press the letter q.\nncdu # ncdu allows you to visualize the amount of disk space taken by your files and programs.\nTo open it, type:\nncdu The folders and files in the current folder are sorted by disk space, and you can navigate the directory three using the arrow keys (like with ranger).\nTo quit ranger, you can press the letter q.\n"}]