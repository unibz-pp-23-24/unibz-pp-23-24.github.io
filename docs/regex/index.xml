<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regular expressions on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/docs/regex/</link>
    <description>Recent content in Regular expressions on Programming project 2023-24</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/docs/regex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In practice</title>
      <link>https://unibz-pp-23-24.github.io/docs/regex/sections/practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/regex/sections/practice/</guid>
      <description>Regexes in practice # Concrete regexes deviate from theoretical ones in several ways. In particular:&#xA;Concrete syntaxes include a wide range of syntactic sugar, i.e. operators that could in theory be expressed in terms of |, * and concatenation.&#xA;Many regex engines support expressions with features (such as backreferences) that go beyond the expressivity of theoretical regexes. Technically, such expressions do not qualify as as regexes (they may describe a language that is not regular).</description>
    </item>
    <item>
      <title>Pattern matching</title>
      <link>https://unibz-pp-23-24.github.io/docs/regex/sections/pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/regex/sections/pattern/</guid>
      <description>Pattern matching # Two of the main uses of regexes are:&#xA;string validation, i.e. check whether a string satisfies certain constraints. For instance: has at least one digit and one special character, is a valid address, etc. string search, i.e. identify occurrences of a pattern in a line or in a file. This can be useful for: replacing strings in a file or a folder (e.g. within a codebase), splitting a sentence into (natural language) words, splitting a program into meaningful substrings, e.</description>
    </item>
  </channel>
</rss>
