<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Streams in Java on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/docs/stream/</link>
    <description>Recent content in Streams in Java on Programming project 2023-24</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/docs/stream/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pipeline</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/pipeline/</guid>
      <description>Pipeline # Stream computations are specified as a pipeline, which consists of:&#xA;a source (e.g. a collection or an I/O channel), a sequence of zero or more intermediate operations, each of which transforms a stream into another stream (e.g. filtering or modifying the stream&amp;rsquo;s elements), one terminal operation (e.g. collecting the elements of the transformed stream). Intermediate operations are generally specified via callback methods (the terminal operation may as well).</description>
    </item>
    <item>
      <title>Source</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/init/</guid>
      <description>Source # Collection # A stream can be created out of a Java Collection with the instance method stream.&#xA;Example.&#xA;List&amp;lt;Unit&amp;gt; units = getUnits(); units.stream(); If the collection has a predictable order of iteration (e.g. if the collection is a List), then the elements will appear in this order in the stream.&#xA;To create a stream out of the entries of a map, we can use the instance method Map.</description>
    </item>
    <item>
      <title>Intermediate operations</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/intermediate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/intermediate/</guid>
      <description>Intermediate operations # In a stream pipeline, an intermediate operation takes a stream as input, and produces another stream.&#xA;Stateless operations # A stateless intermediate operation processes each element of the input stream independently, and without the need to memorize information about previous elements in the stream. Stream.filter and Stream.map # These two instance methods allow specifying a stateless operation, via a callback method. We have already explained their behavior in detail in our initial pipeline example.</description>
    </item>
    <item>
      <title>Terminal operation</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/terminal/</guid>
      <description>Terminal operation # A stream pipeline contains one terminal operation.&#xA;This operation may for instance:&#xA;execute a method for each element of the stream (e.g. print the value of each of them), or collect these elements (e.g. into a list), or inspect these elements (check whether all of them satisfy a certain condition), or aggregate these elements (e.g. sum the values of a stream of integers). Stream.forEach # This instance method is similar to Stream.</description>
    </item>
    <item>
      <title>Numeric stream</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/numeric/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/numeric/</guid>
      <description>Numeric stream # In addition to the interface Stream, Java 8 introduced the interface IntStream (resp. DoubleStream, LongStream) that represents a stream of (unboxed) int (resp. long, double).&#xA;It provides operations that are not available in Stream&amp;lt;Integer&amp;gt; (resp. Streanm&amp;lt;Double&amp;gt;, Stream&amp;lt;Long&amp;gt;).&#xA;Warning. The interface IntStream (resp. DoubleStream, LongStream) does not extend the interface Stream. Conversion # A instance of Stream&amp;lt;$T$&amp;gt; can be converted to an instance of IntStream (resp. DoubleStream, LongStream) with the instance method Stream.</description>
    </item>
    <item>
      <title>Multithreading and order</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/order/</guid>
      <description>Multithreading and order # Multithreading # We can allow a whole stream pipeline to be executed in a concurrent or parallel fashion, for instance with the instance method Stream.parallel, as follows:&#xA;Example.&#xA;List&amp;lt;Integer&amp;gt;list = List.of(1, 2, 3); // Contains [3,4,5] List&amp;lt;Integer&amp;gt; ouputList = list.stream() .parallel() .map(i -&amp;gt; i + 2) .toList(); This allows the JVM to take advantage of available resources to execute operations (like the map operation in this example) in several threads, concurrently.</description>
    </item>
    <item>
      <title>Optional</title>
      <link>https://unibz-pp-23-24.github.io/docs/stream/sections/optional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/stream/sections/optional/</guid>
      <description>Optional # The class Optional was introduced in Java 8. An Optional is a container object that may or may not contain a value. Its main purpose is to indicate that the object returned by a function may be null.&#xA;Example. In our game, the interface Board provides a method getUnit(int rowIndex, int columnIndex), that returns the unit standing on the tile with these coordinates, if any.&#xA;This could be implemented with a method</description>
    </item>
  </channel>
</rss>
