<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multithreading on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/docs/multithreading/</link>
    <description>Recent content in Multithreading on Programming project 2023-24</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/docs/multithreading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/concurrency/</guid>
      <description>Concurrency # Core # A core is a basic processing unit. A Central Processing Unit (CPU) contains one or several cores (e.g. 4 or 8).&#xA;A Graphical Processing Unit (GPU) can contain thousands of cores.&#xA;Parallelism vs concurrency # Terminology. We call time span of a (computational) tasks the time interval comprised between the task&amp;rsquo;s start and completion. The time spans of two tasks may overlap.&#xA;Example. While downloading a video, Alice may use git to commit changes to her repository.</description>
    </item>
    <item>
      <title>Process vs thread</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/thread/</guid>
      <description>Thread # Process # A process is (usually) an instance of a computer program. Processes can interact in several ways. In particular:&#xA;a process may spawn another process, a process may wait for another process to terminate or release a lock on some resource. Thread # A process consists of one or several threads. Conceptually, a thread is similar to a process. In particular, threads can interact analogously to processes.</description>
    </item>
    <item>
      <title>A simplified view</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/simple/</guid>
      <description>A simplified view # From an abstract perspective, in order to understand the properties of a program that allows concurrency and/or parallelism, it can be convenient to assume an simplified, ideal machine that:&#xA;has an unlimited number of cores, and relies exclusively on parallelism. Parallel computation # In this section, we borrow the simple syntax for parallel computation used in the popular textbook Introduction to algorithms.&#xA;This syntax extends imperative pseudocode with three keywords:</description>
    </item>
    <item>
      <title>Race condition</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/race/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/race/</guid>
      <description>Race condition # Definition. A race condition occurs when the outcome of a program may vary depending on the order in which two threads access a resource. Illustrations # Example. The following program (in pseudocode) apparently increments variable i twice. However, it may output either 1 or 2, depending on the execution environment:&#xA;int i = 0 spawn i++ i++ sync print(i) The reason is that a core does not increment the value of a variable as an atomic operation.</description>
    </item>
    <item>
      <title>Synchronization</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/synchronization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/synchronization/</guid>
      <description>Synchronization # The behavior of a program that runs multiple threads can be hard to predict. In particular, two threads may compete to access a same resource (e.g. the value of some object&amp;rsquo;s attribute), without guarantee on the order in which they access it. This may lead (among other things) to a race condition&#xA;Programming languages that support multithreading also allow expressing constraints on the order of execution of some instructions.</description>
    </item>
    <item>
      <title>Troubleshooting</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/troubleshooting/</guid>
      <description>Troubleshooting # Alongside race conditions, there are several reasons why a program that uses multithreading may not behave as intended.&#xA;Two common ones are deadlocks and (to a lesser extent) starvation.&#xA;Deadlock # Terminology. A deadlock occurs when two threads wait for each other to release a lock. This notion also generalizes to cyclic deadlocks involving more than two threads.&#xA;In Java, this may be caused by synchronized methods or statements.</description>
    </item>
    <item>
      <title>Abstractions</title>
      <link>https://unibz-pp-23-24.github.io/docs/multithreading/sections/abstractions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/multithreading/sections/abstractions/</guid>
      <description>Abstractions # We review here some higher-level utilities available in Java to use multithreading, while reducing the risk of unwanted behaviors.&#xA;Thread safety # Terminology. A method is said to be tread-safe if it can be accessed by concurrently by several threads without &amp;ldquo;unexpected&amp;rdquo; consequences. Thread safety is a vague term, which may for instance refers to implementations that are free of race conditions.&#xA;Most high-level libraries or frameworks that exploit concurrency provide methods with some from of thread safety.</description>
    </item>
  </channel>
</rss>
