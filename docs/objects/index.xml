<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Objects and classes on Programming project 2023-24</title><link>https://unibz-pp-23-24.github.io/docs/objects/</link><description>Recent content in Objects and classes on Programming project 2023-24</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://unibz-pp-23-24.github.io/docs/objects/index.xml" rel="self" type="application/rss+xml"/><item><title>Objects</title><link>https://unibz-pp-23-24.github.io/docs/objects/sections/objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unibz-pp-23-24.github.io/docs/objects/sections/objects/</guid><description>Objects # An object is a way to group data in a meaningful way.
A simple example: JSON objects # Here is a JSON object (in Javascript syntax) that describes the city of Florence:
{ name: &amp;#34;Florence&amp;#34;, zipcode: 50100 } A JSON object may contain other objects, as well as arrays (of values, objects or arrays). For instance:
{ name: &amp;#34;Alice&amp;#34;, age: 26, birthPlace: { name: &amp;#34;Florence&amp;#34;, zipcode: 50100 }, jobs: [ { employer: &amp;#34;Kolping&amp;#34;, start: 2021, end: 2022 }, { employer : &amp;#34;Eurac&amp;#34;, start: 2023 } ] } More formally:</description></item><item><title>Class and instance</title><link>https://unibz-pp-23-24.github.io/docs/objects/sections/classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unibz-pp-23-24.github.io/docs/objects/sections/classes/</guid><description>Class and instance # A class can be viewed as a blueprint for a set of similar objects.
For instance, consider the two objects:
{ name: &amp;#34;Florence&amp;#34;, zipCode: 50100, region: &amp;#34;Tuscany&amp;#34; } { name: &amp;#34;Rome&amp;#34;, zipCode: 00100, region: &amp;#34;Lazio&amp;#34; } Each of these objects describes a city, and they share the same keys (name, zipCode and region). A possible class for these two objects may enforce this structure, and it could be named City.</description></item></channel></rss>