<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Build automation on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/docs/build/</link>
    <description>Recent content in Build automation on Programming project 2023-24</description>
    <generator>Hugo 0.125.2</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/docs/build/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Packaging a Java application</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/packaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/packaging/</guid>
      <description>Packaging a Java application # Java (like C# or Python) is a precompiled language, meaning that source code is compiled into a machine-independent representation called bytecode. Bytecode can be distributed and executed on any machine.&#xA;In Java, by convention, a source file MyClass.java is compiled into a bytecode file MyClass.class.&#xA;A Java Virtual Machine (JVM) is a program in charge of executing Java bytecode. A packaged Java program is usually a zip file that contains:</description>
    </item>
    <item>
      <title>Layout</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/layout/</guid>
      <description>Layout # The standard directory layout # By default, a Maven project is expected to comply with the so-called &amp;ldquo;standard directly layout&amp;rdquo;.&#xA;Warning. We restrict here the layout to files and folders that you are likely to use in your project. A comprehensive description can be found here. ├── pom.xml ├── README.md ├── src │ ├── main │ │ ├── java │ │ │ └── ... │ │ └── resources │ │ └── .</description>
    </item>
    <item>
      <title>Configuration file</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/pom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/pom/</guid>
      <description>Configuration file # The Project Object Model (POM) # The root folder of a Maven project normally contains a configuration file called pom.xml. This file provides the information needed to identify and build the project.&#xA;Hint. Your IDE can generate the backbone of a pom.xml file (for instance, when creating a Maven project). For a basic Java project, the pom.xml file usually has the following structure:&#xA;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;project xmlns=&amp;#34;http://maven.</description>
    </item>
    <item>
      <title>Artifact</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/artifact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/artifact/</guid>
      <description>Artifact # A Maven artifact is the output of a build process. It can for instance be a jar. Coordinates # A Maven artifact is identified by so-called coordinates:&#xA;groupId: identifier of the organization that created the project (this is usually the organization&amp;rsquo;s reversed domain name), artifactId: identifier of the project within the group, version: version of the artifact. Examples.&#xA;&amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;33.1.0-jre&amp;lt;/version&amp;gt; &amp;lt;groupId&amp;gt;com.github.haifengl&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;smile-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; These coordinates are notably used to declare dependencies.</description>
    </item>
    <item>
      <title>Dependencies</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/dependencies/</guid>
      <description>Dependencies # Maven (like Gradle) acts both as a build automation tool and as a package manager.&#xA;As a package manager, Maven (like Gradle) relies by default a software repository called Maven Central. This repository contains more than 260.000 artifacts (more than 6 million when counting versions), with over a trillion downloads in 2023.&#xA;An artifact on Maven Central is identified by its coordinates.&#xA;Finding a library&amp;rsquo;s coordinates # The coordinates of a library are often provided as part of its documentation.</description>
    </item>
    <item>
      <title>Building</title>
      <link>https://unibz-pp-23-24.github.io/docs/build/sections/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/build/sections/building/</guid>
      <description>Building # Cleaning # The command&#xA;mvn clean attempts to delete all content generated during a previous build (in particular, .class files).&#xA;Example. Let us assume that MyClass.java is compiled into MyClass.class, and then renamed MyNewClass.java. In this scenario, mvn clean allows eliminating the file MyClass.class from the target directory. The default lifecycle # Maven&amp;rsquo;s default lifecycle is a sequence of 23 operations (called phases) that can be executed during a build.</description>
    </item>
  </channel>
</rss>
