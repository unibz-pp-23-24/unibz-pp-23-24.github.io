<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit tests on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/docs/unittests/</link>
    <description>Recent content in Unit tests on Programming project 2023-24</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/docs/unittests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code units</title>
      <link>https://unibz-pp-23-24.github.io/docs/unittests/sections/structured/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/unittests/sections/structured/</guid>
      <description>Code units # A unit test is meant to test to a small unit of code. This is only possible if the program contains small units of code.&#xA;Therefore unit testing is closely related to decomposing complex problems into smaller ones (and creating methods that solve these smaller problems).&#xA;Benefits # Possible benefits of decomposing complex methods into smaller ones are:&#xA;readability, easier debugging, opportunities to factorize code (the same small methods can be called in several places), easier collaboration (two person modifying the same method in parallel is less likely if the method is small), Some good indicators that auxiliary methods may be helpful are:</description>
    </item>
    <item>
      <title>Development driven by unit tests</title>
      <link>https://unibz-pp-23-24.github.io/docs/unittests/sections/tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/unittests/sections/tdd/</guid>
      <description>Development driven by unit tests # Test-driven development (TDD) consists in converting a program&amp;rsquo;s requirements into test cases, before the program is fully developed. Note that this approach is not restricted to unit tests.&#xA;In practice # For a non-trivial method:&#xA;Create a method stub (e.g. return null is the method&amp;rsquo;s return type is a reference type). Specify the expected behavior (input and expected output) of the method. Write one or several test(s) for this method, illustrating the specification.</description>
    </item>
    <item>
      <title>in Java</title>
      <link>https://unibz-pp-23-24.github.io/docs/unittests/sections/junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/unittests/sections/junit/</guid>
      <description>Unit tests in Java # Several frameworks are available in Java for unit tests. Popular frameworks include:&#xA;JUnit 4 JUnit 5 TestNG Spock In this section, we focus on Junit 5.&#xA;Install Junit 5 with Maven # Junit 5 can be used in a Maven project by declaring the following dependency and plugin&#xA;&amp;lt;dependencies&amp;gt; ... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.10.2&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; ... &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; ... &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.</description>
    </item>
  </channel>
</rss>
