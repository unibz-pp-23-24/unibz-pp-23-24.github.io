<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Callback methods and lamda expressions on Programming project 2023-24</title>
    <link>https://unibz-pp-23-24.github.io/docs/lambda/</link>
    <description>Recent content in Callback methods and lamda expressions on Programming project 2023-24</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://unibz-pp-23-24.github.io/docs/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pure function</title>
      <link>https://unibz-pp-23-24.github.io/docs/lambda/sections/pure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/lambda/sections/pure/</guid>
      <description>Pure function # Side effects # Definition. A method has side effects if it modifies resources (variable, object, array, etc.) that are accessible outside of its scope. Definition # A pure function is a method that intuitively behaves like a mathematical function. More precisely:&#xA;Definition. A pure function is a method that:&#xA;returns a value, returns the same value if called twice with the same arguments, and has no side-effect.</description>
    </item>
    <item>
      <title>Anonymous method</title>
      <link>https://unibz-pp-23-24.github.io/docs/lambda/sections/anonymous/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/lambda/sections/anonymous/</guid>
      <description>Anonymous method # An anonymous method is a method without a name. Illustration # The two following Java methods only differ by their name:&#xA;int square(int x){ return x * x; } int toThePowerOfTwo(int x){ return x * x; } So in a sense, these two methods are the same method.&#xA;An anonymous method simply abstracts away from the name of the method. For instance, in Java, the two methods above could be described with the following lambda expression:</description>
    </item>
    <item>
      <title>Lambda expression</title>
      <link>https://unibz-pp-23-24.github.io/docs/lambda/sections/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/lambda/sections/lambda/</guid>
      <description>Lambda expression # In certain programming languages like Java, C#, C++ or JavaScript, the term lambda expression (sometimes called closure expression) is used to denote an anonymous method with a certain syntax.&#xA;The term is a (loose) reference to lambda calculus, a model of computation exclusively based on function composition and application.&#xA;Syntax in Java # A Java method&#xA;&amp;lt;ReturnType&amp;gt; myMethod (&amp;lt;Type 1&amp;gt; &amp;lt;argument 1&amp;gt;, .., &amp;lt;Type n&amp;gt; &amp;lt;argument n&amp;gt;){ &amp;lt;Body&amp;gt; } can be written anonymously as the lambda expression:</description>
    </item>
    <item>
      <title>Type of a method</title>
      <link>https://unibz-pp-23-24.github.io/docs/lambda/sections/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/lambda/sections/type/</guid>
      <description>Type of a method # Terminology. The type (a.k.a. signature) of a method consists of:&#xA;the type(s) of its argument(s), and its return type. Notation. The type of a method is sometimes described analogously to the type of a mathematical function. For instance, consider the following Java method square:&#xA;int square(int x){ return x * x; } This method takes as input an int, and returns an int.&#xA;In other words, this is a function with domain int and codomain int.</description>
    </item>
    <item>
      <title>Callback method</title>
      <link>https://unibz-pp-23-24.github.io/docs/lambda/sections/callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/lambda/sections/callback/</guid>
      <description>Callback method # When a method takes another method as argument, the latter is a callback method. Anonymous methods are often used as callback methods.&#xA;in Java # Running example # Example. The two following Java methods have the same structure: both modify each unit in the input list.&#xA;void boostUnits(List&amp;lt;Unit&amp;gt; units){ for(Unit unit: units){ unit.health++; } } void penalizeGreenUnits(List&amp;lt;Unit&amp;gt; units){ for(Unit unit: units){ if(unit.color.equals(&amp;#34;green&amp;#34;)){ unit.health--; } } } In each case, let us isolate the modification that is applied to a single unit, with a dedicated method (called boost and penalizeGreen respectively).</description>
    </item>
    <item>
      <title>Captured variables</title>
      <link>https://unibz-pp-23-24.github.io/docs/lambda/sections/captured/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://unibz-pp-23-24.github.io/docs/lambda/sections/captured/</guid>
      <description>Captured variables # In practice, lambda expressions are often used to represent pure functions.&#xA;Some languages (like Java, JavaScript, C++, etc) restrict (or allow the user to restrict) the usage of lambda expressions, so that they lean towards pure functions.&#xA;Terminology. Some programming languages allow a lambda expression to use variables that:&#xA;are declared outside of the lambda expression&amp;rsquo;s body, and are not arguments of the lambda expression. In this case, the expression is called a capturing lambda expression, and these variable are said to be captured.</description>
    </item>
  </channel>
</rss>
